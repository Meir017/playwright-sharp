{
  "api/PlaywrightSharp.JSCoverageFunction.html": {
    "href": "api/PlaywrightSharp.JSCoverageFunction.html",
    "title": "Class JSCoverageFunction | Playwright Sharp",
    "keywords": "Class JSCoverageFunction JS Coverage function info. See Functions . Inheritance System.Object JSCoverageFunction Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class JSCoverageFunction : object Properties | Improve this Doc View Source FunctionName Function Name. Declaration public string FunctionName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Ranges Ranges. Declaration public JSCoverageEntryRange[] Ranges { get; set; } Property Value Type Description JSCoverageEntryRange []"
  },
  "api/PlaywrightSharp.CSSCoverageEntryRange.html": {
    "href": "api/PlaywrightSharp.CSSCoverageEntryRange.html",
    "title": "Class CSSCoverageEntryRange | Playwright Sharp",
    "keywords": "Class CSSCoverageEntryRange Script range. Inheritance System.Object CSSCoverageEntryRange Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class CSSCoverageEntryRange : object Properties | Improve this Doc View Source End An end offset in text, exclusive. Declaration public int End { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Start A start offset in text, inclusive. Declaration public int Start { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/PlaywrightSharp.ResponseData.html": {
    "href": "api/PlaywrightSharp.ResponseData.html",
    "title": "Struct ResponseData | Playwright Sharp",
    "keywords": "Struct ResponseData Response that will fulfill a request. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public struct ResponseData Properties | Improve this Doc View Source Body Response body (text content). Declaration public string Body { get; set; } Property Value Type Description System.String | Improve this Doc View Source BodyData Response body (binary content). Declaration public byte[] BodyData { get; set; } Property Value Type Description System.Byte [] | Improve this Doc View Source ContentType If set, equals to setting https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type response header. Declaration public string ContentType { get; set; } Property Value Type Description System.String The Content-Type. | Improve this Doc View Source Headers Response headers. Header values will be converted to a string. Declaration public IDictionary<string, string> Headers { get; set; } Property Value Type Description IDictionary < System.String , System.String > | Improve this Doc View Source Status Response status code. Declaration public HttpStatusCode? Status { get; set; } Property Value Type Description System.Nullable < HttpStatusCode > Status Code."
  },
  "api/PlaywrightSharp.ElementState.html": {
    "href": "api/PlaywrightSharp.ElementState.html",
    "title": "Enum ElementState | Playwright Sharp",
    "keywords": "Enum ElementState See WaitForElementStateAsync(ElementState, Nullable<Int32>) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum ElementState : int Fields Name Description Disabled Element not Enabled . Enabled Element enabled. Hidden Not Visible or not attached. Stable Visible and Stable. Visible Element visible."
  },
  "api/PlaywrightSharp.DialogType.html": {
    "href": "api/PlaywrightSharp.DialogType.html",
    "title": "Enum DialogType | Playwright Sharp",
    "keywords": "Enum DialogType Dialog type. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum DialogType : int Fields Name Description Alert Alert dialog. BeforeUnload Before unload dialog. Confirm Confirm dialog. Prompt Prompt dialog. See Also IDialog"
  },
  "api/PlaywrightSharp.Transport.TransportClosedEventArgs.html": {
    "href": "api/PlaywrightSharp.Transport.TransportClosedEventArgs.html",
    "title": "Class TransportClosedEventArgs | Playwright Sharp",
    "keywords": "Class TransportClosedEventArgs See TransportClosed . Inheritance System.Object TransportClosedEventArgs Namespace : PlaywrightSharp.Transport Assembly : PlaywrightSharp.dll Syntax public class TransportClosedEventArgs : EventArgs Properties | Improve this Doc View Source CloseReason Close reason. Declaration public string CloseReason { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.Frame.html": {
    "href": "api/PlaywrightSharp.Frame.html",
    "title": "Class Frame | Playwright Sharp",
    "keywords": "Class Frame Inheritance System.Object ChannelOwnerBase Frame Implements IFrame Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Frame : ChannelOwnerBase, IChannelOwner<Frame>, IChannelOwner, IFrame Properties | Improve this Doc View Source ChildFrames Child frames of the this frame. Declaration public IFrame[] ChildFrames { get; } Property Value Type Description IFrame [] | Improve this Doc View Source IsDetached Gets a value indicating if the frame is detached or not. Declaration public bool IsDetached { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the frame's name attribute as specified in the tag. If the name is empty, returns the id attribute instead. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Page Owner page. Declaration public IPage Page { get; } Property Value Type Description IPage | Improve this Doc View Source ParentFrame Declaration public Frame ParentFrame { get; } Property Value Type Description Frame | Improve this Doc View Source Url Gets the frame's url. Declaration public string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddScriptTagAsync(String, String, String, String) Adds a <script> tag into the frame with the desired url or content. Declaration public Task<IElementHandle> AddScriptTagAsync(string url = null, string path = null, string content = null, string type = null) Parameters Type Name Description System.String url URL of a script to be added. System.String path Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw JavaScript content to be injected into frame. System.String type Script type. Use 'module' in order to load a Javascript ES6 module. Returns Type Description Task < IElementHandle > A that completes when the tag is added, yielding the added tag as an IElementHandle when the script's onload fires or when the script content was injected into frame. Remarks Shortcut for page.MainFrame.AddScriptTagAsync(options) . | Improve this Doc View Source AddStyleTagAsync(String, String, String) Adds a <link rel=\"stylesheet\"> tag into the frame with the desired url or a <link rel=\"stylesheet\"> tag with the content. Declaration public Task<IElementHandle> AddStyleTagAsync(string url = null, string path = null, string content = null) Parameters Type Name Description System.String url URL of the link tag. System.String path Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw CSS content to be injected into frame. Returns Type Description Task < IElementHandle > A that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added IElementHandle . | Improve this Doc View Source CheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task CheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to click in the center of the element. Declaration public Task ClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully clicked. | Improve this Doc View Source DblClickAsync(String, Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to double click in the center of the element. Declaration public Task DblClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration public Task DispatchEventAsync(string selector, string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used. System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration public Task EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration public Task EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync(String) Executes a script in the frame context. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String ) | Improve this Doc View Source EvaluateAsync(String, Object) Executes a script in the frame context. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String) Executes a script in the frame context. Declaration public Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a script in the frame context. Declaration public Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateHandleAsync(String) Executes a function that returns a IJSHandle . Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Function to be evaluated in the frame context. Returns Type Description Task < IJSHandle > A that completes when the script finishes or the promise is resolved, yielding the result of the script as a IJSHandle . Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a function that returns a IJSHandle . Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Function to be evaluated in the frame context. System.Object arg Arguments to pass to script. Returns Type Description Task < IJSHandle > A that completes when the script finishes or the promise is resolved, yielding the result of the script as a IJSHandle . Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source FillAsync(String, String, Nullable<Int32>, Nullable<Boolean>) This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error. Declaration public Task FillAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to fill for the <input>, <textarea> or [contenteditable] element System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync(String, Nullable<Int32>) Fetches an element with selector and focuses it. Declaration public Task FocusAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the the element matching selector is successfully focused. | Improve this Doc View Source GetAttributeAsync(String, String, Nullable<Int32>) Returns element attribute value. Declaration public Task<string> GetAttributeAsync(string selector, string name, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetContentAsync() Gets the full HTML contents of the page, including the doctype. Declaration public Task<string> GetContentAsync() Returns Type Description Task < System.String > A that completes when the html content is retrieved, yielding the HTML content. | Improve this Doc View Source GetFrameElementAsync() This is an inverse of GetContentFrameAsync() . Note that returned handle actually belongs to the parent frame. This method throws an error if the frame has been detached before frameElement() returns. Declaration public Task<IElementHandle> GetFrameElementAsync() Returns Type Description Task < IElementHandle > A that completes when the element is resolved, yielding the corresponding IElementHandle . | Improve this Doc View Source GetInnerHtmlAsync(String, Nullable<Int32>) Resolves to the element.innerHTML. Declaration public Task<string> GetInnerHtmlAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(String, Nullable<Int32>) Resolves to the element.innerText. Declaration public Task<string> GetInnerTextAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetTextContentAsync(String, Nullable<Int32>) Resolves to the element.textContent. Declaration public Task<string> GetTextContentAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source GetTitleAsync() Returns page's title. Declaration public Task<string> GetTitleAsync() Returns Type Description Task < System.String > A that completes when the action completed, yielding the frame's title. See Also GetTitleAsync () | Improve this Doc View Source GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) Navigates to an URL. Declaration public Task<IResponse> GoToAsync(string url, LifecycleEvent? waitUntil = null, string referer = null, int? timeout = null) Parameters Type Name Description System.String url URL to navigate page to. The url should include scheme, e.g. https://. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.String referer Referer header value. If provided it will take prefrence over the referer header value set by . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > A that completes with resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. Remarks GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will throw an error if: There's an SSL error (e.g. in case of self-signed certificates). Target URL is invalid. The timeout is exceeded during navigation. The remote server does not respond or is unreachable. The main resource failed to load. GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling response.status(). NOTE GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) either throws an error or returns a main resource response. The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null. NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue. Shortcut for GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) . | Improve this Doc View Source HoverAsync(String, Nullable<Point>, Modifier[], Boolean, Nullable<Int32>) Fetches an element with selector , scrolls it into view if needed, and then uses PlaywrightSharp.Mouse to hover over the center of the element. Declaration public Task HoverAsync(string selector, Point? position = null, Modifier[] modifiers = null, bool force = false, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered. System.Nullable < Point > position A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Boolean force Whether to bypass the actionability checks. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element matching selector is successfully hovered. | Improve this Doc View Source PressAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then sends a keydown , keypress / input , and keyup event for each character in the text. Declaration public Task PressAsync(string selector, string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String key Name of the key to press or a character to generate, such as ArrowLeft or a`. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the page. Declaration public Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) Queries frame for the selector. If there's no such element within the frame, the method will resolve to null . Declaration public Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector Selector to query frame for. Returns Type Description Task < IElementHandle > A that completes when the selector is found (or failed), yielding the IElementHandle pointing to the frame element. See Also QuerySelectorAsync ( System.String ) | Improve this Doc View Source SelectOptionAsync(String, IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, IElementHandle value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params IElementHandle[] values) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, IElementHandle[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, SelectOption value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params SelectOption[] values) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, SelectOption[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration public Task<string[]> SelectOptionAsync(string selector, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params string[] values) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SetContentAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) Sets the HTML markup to the frame. Declaration public Task SetContentAsync(string html, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String html HTML markup to assign to the page. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the javascript code executing injected the HTML finishes. See Also SetContentAsync ( System.String , System.Nullable < LifecycleEvent >, System.Nullable < System.Int32 >) | Improve this Doc View Source SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, FilePayload file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload file The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, string file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String file The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source TypeAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Sends a keydown , keypress / input , and keyup event for each character in the text. Declaration public Task TypeAsync(string selector, string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String text A text to type into a focused element. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32) . | Improve this Doc View Source UncheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task UncheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source WaitForFunctionAsync(String, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForLoadStateAsync(LifecycleEvent, Nullable<Int32>) Completes when the page reaches a required load state, load by default. The navigation can be in progress when it is called. If navigation is already at a required state, completes immediately. Declaration public Task WaitForLoadStateAsync(LifecycleEvent state = LifecycleEvent.Load, int? timeout = null) Parameters Type Name Description LifecycleEvent state When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the load is completed. | Improve this Doc View Source WaitForNavigationAsync(Func<String, Boolean>, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(Func<string, bool> url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Func < System.String , System.Boolean > url Wait for this specific URL that matches the function condition. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(Regex, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(Regex url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Regex url Wait for this specific URL Regex. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(string url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String url Wait for this specific URL. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration public Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for. System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM. | Improve this Doc View Source WaitForTimeoutAsync(Int32) Returns a Task that resolves after the timeout. Declaration public Task WaitForTimeoutAsync(int timeout) Parameters Type Name Description System.Int32 timeout A timeout to wait for. Returns Type Description Task A that completes when the timeout is hit. Events | Improve this Doc View Source LoadState Raised when a new LoadState was added. Declaration public event EventHandler<LoadStateEventArgs> LoadState Event Type Type Description EventHandler < LoadStateEventArgs > | Improve this Doc View Source Navigated Raised when a navigation is received. Declaration public event EventHandler<FrameNavigatedEventArgs> Navigated Event Type Type Description EventHandler < FrameNavigatedEventArgs > Explicit Interface Implementations | Improve this Doc View Source IFrame.ParentFrame Gets the parent IFrame , if any. Detached frames and main frames return null . Declaration IFrame IFrame.ParentFrame { get; } Returns Type Description IFrame Implements IFrame"
  },
  "api/PlaywrightSharp.ViewportSize.html": {
    "href": "api/PlaywrightSharp.ViewportSize.html",
    "title": "Class ViewportSize | Playwright Sharp",
    "keywords": "Class ViewportSize View port data. Inheritance System.Object ViewportSize Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ViewportSize : IEquatable<ViewportSize> Properties | Improve this Doc View Source Height Viewport height. Declaration public int Height { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source None ViewportSize used to determine if the a Viewport was set or not. Declaration public static ViewportSize None { get; } Property Value Type Description ViewportSize | Improve this Doc View Source Width Viewport width. Declaration public int Width { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Clones the ViewportSize . Declaration public ViewportSize Clone() Returns Type Description ViewportSize A copy of the current ViewportSize . | Improve this Doc View Source Equals(ViewportSize) Declaration public bool Equals(ViewportSize other) Parameters Type Name Description ViewportSize other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/PlaywrightSharp.PlaywrightSharpException.html": {
    "href": "api/PlaywrightSharp.PlaywrightSharpException.html",
    "title": "Class PlaywrightSharpException | Playwright Sharp",
    "keywords": "Class PlaywrightSharpException Base exception used to identify any exception thrown by PlaywrightSharp. Inheritance System.Object PlaywrightSharpException NavigationException TargetClosedException Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PlaywrightSharpException : Exception Constructors | Improve this Doc View Source PlaywrightSharpException() Initializes a new instance of the PlaywrightSharpException class. Declaration public PlaywrightSharpException() | Improve this Doc View Source PlaywrightSharpException(SerializationInfo, StreamingContext) Initializes a new instance of the PlaywrightSharpException class. Declaration protected PlaywrightSharpException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Info. StreamingContext context Context. | Improve this Doc View Source PlaywrightSharpException(String) Initializes a new instance of the PlaywrightSharpException class. Declaration public PlaywrightSharpException(string message) Parameters Type Name Description System.String message Exception message. | Improve this Doc View Source PlaywrightSharpException(String, Exception) Initializes a new instance of the PlaywrightSharpException class. Declaration public PlaywrightSharpException(string message, Exception innerException) Parameters Type Name Description System.String message Exception message. Exception innerException Inner exception."
  },
  "api/PlaywrightSharp.ElementHandle.html": {
    "href": "api/PlaywrightSharp.ElementHandle.html",
    "title": "Class ElementHandle | Playwright Sharp",
    "keywords": "Class ElementHandle Inheritance System.Object ChannelOwnerBase JSHandle ElementHandle Implements IElementHandle IJSHandle Inherited Members JSHandle.EvaluateHandleAsync(String) JSHandle.EvaluateHandleAsync(String, Object) JSHandle.EvaluateAsync<T>(String) JSHandle.EvaluateAsync(String) JSHandle.EvaluateAsync(String, Object) JSHandle.EvaluateAsync<T>(String, Object) JSHandle.GetJsonValueAsync<T>() JSHandle.GetPropertyAsync(String) JSHandle.GetPropertiesAsync() JSHandle.DisposeAsync() JSHandle.ToString() Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ElementHandle : JSHandle, IChannelOwner<JSHandle>, IElementHandle, IJSHandle, IChannelOwner<ElementHandle>, IChannelOwner Methods | Improve this Doc View Source CheckAsync(Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task CheckAsync(int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Scrolls element into view if needed, and then uses Mouse to click in the center of the element. Declaration public Task ClickAsync(int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source DblClickAsync(Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Scrolls element into view if needed, and then uses Mouse to double click in the center of the element. Declaration public Task DblClickAsync(int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration public Task DispatchEventAsync(string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction . Declaration public Task<JsonElement? > EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction . Declaration public Task<JsonElement? > EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the element and passes it as the first argument to pageFunction . Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the element and passes it as the first argument to pageFunction . Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration public Task<JsonElement? > EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration public Task<JsonElement? > EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the element and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the element and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source FillAsync(String, Nullable<Int32>, Nullable<Boolean>) Focuses the element and triggers an input event after filling. If element is not a text &lt;input> , &lt;textarea> or [contenteditable] element, the method throws an error. Declaration public Task FillAsync(string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String value Value to set for the &lt;input> , &lt;textarea> or [contenteditable] element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync() Calls focus on the element. Declaration public Task FocusAsync() Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source GetAttributeAsync(String, Nullable<Int32>) Returns element attribute value. Declaration public Task<string> GetAttributeAsync(string name, int? timeout = null) Parameters Type Name Description System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetBoundingBoxAsync() Gets the bounding box of the element (relative to the main frame), or null if the element is not visible. Declaration public Task<Rect> GetBoundingBoxAsync() Returns Type Description Task < Rect > A that completes when the Rect is resolved, yielding element's Rect . | Improve this Doc View Source GetContentFrameAsync() Content frame for element handles referencing iframe nodes, or null otherwise. Declaration public Task<IFrame> GetContentFrameAsync() Returns Type Description Task < IFrame > A that completes when the frame is resolved, yielding element's parent IFrame . | Improve this Doc View Source GetInnerHtmlAsync(Nullable<Int32>) Resolves to the element.innerHTML. Declaration public Task<string> GetInnerHtmlAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(Nullable<Int32>) Resolves to the element.innerText. Declaration public Task<string> GetInnerTextAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetOwnerFrameAsync() Returns the frame containing the given element. Declaration public Task<IFrame> GetOwnerFrameAsync() Returns Type Description Task < IFrame > A that completes when the frame is resolved, yielding element's owner IFrame . | Improve this Doc View Source GetTextContentAsync(Nullable<Int32>) Resolves to the element.textContent. Declaration public Task<string> GetTextContentAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source HoverAsync(Modifier[], Nullable<Point>, Nullable<Int32>, Boolean) Scrolls element into view if needed, and then uses Mouse to hover over the center of the element. Declaration public Task HoverAsync(Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false) Parameters Type Name Description Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. Returns Type Description Task A that completes when the element is successfully hovered. | Improve this Doc View Source PressAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then uses DownAsync(String) and UpAsync(String) . Declaration public Task PressAsync(string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String key Name of key to press, such as ArrowLeft . See KeyDefinitions for a list of all key names. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks If key is a single character and no modifier keys besides Shift are being held down, a keypress / input event will also be generated. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the element. Declaration public Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query element for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) The method runs document.querySelector within the element. If no element matches the selector, the return value resolve to null . Declaration public Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector A selector to query element for. Returns Type Description Task < IElementHandle > A that completes when the javascript function finishes, yielding an IElementHandle . | Improve this Doc View Source ScreenshotAsync(String, Boolean, Nullable<ScreenshotFormat>, Nullable<Int32>, Nullable<Int32>) Takes a screenshot of the element. Declaration public Task<byte[]> ScreenshotAsync(string path = null, bool omitBackground = false, ScreenshotFormat? type = null, int? quality = null, int? timeout = null) Parameters Type Name Description System.String path The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk. System.Boolean omitBackground Hides default white background and allows capturing screenshots with transparency. Defaults to false . System.Nullable < ScreenshotFormat > type Specify screenshot type, can be either jpeg or png. Defaults to 'png'. System.Nullable < System.Int32 > quality The quality of the image, between 0-100. Not applicable to png images. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScrollIntoViewIfNeededAsync(Nullable<Int32>) Tries to scroll element into view, unless it is completely visible as defined by https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API 's ratio . Declaration public Task ScrollIntoViewIfNeededAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element is successfully scrolled into view. | Improve this Doc View Source SelectOptionAsync(IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(IElementHandle value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description IElementHandle value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(params IElementHandle[] values) Parameters Type Name Description IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(IElementHandle[] value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description IElementHandle [] value System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(SelectOption value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description SelectOption value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(params SelectOption[] values) Parameters Type Name Description SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(SelectOption[] value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description SelectOption [] value System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration public Task<string[]> SelectOptionAsync(int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(params string[] values) Parameters Type Name Description System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectTextAsync(Nullable<Int32>) This method waits for actionability checks, then focuses the element and selects all its text content. Declaration public Task SelectTextAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the text is selected or timeout. | Improve this Doc View Source SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(FilePayload file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload file The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String file The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source TypeAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and sends a keydown , keypress / input , and keyup event for each character in the text. Declaration public Task TypeAsync(string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String text A text to type into a focused element. System.Int32 delay Delay between key press. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) . | Improve this Doc View Source UncheckAsync(Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task UncheckAsync(int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source WaitForElementStateAsync(ElementState, Nullable<Int32>) Depending on the state parameter, this method waits for one of the actionability checks to pass. This method throws when the element is detached while waiting, unless waiting for the \"hidden\" state. Declaration public Task WaitForElementStateAsync(ElementState state, int? timeout = null) Parameters Type Name Description ElementState state State to wait for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task A that completes when the wait condition matches or timed out. | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration public Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for, relative to the IElementHandle . System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM. Implements IElementHandle IJSHandle"
  },
  "api/PlaywrightSharp.NavigationException.html": {
    "href": "api/PlaywrightSharp.NavigationException.html",
    "title": "Class NavigationException | Playwright Sharp",
    "keywords": "Class NavigationException Exception thrown when a IPage fails to navigate an URL. Inheritance System.Object PlaywrightSharpException NavigationException Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class NavigationException : PlaywrightSharpException Constructors | Improve this Doc View Source NavigationException() Initializes a new instance of the NavigationException class. Declaration public NavigationException() | Improve this Doc View Source NavigationException(SerializationInfo, StreamingContext) Initializes a new instance of the NavigationException class. Declaration protected NavigationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Info. StreamingContext context Context. | Improve this Doc View Source NavigationException(String) Initializes a new instance of the NavigationException class. Declaration public NavigationException(string message) Parameters Type Name Description System.String message Message. | Improve this Doc View Source NavigationException(String, Exception) Initializes a new instance of the NavigationException class. Declaration public NavigationException(string message, Exception innerException) Parameters Type Name Description System.String message Message. Exception innerException Inner exception. | Improve this Doc View Source NavigationException(String, String, Exception) Initializes a new instance of the NavigationException class. Declaration public NavigationException(string message, string url, Exception innerException = null) Parameters Type Name Description System.String message Message. System.String url Url. Exception innerException Inner exception. Properties | Improve this Doc View Source Url Url that caused the exception. Declaration public string Url { get; } Property Value Type Description System.String The URL."
  },
  "api/PlaywrightSharp.SerializedAXNode.html": {
    "href": "api/PlaywrightSharp.SerializedAXNode.html",
    "title": "Class SerializedAXNode | Playwright Sharp",
    "keywords": "Class SerializedAXNode AXNode. Inheritance System.Object SerializedAXNode Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class SerializedAXNode : IEquatable<SerializedAXNode> Constructors | Improve this Doc View Source SerializedAXNode() Initializes a new instance of the SerializedAXNode class. Declaration public SerializedAXNode() Properties | Improve this Doc View Source AutoComplete What kind of autocomplete is supported by a control. Declaration public string AutoComplete { get; set; } Property Value Type Description System.String | Improve this Doc View Source Checked Whether the checkbox is checked, or \"mixed\". Declaration public CheckedState Checked { get; set; } Property Value Type Description CheckedState | Improve this Doc View Source Children Child nodes of this node, if any. Declaration public SerializedAXNode[] Children { get; set; } Property Value Type Description SerializedAXNode [] | Improve this Doc View Source Description An additional human readable description of the node. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Disabled Whether the node is disabled. Declaration public bool Disabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Expanded Whether the node is expanded or collapsed. Declaration public bool Expanded { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Focused Whether the node is focused. Declaration public bool Focused { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPopup What kind of popup is currently being shown for a node. Declaration public bool HasPopup { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Invalid Whether and in what way this node's value is invalid. Declaration public string Invalid { get; set; } Property Value Type Description System.String | Improve this Doc View Source KeyShortcuts Keyboard shortcuts associated with this node. Declaration public string KeyShortcuts { get; set; } Property Value Type Description System.String | Improve this Doc View Source Level The level of a heading. Declaration public int Level { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Modal Whether the node is modal . Declaration public bool Modal { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Multiline Whether the node text input supports multiline. Declaration public bool Multiline { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Multiselectable Whether more than one child can be selected. Declaration public bool Multiselectable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name A human readable name for the node. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Orientation Whether the node is oriented horizontally or vertically. Declaration public string Orientation { get; set; } Property Value Type Description System.String | Improve this Doc View Source Pressed Whether the toggle button is checked, or \"mixed\". Declaration public PressedState Pressed { get; set; } Property Value Type Description PressedState | Improve this Doc View Source Readonly Whether the node is read only. Declaration public bool Readonly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Required Whether the node is required. Declaration public bool Required { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Role The role . Declaration public string Role { get; set; } Property Value Type Description System.String | Improve this Doc View Source RoleDescription A human readable alternative to the role. Declaration public string RoleDescription { get; set; } Property Value Type Description System.String | Improve this Doc View Source Selected Whether the node is selected in its parent node. Declaration public bool Selected { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ValueMax The maximum value in a node. Declaration public int ValueMax { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ValueMin The minimum value in a node. Declaration public int ValueMin { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ValueNumber The current value of the node. Declaration public decimal? ValueNumber { get; set; } Property Value Type Description System.Nullable < System.Decimal > | Improve this Doc View Source ValueString The current value of the node. Declaration public string ValueString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueText A description of the current value. Declaration public string ValueText { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(SerializedAXNode) Declaration public bool Equals(SerializedAXNode other) Parameters Type Name Description SerializedAXNode other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/PlaywrightSharp.IBrowserContext.html": {
    "href": "api/PlaywrightSharp.IBrowserContext.html",
    "title": "Interface IBrowserContext | Playwright Sharp",
    "keywords": "Interface IBrowserContext BrowserContexts provide a way to operate multiple independent browser sessions. If a IPage opens another page, e.g.with a window.open call, the popup will belong to the parent page's browser context. PlaywrightSharp allows creation of \"incognito\" browser contexts with NewContextAsync(BrowserContextOptions) method. \"Incognito\" browser contexts don't write any browsing data to disk. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IBrowserContext : IAsyncDisposable Examples // Create a new incognito browser context const context = await browser.NewContextAsync(); // Create a new page inside context. const page = await context.NewPageAsync(\"https://example.com\"); // Dispose context once it's no longer needed. await context.CloseAsync(); Properties | Improve this Doc View Source DefaultNavigationTimeout Maximum navigation time in milliseconds. Declaration int DefaultNavigationTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DefaultTimeout This setting will change the default maximum time for all the methods accepting timeout option. Declaration int DefaultTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Pages An array of all pages inside the browser context. Declaration IPage[] Pages { get; } Property Value Type Description IPage [] Methods | Improve this Doc View Source AddCookiesAsync(IEnumerable<SetNetworkCookieParam>) Clears all of the current cookies and then sets the cookies for the context. Declaration Task AddCookiesAsync(IEnumerable<SetNetworkCookieParam> cookies) Parameters Type Name Description IEnumerable < SetNetworkCookieParam > cookies Cookies to set. Returns Type Description Task A that completes when the cookies are set. | Improve this Doc View Source AddCookiesAsync(SetNetworkCookieParam[]) Clears all of the current cookies and then sets the cookies for the context. Declaration Task AddCookiesAsync(params SetNetworkCookieParam[] cookies) Parameters Type Name Description SetNetworkCookieParam [] cookies Cookies to set. Returns Type Description Task A that completes when the cookies are set. | Improve this Doc View Source AddInitScriptAsync(String, Object[], String, String) Adds a script which would be evaluated in one of the following scenarios: Whenever a page is created in the browser context or is navigated. Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame. Declaration Task AddInitScriptAsync(string script = null, object[] arg = null, string path = null, string content = null) Parameters Type Name Description System.String script Script to be evaluated in all pages in the browser context or script path. System.Object [] arg Optional argument to pass to script . System.String path Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to . System.String content Gets or sets the raw JavaScript content to be injected into frame. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source ClearCookiesAsync() Clears the context's cookies. Declaration Task ClearCookiesAsync() Returns Type Description Task A that completes when the cookies are cleared. | Improve this Doc View Source ClearPermissionsAsync() Clears all permission overrides for the browser context. Declaration Task ClearPermissionsAsync() Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source CloseAsync() Closes the browser context. All the targets that belong to the browser context will be closed. Declaration Task CloseAsync() Returns Type Description Task A that completes when the browser context is closed. Remarks NOTE only incognito browser contexts can be closed. | Improve this Doc View Source ExposeBindingAsync(String, Action<BindingSource>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves when playwrightBinding completes. Declaration Task ExposeBindingAsync(string name, Action<BindingSource> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource > playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T>(String, Action<BindingSource, T>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves when playwrightBinding completes. Declaration Task ExposeBindingAsync<T>(string name, Action<BindingSource, T> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource , T> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves to the return value of playwrightBinding . Declaration Task ExposeBindingAsync<TResult>(string name, Func<BindingSource, TResult> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , TResult> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description TResult The result of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves to the return value of playwrightBinding . Declaration Task ExposeBindingAsync<T, TResult>(string name, Func<BindingSource, T, TResult> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T, TResult> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightBinding . TResult The result of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves to the return value of playwrightBinding . Declaration Task ExposeBindingAsync<T1, T2, TResult>(string name, Func<BindingSource, T1, T2, TResult> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, TResult> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightBinding . T2 The second parameter of playwrightBinding . TResult The result of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves to the return value of playwrightBinding . Declaration Task ExposeBindingAsync<T1, T2, T3, TResult>(string name, Func<BindingSource, T1, T2, T3, TResult> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, T3, TResult> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightBinding . T2 The second parameter of playwrightBinding . T3 The third parameter of playwrightBinding . TResult The result of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves to the return value of playwrightBinding . Declaration Task ExposeBindingAsync<T1, T2, T3, T4, TResult>(string name, Func<BindingSource, T1, T2, T3, T4, TResult> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, T3, T4, TResult> playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightBinding . T2 The second parameter of playwrightBinding . T3 The third parameter of playwrightBinding . T4 The fourth parameter of playwrightBinding . TResult The result of playwrightBinding . Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync(String, Action) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration Task ExposeFunctionAsync(string name, Action playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T>(String, Action<T>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration Task ExposeFunctionAsync<T>(string name, Action<T> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action <T> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<TResult>(String, Func<TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<TResult>(string name, Func<TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<TResult>(String, Func<TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T, TResult>(string name, Func<T, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, TResult>(string name, Func<T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, T3, TResult>(string name, Func<T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, T3, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, T3, T4, TResult>(string name, Func<T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, T3, T4, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . T4 The fourth parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) survive navigations. | Improve this Doc View Source GetCookiesAsync(String[]) Returns the context's cookies. Declaration Task<IEnumerable<NetworkCookie>> GetCookiesAsync(params string[] urls) Parameters Type Name Description System.String [] urls Url's to return cookies for. Returns Type Description Task < IEnumerable < NetworkCookie >> A that completes when the cookies are sent by the browser, yielding a . Remarks If no URLs are specified, this method returns cookies for the current page URL. If URLs are specified, only cookies for those URLs are returned. | Improve this Doc View Source GrantPermissionsAsync(ContextPermission, String) Grants permissions to an URL. Declaration Task GrantPermissionsAsync(ContextPermission permission, string origin = null) Parameters Type Name Description ContextPermission permission Permission to grant. System.String origin The origin to grant permissions to, e.g. \"https://example.com\". Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source GrantPermissionsAsync(ContextPermission[], String) Grants permissions to an URL. Declaration Task GrantPermissionsAsync(ContextPermission[] permissions, string origin = null) Parameters Type Name Description ContextPermission [] permissions An array of permissions to grant. System.String origin The origin to grant permissions to, e.g. \"https://example.com\". Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source NewPageAsync(String) Creates a new page in the browser context and optionally navigates it to the specified URL. Declaration Task<IPage> NewPageAsync(string url = null) Parameters Type Name Description System.String url URL to navigate after the page is created. Returns Type Description Task < IPage > A that completes when a new IPage is created, yielding the new IPage . | Improve this Doc View Source RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(Func<string, bool> url, Action<Route, IRequest> handler) Parameters Type Name Description Func < System.String , System.Boolean > url A fucntion that evaluate the URL match. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(Regex, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(Regex url, Action<Route, IRequest> handler) Parameters Type Name Description Regex url A regex to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(String, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by any page in the browser context. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(string url, Action<Route, IRequest> handler) Parameters Type Name Description System.String url A glob pattern to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source SetExtraHttpHeadersAsync(Dictionary<String, String>) Sets extra HTTP headers that will be sent with every request in every page in the context. Declaration Task SetExtraHttpHeadersAsync(Dictionary<string, string> headers) Parameters Type Name Description Dictionary < System.String , System.String > headers Additional http headers to be sent with every request. Returns Type Description Task A that completes when the headers are set. | Improve this Doc View Source SetGeolocationAsync(Geolocation) Sets the page's geolocation. Declaration Task SetGeolocationAsync(Geolocation geolocation) Parameters Type Name Description Geolocation geolocation Geolocation. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source SetGeolocationAsync(Decimal, Decimal, Decimal) Sets the page's geolocation. Declaration Task SetGeolocationAsync(decimal latitude, decimal longitude, decimal accuracy = null) Parameters Type Name Description System.Decimal latitude Latitude between -90 and 90. System.Decimal longitude Longitude between -180 and 180. System.Decimal accuracy Optional non-negative accuracy value. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source SetHttpCredentialsAsync(Credentials) Provide credentials for http authentication https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication . Declaration Task SetHttpCredentialsAsync(Credentials httpCredentials) Parameters Type Name Description Credentials httpCredentials The credentials. Returns Type Description Task A that completes when the credentials are set. Remarks To disable authentication, pass null . | Improve this Doc View Source SetOfflineAsync(Boolean) Set offline mode for the context. Declaration Task SetOfflineAsync(bool offline) Parameters Type Name Description System.Boolean offline When true enables offline mode for the page. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(Func<string, bool> url, Action<Route, IRequest> handler = null) Parameters Type Name Description Func < System.String , System.Boolean > url A function used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(Regex, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(Regex url, Action<Route, IRequest> handler = null) Parameters Type Name Description Regex url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(String, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(string url, Action<Route, IRequest> handler = null) Parameters Type Name Description System.String url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) Waits for event to fire and passes its value into the predicate function. Declaration Task<T> WaitForEvent<T>(PlaywrightEvent<T> e, Func<T, bool> predicate = null, int? timeout = null) where T : EventArgs Parameters Type Name Description PlaywrightEvent <T> e Event to wait for. Func <T, System.Boolean > predicate Receives the event data and resolves when the waiting should resolve. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task <T> A that completes when the predicate returns truthy value. Yielding the information of the event. Type Parameters Name Description T Return type. Events | Improve this Doc View Source Close Raised when Browser context gets closed. Declaration event EventHandler<EventArgs> Close Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Page Raised when a new page is created in the Browser context. Declaration event EventHandler<PageEventArgs> Page Event Type Type Description EventHandler < PageEventArgs >"
  },
  "api/PlaywrightSharp.Download.html": {
    "href": "api/PlaywrightSharp.Download.html",
    "title": "Class Download | Playwright Sharp",
    "keywords": "Class Download Download objects are dispatched by page via the Download event. All the downloaded files belonging to the browser context are deleted when the browser context is closed.All downloaded files are deleted when the browser closes. Download event is emitted once the download starts. Inheritance System.Object ChannelOwnerBase Download Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Download : ChannelOwnerBase, IChannelOwner<Download>, IChannelOwner Properties | Improve this Doc View Source SuggestedFilename Returns suggested filename for this download. It is typically computed by the browser from the Content-Disposition response header or the download attribute. See the spec on whatwg. Different browsers can use different logic for computing it. Declaration public string SuggestedFilename { get; } Property Value Type Description System.String | Improve this Doc View Source Url Returns downloaded url. Declaration public string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateReadStreamAsync() Returns readable stream for current download or null if download failed. Declaration public Task<Stream> CreateReadStreamAsync() Returns Type Description Task < Stream > A that completes when the stream is created, yielding the stream. | Improve this Doc View Source DeleteAsync() Deletes the downloaded file. Declaration public Task DeleteAsync() Returns Type Description Task A that completes when the file is removed. | Improve this Doc View Source GetFailureAsync() Returns download error if any. Declaration public Task<string> GetFailureAsync() Returns Type Description Task < System.String > A that completes when failure is resolved, yielding the faulire. | Improve this Doc View Source GetPathAsync() Returns path to the downloaded file in case of successful download. Declaration public Task<string> GetPathAsync() Returns Type Description Task < System.String > A that completes when the download file path is resolved, yielding the path. | Improve this Doc View Source SaveAsAsync(String) Saves the download to a user-specified path. Declaration public Task SaveAsAsync(string path) Parameters Type Name Description System.String path Path where the download should be saved. Returns Type Description Task A that completes when the file is saved."
  },
  "api/PlaywrightSharp.DownloadEventArgs.html": {
    "href": "api/PlaywrightSharp.DownloadEventArgs.html",
    "title": "Class DownloadEventArgs | Playwright Sharp",
    "keywords": "Class DownloadEventArgs See Download . Inheritance System.Object DownloadEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class DownloadEventArgs : EventArgs Properties | Improve this Doc View Source Download Download info. Declaration public Download Download { get; } Property Value Type Description Download"
  },
  "api/PlaywrightSharp.RequestEventArgs.html": {
    "href": "api/PlaywrightSharp.RequestEventArgs.html",
    "title": "Class RequestEventArgs | Playwright Sharp",
    "keywords": "Class RequestEventArgs Arguments used by IPage events. Inheritance System.Object RequestEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class RequestEventArgs : EventArgs Properties | Improve this Doc View Source Request Gets the request. Declaration public IRequest Request { get; set; } Property Value Type Description IRequest The request. See Also Request RequestFinished"
  },
  "api/PlaywrightSharp.LaunchPersistentOptions.html": {
    "href": "api/PlaywrightSharp.LaunchPersistentOptions.html",
    "title": "Class LaunchPersistentOptions | Playwright Sharp",
    "keywords": "Class LaunchPersistentOptions Options for LaunchPersistentContextAsync(String, LaunchPersistentOptions) . Inheritance System.Object LaunchOptions LaunchPersistentOptions Inherited Members LaunchOptions.Headless LaunchOptions.Args LaunchOptions.UserDataDir LaunchOptions.Devtools LaunchOptions.ExecutablePath LaunchOptions.DownloadsPath LaunchOptions.IgnoreHTTPSErrors LaunchOptions.Timeout LaunchOptions.DumpIO LaunchOptions.SlowMo LaunchOptions.IgnoreDefaultArgs LaunchOptions.HandleSIGINT LaunchOptions.HandleSIGTERM LaunchOptions.HandleSIGHUP LaunchOptions.ChromiumSandbox LaunchOptions.IgnoredDefaultArgs LaunchOptions.Env LaunchOptions.FirefoxUserPrefs LaunchOptions.Proxy LaunchOptions.ToPersistentOptions() Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class LaunchPersistentOptions : LaunchOptions Properties | Improve this Doc View Source AcceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. Declaration public bool? AcceptDownloads { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BypassCSP Toggles bypassing page's Content-Security-Policy. Declaration public bool? BypassCSP { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ColorScheme Emulates 'prefers-colors-scheme' media feature. Declaration public ColorScheme? ColorScheme { get; set; } Property Value Type Description System.Nullable < ColorScheme > | Improve this Doc View Source DeviceScaleFactor Gets or sets the device scale factor. Declaration public decimal? DeviceScaleFactor { get; set; } Property Value Type Description System.Nullable < System.Decimal > | Improve this Doc View Source ExtraHttpHeaders An object containing additional HTTP headers to be sent with every request. Declaration public Dictionary<string, string> ExtraHttpHeaders { get; set; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source Geolocation Changes the Geolocation of the context. Declaration public Geolocation Geolocation { get; set; } Property Value Type Description Geolocation | Improve this Doc View Source HasTouch Specifies if viewport supports touch events. Defaults to false. Declaration public bool? HasTouch { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source HttpCredentials Credentials for HTTP authentication. Declaration public Credentials HttpCredentials { get; set; } Property Value Type Description Credentials | Improve this Doc View Source IsMobile Gets or sets whether the meta viewport tag is taken into account. Declaration public bool? IsMobile { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source JavaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. Declaration public bool? JavaScriptEnabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Declaration public string Locale { get; set; } Property Value Type Description System.String | Improve this Doc View Source Offline Whether to emulate network being offline. Defaults to false . Declaration public bool? Offline { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. Declaration public ContextPermission[] Permissions { get; set; } Property Value Type Description ContextPermission [] | Improve this Doc View Source TimezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Declaration public string TimezoneId { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserAgent Specific user agent to use in this context. Declaration public string UserAgent { get; set; } Property Value Type Description System.String | Improve this Doc View Source Viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. Declaration public ViewportSize Viewport { get; set; } Property Value Type Description ViewportSize Methods | Improve this Doc View Source Add(LaunchPersistentOptions, BrowserContextOptions) Adds all the values set int right into left . Declaration public static LaunchPersistentOptions Add(LaunchPersistentOptions left, BrowserContextOptions right) Parameters Type Name Description LaunchPersistentOptions left LaunchPersistentOptions to hidratate. BrowserContextOptions right BrowserContextOptions to get the values from. Returns Type Description LaunchPersistentOptions left with the values of right . | Improve this Doc View Source Clone() Clones the BrowserContextOptions . Declaration public BrowserContextOptions Clone() Returns Type Description BrowserContextOptions A copy of the current BrowserContextOptions . Operators | Improve this Doc View Source Addition(LaunchPersistentOptions, BrowserContextOptions) Adds all the values set int right into left . Declaration public static LaunchPersistentOptions operator +(LaunchPersistentOptions left, BrowserContextOptions right) Parameters Type Name Description LaunchPersistentOptions left LaunchPersistentOptions to hidratate. BrowserContextOptions right BrowserContextOptions to get the values from. Returns Type Description LaunchPersistentOptions left with the values of right ."
  },
  "api/PlaywrightSharp.NetworkCookie.html": {
    "href": "api/PlaywrightSharp.NetworkCookie.html",
    "title": "Class NetworkCookie | Playwright Sharp",
    "keywords": "Class NetworkCookie Cookie data. Inheritance System.Object NetworkCookie Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class NetworkCookie : IEquatable<NetworkCookie> Properties | Improve this Doc View Source Domain Gets or sets the domain. Declaration public string Domain { get; set; } Property Value Type Description System.String The domain. | Improve this Doc View Source Expires Gets or sets the expiration. Unix time in seconds. Declaration public decimal Expires { get; set; } Property Value Type Description System.Decimal Expiration. | Improve this Doc View Source HttpOnly Gets or sets if it's HTTP only. Declaration public bool HttpOnly { get; set; } Property Value Type Description System.Boolean Whether it's http only or not. | Improve this Doc View Source Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String The name. | Improve this Doc View Source Path Gets or sets the path. Declaration public string Path { get; set; } Property Value Type Description System.String The path. | Improve this Doc View Source SameSite Gets or sets the cookies SameSite value. Declaration public SameSite SameSite { get; set; } Property Value Type Description SameSite | Improve this Doc View Source Secure Gets or sets if it's secure. Declaration public bool Secure { get; set; } Property Value Type Description System.Boolean Whether it's secure or not. | Improve this Doc View Source Session Gets or sets if it's session only. Declaration public bool Session { get; set; } Property Value Type Description System.Boolean Whether it's session only or not. | Improve this Doc View Source Value Gets or sets the value. Declaration public string Value { get; set; } Property Value Type Description System.String The value. Methods | Improve this Doc View Source Equals(NetworkCookie) Declaration public bool Equals(NetworkCookie other) Parameters Type Name Description NetworkCookie other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToSetNetworkCookieParam() Converts a NetworkCookie to a SetNetworkCookieParam . Declaration public SetNetworkCookieParam ToSetNetworkCookieParam() Returns Type Description SetNetworkCookieParam A SetNetworkCookieParam with the matching properties set. Operators | Improve this Doc View Source Implicit(NetworkCookie to SetNetworkCookieParam) Converts a NetworkCookie to a SetNetworkCookieParam . Declaration public static implicit operator SetNetworkCookieParam(NetworkCookie cookie) Parameters Type Name Description NetworkCookie cookie Cookie to convert. Returns Type Description SetNetworkCookieParam See Also GetCookiesAsync ( System.String [])"
  },
  "api/PlaywrightSharp.Payload.html": {
    "href": "api/PlaywrightSharp.Payload.html",
    "title": "Class Payload | Playwright Sharp",
    "keywords": "Class Payload Payload information. Inheritance System.Object Payload Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Payload : object Properties | Improve this Doc View Source Headers Gets or sets the HTTP headers. Declaration public IDictionary<string, string> Headers { get; set; } Property Value Type Description IDictionary < System.String , System.String > | Improve this Doc View Source Method Gets or sets the HTTP method. Declaration public HttpMethod Method { get; set; } Property Value Type Description HttpMethod | Improve this Doc View Source PostData Gets or sets the post data. Declaration public string PostData { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Gets or sets the URL. Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.KeyDefinitions.html": {
    "href": "api/PlaywrightSharp.KeyDefinitions.html",
    "title": "Class KeyDefinitions | Playwright Sharp",
    "keywords": "Class KeyDefinitions Utility class for getting KeyDefinition . Inheritance System.Object KeyDefinitions Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public static class KeyDefinitions : object Methods | Improve this Doc View Source ContainsKey(String) Checks whether a KeyDefinition exists for the givin key. Declaration public static bool ContainsKey(string key) Parameters Type Name Description System.String key The key. Returns Type Description System.Boolean A value indicating if the key exists or not. | Improve this Doc View Source Get(String) Gets the KeyDefinition for the givin key. Declaration public static KeyDefinition Get(string key) Parameters Type Name Description System.String key The key. Returns Type Description KeyDefinition The KeyDefinition of the specified key."
  },
  "api/PlaywrightSharp.Polling.html": {
    "href": "api/PlaywrightSharp.Polling.html",
    "title": "Enum Polling | Playwright Sharp",
    "keywords": "Enum Polling An interval at which the pageFunction is executed. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum Polling : int Fields Name Description Raf To constantly execute pageFunction in requestAnimationFrame callback. This is the tightest polling mode which is suitable to observe styling changes."
  },
  "api/PlaywrightSharp.DeviceDescriptor.html": {
    "href": "api/PlaywrightSharp.DeviceDescriptor.html",
    "title": "Class DeviceDescriptor | Playwright Sharp",
    "keywords": "Class DeviceDescriptor Device descriptor. Inheritance System.Object DeviceDescriptor Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class DeviceDescriptor : object Properties | Improve this Doc View Source DeviceScaleFactor Device scale factor. Declaration public decimal DeviceScaleFactor { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source HasTouch Has touch. Declaration public bool HasTouch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMobile Is mobile. Declaration public bool IsMobile { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Device name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserAgent User Agent. Declaration public string UserAgent { get; set; } Property Value Type Description System.String | Improve this Doc View Source Viewport Viewport. Declaration public ViewportSize Viewport { get; set; } Property Value Type Description ViewportSize Methods | Improve this Doc View Source ToBrowserContextOptions() Converts the BrowserContextOptions to BrowserContextOptions . Declaration public BrowserContextOptions ToBrowserContextOptions() Returns Type Description BrowserContextOptions A BrowserContextOptions with the same information as the DeviceDescriptor . Operators | Improve this Doc View Source Implicit(DeviceDescriptor to BrowserContextOptions) Converts the DeviceDescriptor to BrowserContextOptions . Declaration public static implicit operator BrowserContextOptions(DeviceDescriptor descriptor) Parameters Type Name Description DeviceDescriptor descriptor Descriptor to convert. Returns Type Description BrowserContextOptions"
  },
  "api/PlaywrightSharp.Chromium.ChromiumBrowserType.html": {
    "href": "api/PlaywrightSharp.Chromium.ChromiumBrowserType.html",
    "title": "Class ChromiumBrowserType | Playwright Sharp",
    "keywords": "Class ChromiumBrowserType Inheritance System.Object ChannelOwnerBase BrowserType ChromiumBrowserType Implements IChromiumBrowserType IBrowserType Inherited Members BrowserType.Chromium BrowserType.Firefox BrowserType.Webkit BrowserType.ExecutablePath BrowserType.Name Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public class ChromiumBrowserType : BrowserType, IChannelOwner<BrowserType>, IChannelOwner, IChromiumBrowserType, IBrowserType Methods | Improve this Doc View Source LaunchAsync(LaunchOptions) Declaration public Task<IChromiumBrowser> LaunchAsync(LaunchOptions options) Parameters Type Name Description LaunchOptions options Returns Type Description Task < IChromiumBrowser > | Improve this Doc View Source LaunchAsync(Nullable<Boolean>, String[], String, Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration public Task<IChromiumBrowser> LaunchAsync(bool? headless, string[] args, string userDataDir, bool? devtools, string executablePath, string downloadsPath, bool? ignoreHTTPSErrors, int? timeout, bool? dumpIO, int? slowMo, bool? ignoreDefaultArgs, string[] ignoredDefaultArgs, Dictionary<string, string> env, Dictionary<string, object> firefoxUserPrefs, ProxySettings proxy, bool? chromiumSandbox, bool? handleSIGINT, bool? handleSIGTERM, bool? handleSIGHUP) Parameters Type Name Description System.Nullable < System.Boolean > headless System.String [] args System.String userDataDir System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowser > | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchOptions) Declaration public Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchOptions options) Parameters Type Name Description System.String userDataDir LaunchOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchPersistentOptions) Declaration public Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchPersistentOptions options) Parameters Type Name Description System.String userDataDir LaunchPersistentOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, ViewportSize, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration public Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, ViewportSize viewport, bool? headless, string[] args, bool? devtools, string executablePath, string downloadsPath, bool? ignoreHTTPSErrors, int? timeout, bool? dumpIO, int? slowMo, bool? ignoreDefaultArgs, string[] ignoredDefaultArgs, Dictionary<string, string> env, Dictionary<string, object> firefoxUserPrefs, ProxySettings proxy, string userAgent, bool? bypassCSP, bool? javaScriptEnabled, string timezoneId, Geolocation geolocation, ContextPermission[] permissions, bool? isMobile, bool? offline, decimal? deviceScaleFactor, Credentials httpCredentials, bool? hasTouch, bool? acceptDownloads, ColorScheme? colorScheme, string locale, Dictionary<string, string> extraHttpHeaders, bool? chromiumSandbox, bool? handleSIGINT, bool? handleSIGTERM, bool? handleSIGHUP) Parameters Type Name Description System.String userDataDir ViewportSize viewport System.Nullable < System.Boolean > headless System.String [] args System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration public Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, bool? headless, string[] args, bool? devtools, string executablePath, string downloadsPath, bool? ignoreHTTPSErrors, int? timeout, bool? dumpIO, int? slowMo, bool? ignoreDefaultArgs, string[] ignoredDefaultArgs, Dictionary<string, string> env, Dictionary<string, object> firefoxUserPrefs, ProxySettings proxy, string userAgent, bool? bypassCSP, bool? javaScriptEnabled, string timezoneId, Geolocation geolocation, ContextPermission[] permissions, bool? isMobile, bool? offline, decimal? deviceScaleFactor, Credentials httpCredentials, bool? hasTouch, bool? acceptDownloads, ColorScheme? colorScheme, string locale, Dictionary<string, string> extraHttpHeaders, bool? chromiumSandbox, bool? handleSIGINT, bool? handleSIGTERM, bool? handleSIGHUP) Parameters Type Name Description System.String userDataDir System.Nullable < System.Boolean > headless System.String [] args System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowserContext > Implements IChromiumBrowserType IBrowserType"
  },
  "api/PlaywrightSharp.BrowserContext.html": {
    "href": "api/PlaywrightSharp.BrowserContext.html",
    "title": "Class BrowserContext | Playwright Sharp",
    "keywords": "Class BrowserContext Inheritance System.Object ChannelOwnerBase BrowserContext ChromiumBrowserContext Implements IBrowserContext IAsyncDisposable Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class BrowserContext : ChannelOwnerBase, IChannelOwner<BrowserContext>, IChannelOwner, IBrowserContext, IAsyncDisposable Properties | Improve this Doc View Source DefaultNavigationTimeout Maximum navigation time in milliseconds. Declaration public int DefaultNavigationTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DefaultTimeout This setting will change the default maximum time for all the methods accepting timeout option. Declaration public int DefaultTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Pages An array of all pages inside the browser context. Declaration public IPage[] Pages { get; } Property Value Type Description IPage [] Methods | Improve this Doc View Source AddCookiesAsync(IEnumerable<SetNetworkCookieParam>) Clears all of the current cookies and then sets the cookies for the context. Declaration public Task AddCookiesAsync(IEnumerable<SetNetworkCookieParam> cookies) Parameters Type Name Description IEnumerable < SetNetworkCookieParam > cookies Cookies to set. Returns Type Description Task A that completes when the cookies are set. | Improve this Doc View Source AddCookiesAsync(SetNetworkCookieParam[]) Clears all of the current cookies and then sets the cookies for the context. Declaration public Task AddCookiesAsync(params SetNetworkCookieParam[] cookies) Parameters Type Name Description SetNetworkCookieParam [] cookies Cookies to set. Returns Type Description Task A that completes when the cookies are set. | Improve this Doc View Source AddInitScriptAsync(String, Object[], String, String) Adds a script which would be evaluated in one of the following scenarios: Whenever a page is created in the browser context or is navigated. Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame. Declaration public Task AddInitScriptAsync(string script = null, object[] arg = null, string path = null, string content = null) Parameters Type Name Description System.String script Script to be evaluated in all pages in the browser context or script path. System.Object [] arg Optional argument to pass to script . System.String path Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to . System.String content Gets or sets the raw JavaScript content to be injected into frame. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source ClearCookiesAsync() Clears the context's cookies. Declaration public Task ClearCookiesAsync() Returns Type Description Task A that completes when the cookies are cleared. | Improve this Doc View Source ClearPermissionsAsync() Clears all permission overrides for the browser context. Declaration public Task ClearPermissionsAsync() Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source CloseAsync() Closes the browser context. All the targets that belong to the browser context will be closed. Declaration public Task CloseAsync() Returns Type Description Task A that completes when the browser context is closed. Remarks NOTE only incognito browser contexts can be closed. | Improve this Doc View Source DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source ExposeBindingAsync(String, Action<BindingSource>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves when playwrightBinding completes. Declaration public Task ExposeBindingAsync(string name, Action<BindingSource> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource > playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T>(String, Action<BindingSource, T>) Declaration public Task ExposeBindingAsync<T>(string name, Action<BindingSource, T> playwrightBinding) Parameters Type Name Description System.String name Action < BindingSource , T> playwrightBinding Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) Declaration public Task ExposeBindingAsync<TResult>(string name, Func<BindingSource, TResult> playwrightBinding) Parameters Type Name Description System.String name Func < BindingSource , TResult> playwrightBinding Returns Type Description Task Type Parameters Name Description TResult | Improve this Doc View Source ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) Declaration public Task ExposeBindingAsync<T, TResult>(string name, Func<BindingSource, T, TResult> playwrightBinding) Parameters Type Name Description System.String name Func < BindingSource , T, TResult> playwrightBinding Returns Type Description Task Type Parameters Name Description T TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, TResult>(string name, Func<BindingSource, T1, T2, TResult> playwrightBinding) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, TResult> playwrightBinding Returns Type Description Task Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, T3, TResult>(string name, Func<BindingSource, T1, T2, T3, TResult> playwrightBinding) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, T3, TResult> playwrightBinding Returns Type Description Task Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, T3, T4, TResult>(string name, Func<BindingSource, T1, T2, T3, T4, TResult> playwrightBinding) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, T3, T4, TResult> playwrightBinding Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source ExposeFunctionAsync(String, Action) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration public Task ExposeFunctionAsync(string name, Action playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T>(String, Action<T>) Declaration public Task ExposeFunctionAsync<T>(string name, Action<T> playwrightFunction) Parameters Type Name Description System.String name Action <T> playwrightFunction Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ExposeFunctionAsync<TResult>(String, Func<TResult>) Declaration public Task ExposeFunctionAsync<TResult>(string name, Func<TResult> playwrightFunction) Parameters Type Name Description System.String name Func <TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description TResult | Improve this Doc View Source ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) Declaration public Task ExposeFunctionAsync<T, TResult>(string name, Func<T, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, TResult>(string name, Func<T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, T3, TResult>(string name, Func<T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, T3, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, T3, T4, TResult>(string name, Func<T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, T3, T4, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source GetCookiesAsync(String[]) Returns the context's cookies. Declaration public Task<IEnumerable<NetworkCookie>> GetCookiesAsync(params string[] urls) Parameters Type Name Description System.String [] urls Url's to return cookies for. Returns Type Description Task < IEnumerable < NetworkCookie >> A that completes when the cookies are sent by the browser, yielding a . Remarks If no URLs are specified, this method returns cookies for the current page URL. If URLs are specified, only cookies for those URLs are returned. | Improve this Doc View Source GrantPermissionsAsync(ContextPermission, String) Grants permissions to an URL. Declaration public Task GrantPermissionsAsync(ContextPermission permission, string origin = null) Parameters Type Name Description ContextPermission permission Permission to grant. System.String origin The origin to grant permissions to, e.g. \"https://example.com\". Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source GrantPermissionsAsync(ContextPermission[], String) Grants permissions to an URL. Declaration public Task GrantPermissionsAsync(ContextPermission[] permissions, string origin = null) Parameters Type Name Description ContextPermission [] permissions An array of permissions to grant. System.String origin The origin to grant permissions to, e.g. \"https://example.com\". Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source NewPageAsync(String) Creates a new page in the browser context and optionally navigates it to the specified URL. Declaration public Task<IPage> NewPageAsync(string url = null) Parameters Type Name Description System.String url URL to navigate after the page is created. Returns Type Description Task < IPage > A that completes when a new IPage is created, yielding the new IPage . | Improve this Doc View Source RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(Func<string, bool> url, Action<Route, IRequest> handler) Parameters Type Name Description Func < System.String , System.Boolean > url A fucntion that evaluate the URL match. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(Regex, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(Regex url, Action<Route, IRequest> handler) Parameters Type Name Description Regex url A regex to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(String, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by any page in the browser context. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(string url, Action<Route, IRequest> handler) Parameters Type Name Description System.String url A glob pattern to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source SetExtraHttpHeadersAsync(Dictionary<String, String>) Sets extra HTTP headers that will be sent with every request in every page in the context. Declaration public Task SetExtraHttpHeadersAsync(Dictionary<string, string> headers) Parameters Type Name Description Dictionary < System.String , System.String > headers Additional http headers to be sent with every request. Returns Type Description Task A that completes when the headers are set. | Improve this Doc View Source SetGeolocationAsync(Geolocation) Sets the page's geolocation. Declaration public Task SetGeolocationAsync(Geolocation geolocation) Parameters Type Name Description Geolocation geolocation Geolocation. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source SetGeolocationAsync(Decimal, Decimal, Decimal) Sets the page's geolocation. Declaration public Task SetGeolocationAsync(decimal latitude, decimal longitude, decimal accuracy = null) Parameters Type Name Description System.Decimal latitude Latitude between -90 and 90. System.Decimal longitude Longitude between -180 and 180. System.Decimal accuracy Optional non-negative accuracy value. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source SetHttpCredentialsAsync(Credentials) Provide credentials for http authentication https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication . Declaration public Task SetHttpCredentialsAsync(Credentials httpCredentials) Parameters Type Name Description Credentials httpCredentials The credentials. Returns Type Description Task A that completes when the credentials are set. Remarks To disable authentication, pass null . | Improve this Doc View Source SetOfflineAsync(Boolean) Set offline mode for the context. Declaration public Task SetOfflineAsync(bool offline) Parameters Type Name Description System.Boolean offline When true enables offline mode for the page. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(Func<string, bool> url, Action<Route, IRequest> handler = null) Parameters Type Name Description Func < System.String , System.Boolean > url A function used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(Regex, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(Regex url, Action<Route, IRequest> handler = null) Parameters Type Name Description Regex url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(String, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(string url, Action<Route, IRequest> handler = null) Parameters Type Name Description System.String url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) Declaration public Task<T> WaitForEvent<T>(PlaywrightEvent<T> e, Func<T, bool> predicate = null, int? timeout = null) where T : EventArgs Parameters Type Name Description PlaywrightEvent <T> e Func <T, System.Boolean > predicate System.Nullable < System.Int32 > timeout Returns Type Description Task <T> Type Parameters Name Description T Events | Improve this Doc View Source Close Raised when Browser context gets closed. Declaration public event EventHandler<EventArgs> Close Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Page Raised when a new page is created in the Browser context. Declaration public event EventHandler<PageEventArgs> Page Event Type Type Description EventHandler < PageEventArgs > Implements IBrowserContext IAsyncDisposable"
  },
  "api/PlaywrightSharp.Chromium.CDPEventArgs.html": {
    "href": "api/PlaywrightSharp.Chromium.CDPEventArgs.html",
    "title": "Class CDPEventArgs | Playwright Sharp",
    "keywords": "Class CDPEventArgs See MessageReceived . Inheritance System.Object CDPEventArgs Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public class CDPEventArgs : object Properties | Improve this Doc View Source Method Method name. Declaration public string Method { get; set; } Property Value Type Description System.String | Improve this Doc View Source Params Message arguments. Declaration public JsonElement? Params { get; set; } Property Value Type Description System.Nullable < JsonElement >"
  },
  "api/PlaywrightSharp.ResourceType.html": {
    "href": "api/PlaywrightSharp.ResourceType.html",
    "title": "Enum ResourceType | Playwright Sharp",
    "keywords": "Enum ResourceType Resource type. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum ResourceType : int Fields Name Description CSPViolationReport CSPViolationReport. Document Document. EventSource Event source. Fetch Fetch. Font Font. Image Image. Manifest Manifest. Media Media. Other Other. Ping Ping. Script Script. SignedExchange SignedExchange. StyleSheet Stylesheet. TextTrack Texttrack. Unknown Unknown. WebSocket Web Socket. Xhr XHR. See Also ResourceType"
  },
  "api/PlaywrightSharp.WaitForState.html": {
    "href": "api/PlaywrightSharp.WaitForState.html",
    "title": "Enum WaitForState | Playwright Sharp",
    "keywords": "Enum WaitForState Wait for options for WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) and WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum WaitForState : int Fields Name Description Attached Attached. Detached Detached. Hidden Wait for hidden. Visible Wait for visible."
  },
  "api/PlaywrightSharp.TargetClosedException.html": {
    "href": "api/PlaywrightSharp.TargetClosedException.html",
    "title": "Class TargetClosedException | Playwright Sharp",
    "keywords": "Class TargetClosedException Exception thrown by a connection when it detects that the target was closed. Inheritance System.Object PlaywrightSharpException TargetClosedException Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class TargetClosedException : PlaywrightSharpException Constructors | Improve this Doc View Source TargetClosedException() Declaration public TargetClosedException() | Improve this Doc View Source TargetClosedException(String) Declaration public TargetClosedException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source TargetClosedException(String, Exception) Declaration public TargetClosedException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException | Improve this Doc View Source TargetClosedException(String, String) Initializes a new instance of the TargetClosedException class. Declaration public TargetClosedException(string message, string closeReason) Parameters Type Name Description System.String message Message. System.String closeReason Close reason. Properties | Improve this Doc View Source CloseReason Close Reason. Declaration public string CloseReason { get; } Property Value Type Description System.String The close reason."
  },
  "api/PlaywrightSharp.IResponse.html": {
    "href": "api/PlaywrightSharp.IResponse.html",
    "title": "Interface IResponse | Playwright Sharp",
    "keywords": "Interface IResponse Represents responses which are received by page. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IResponse Properties | Improve this Doc View Source Frame An IFrame that initiated this response, or null if navigating to error pages. Declaration IFrame Frame { get; } Property Value Type Description IFrame | Improve this Doc View Source Headers An object with HTTP headers associated with the response. All header names are lower-case. Declaration IDictionary<string, string> Headers { get; } Property Value Type Description IDictionary < System.String , System.String > | Improve this Doc View Source Ok Whether the response was successful (status in the range 200-299) or not. Declaration bool Ok { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Request A matching IRequest object. Declaration IRequest Request { get; } Property Value Type Description IRequest | Improve this Doc View Source Status Status code of the response. Declaration HttpStatusCode Status { get; } Property Value Type Description HttpStatusCode | Improve this Doc View Source StatusText Contains the status text of the response (e.g. usually an \"OK\" for a success). Declaration string StatusText { get; } Property Value Type Description System.String | Improve this Doc View Source Url The URL of the response. Declaration string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FinishedAsync() Waits for this response to finish, returns failure error if request failed. Declaration Task FinishedAsync() Returns Type Description Task A that completes when the response finished. | Improve this Doc View Source GetBodyAsync() Returns a which resolves to a buffer with response body. Declaration Task<byte[]> GetBodyAsync() Returns Type Description Task < System.Byte []> A that completes when the response is returned by the server, yielding a array. | Improve this Doc View Source GetJsonAsync(JsonDocumentOptions) Returns a which resolves to a representation of response body. Declaration Task<JsonDocument> GetJsonAsync(JsonDocumentOptions options = null) Parameters Type Name Description JsonDocumentOptions options Parser options. Returns Type Description Task < JsonDocument > A that completes when the json body is parsed, yielding a representation of response body. | Improve this Doc View Source GetJsonAsync<T>(JsonSerializerOptions) Returns a which resolves to a T representation of response body. Declaration Task<T> GetJsonAsync<T>(JsonSerializerOptions options = null) Parameters Type Name Description JsonSerializerOptions options Parser options. Returns Type Description Task <T> A that completes when the json body is parsed, yielding a T representation of response body. Type Parameters Name Description T Return type. | Improve this Doc View Source GetTextAsync() A text representation of response body. Declaration Task<string> GetTextAsync() Returns Type Description Task < System.String > A that completes when the text was processed, yielding to a text representation of response body."
  },
  "api/PlaywrightSharp.IMouse.html": {
    "href": "api/PlaywrightSharp.IMouse.html",
    "title": "Interface IMouse | Playwright Sharp",
    "keywords": "Interface IMouse Provides methods to interact with the mouse. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IMouse Methods | Improve this Doc View Source ClickAsync(Decimal, Decimal, Int32, MouseButton, Int32) Shortcut for MoveAsync(Decimal, Decimal, Nullable<Int32>) , DownAsync(MouseButton, Int32) and UpAsync(MouseButton, Int32) . Declaration Task ClickAsync(decimal x, decimal y, int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1) Parameters Type Name Description System.Decimal x X coordinate. System.Decimal y Y coordinate. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source DblClickAsync(Decimal, Decimal, Int32, MouseButton) Shortcut for MoveAsync(Decimal, Decimal, Nullable<Int32>) , DownAsync(MouseButton, Int32) , UpAsync(MouseButton, Int32) , DownAsync(MouseButton, Int32) and UpAsync(MouseButton, Int32) . Declaration Task DblClickAsync(decimal x, decimal y, int delay = 0, MouseButton button = MouseButton.Left) Parameters Type Name Description System.Decimal x X coordinate. System.Decimal y Y coordinate. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source DownAsync(MouseButton, Int32) Dispatches a mousedown event. Declaration Task DownAsync(MouseButton button = MouseButton.Left, int clickCount = 1) Parameters Type Name Description MouseButton button The button to use for the click. Defaults to Left . System.Int32 clickCount Click count. Defaults to 1. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source MoveAsync(Decimal, Decimal, Nullable<Int32>) Dispatches a mousemove event. Declaration Task MoveAsync(decimal x, decimal y, int? steps) Parameters Type Name Description System.Decimal x X coordinate. System.Decimal y Y coordinate. System.Nullable < System.Int32 > steps Sends intermediate mousemove events. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source UpAsync(MouseButton, Int32) Dispatches a mouseup event. Declaration Task UpAsync(MouseButton button = MouseButton.Left, int clickCount = 1) Parameters Type Name Description MouseButton button The button to use for the click. Defaults to Left . System.Int32 clickCount Click count. Defaults to 1. Returns Type Description Task A that completes when the message is confirmed by the browser."
  },
  "api/PlaywrightSharp.Helpers.StringExtensions.html": {
    "href": "api/PlaywrightSharp.Helpers.StringExtensions.html",
    "title": "Class StringExtensions | Playwright Sharp",
    "keywords": "Class StringExtensions String extensions. Inheritance System.Object StringExtensions Namespace : PlaywrightSharp.Helpers Assembly : PlaywrightSharp.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source GlobToRegex(String) Converts an url glob expression to a regex. Declaration public static Regex GlobToRegex(this string glob) Parameters Type Name Description System.String glob Input url. Returns Type Description Regex A Regex with the glob expression. | Improve this Doc View Source IsJavascriptFunction(String) Determine if the script is a javascript function and not an expression. Declaration public static bool IsJavascriptFunction(this string script) Parameters Type Name Description System.String script Script to evaluate. Returns Type Description System.Boolean Whether the script is a function or not. | Improve this Doc View Source ParseQueryString(String) Parse the query string. Declaration public static Dictionary<string, string> ParseQueryString(this string query) Parameters Type Name Description System.String query Query string. Returns Type Description Dictionary < System.String , System.String > A containing the parsed QueryString. | Improve this Doc View Source Quote(String) Quotes the specified . Declaration public static string Quote(this string value) Parameters Type Name Description System.String value The string to quote. Returns Type Description System.String A quoted string. | Improve this Doc View Source UnQuote(String) Unquote the specified . Declaration public static string UnQuote(this string value) Parameters Type Name Description System.String value The string to unquote. Returns Type Description System.String An unquoted string."
  },
  "api/PlaywrightSharp.IFrame.html": {
    "href": "api/PlaywrightSharp.IFrame.html",
    "title": "Interface IFrame | Playwright Sharp",
    "keywords": "Interface IFrame At every point of time, page exposes its current frame tree via the MainFrame and ChildFrames methods. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IFrame Examples var frame = page.Frames.FirstOrDefault(frame => frame.Name == \"myframe\"); var text = await frame.QuerySelectorEvalAsync(\".selector\", \"element => element.textContent\"); Console.WriteLine(text); Properties | Improve this Doc View Source ChildFrames Child frames of the this frame. Declaration IFrame[] ChildFrames { get; } Property Value Type Description IFrame [] | Improve this Doc View Source IsDetached Gets a value indicating if the frame is detached or not. Declaration bool IsDetached { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the frame's name attribute as specified in the tag. If the name is empty, returns the id attribute instead. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Page Owner page. Declaration IPage Page { get; } Property Value Type Description IPage | Improve this Doc View Source ParentFrame Gets the parent IFrame , if any. Detached frames and main frames return null . Declaration IFrame ParentFrame { get; } Property Value Type Description IFrame | Improve this Doc View Source Url Gets the frame's url. Declaration string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddScriptTagAsync(String, String, String, String) Adds a <script> tag into the frame with the desired url or content. Declaration Task<IElementHandle> AddScriptTagAsync(string url = null, string path = null, string content = null, string type = null) Parameters Type Name Description System.String url URL of a script to be added. System.String path Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw JavaScript content to be injected into frame. System.String type Script type. Use 'module' in order to load a Javascript ES6 module. Returns Type Description Task < IElementHandle > A that completes when the tag is added, yielding the added tag as an IElementHandle when the script's onload fires or when the script content was injected into frame. Remarks Shortcut for page.MainFrame.AddScriptTagAsync(options) . | Improve this Doc View Source AddStyleTagAsync(String, String, String) Adds a <link rel=\"stylesheet\"> tag into the frame with the desired url or a <link rel=\"stylesheet\"> tag with the content. Declaration Task<IElementHandle> AddStyleTagAsync(string url = null, string path = null, string content = null) Parameters Type Name Description System.String url URL of the link tag. System.String path Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw CSS content to be injected into frame. Returns Type Description Task < IElementHandle > A that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added IElementHandle . | Improve this Doc View Source CheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task CheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to click in the center of the element. Declaration Task ClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully clicked. | Improve this Doc View Source DblClickAsync(String, Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to double click in the center of the element. Declaration Task DblClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration Task DispatchEventAsync(string selector, string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used. System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration Task EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration Task EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction. Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query frame for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync(String) Executes a script in the frame context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String ) | Improve this Doc View Source EvaluateAsync(String, Object) Executes a script in the frame context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String) Executes a script in the frame context. Declaration Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a script in the frame context. Declaration Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateHandleAsync(String) Executes a function that returns a IJSHandle . Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Function to be evaluated in the frame context. Returns Type Description Task < IJSHandle > A that completes when the script finishes or the promise is resolved, yielding the result of the script as a IJSHandle . Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a function that returns a IJSHandle . Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Function to be evaluated in the frame context. System.Object arg Arguments to pass to script. Returns Type Description Task < IJSHandle > A that completes when the script finishes or the promise is resolved, yielding the result of the script as a IJSHandle . Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source FillAsync(String, String, Nullable<Int32>, Nullable<Boolean>) This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error. Declaration Task FillAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to fill for the <input>, <textarea> or [contenteditable] element System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync(String, Nullable<Int32>) Fetches an element with selector and focuses it. Declaration Task FocusAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the the element matching selector is successfully focused. | Improve this Doc View Source GetAttributeAsync(String, String, Nullable<Int32>) Returns element attribute value. Declaration Task<string> GetAttributeAsync(string selector, string name, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetContentAsync() Gets the full HTML contents of the page, including the doctype. Declaration Task<string> GetContentAsync() Returns Type Description Task < System.String > A that completes when the html content is retrieved, yielding the HTML content. | Improve this Doc View Source GetFrameElementAsync() This is an inverse of GetContentFrameAsync() . Note that returned handle actually belongs to the parent frame. This method throws an error if the frame has been detached before frameElement() returns. Declaration Task<IElementHandle> GetFrameElementAsync() Returns Type Description Task < IElementHandle > A that completes when the element is resolved, yielding the corresponding IElementHandle . | Improve this Doc View Source GetInnerHtmlAsync(String, Nullable<Int32>) Resolves to the element.innerHTML. Declaration Task<string> GetInnerHtmlAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(String, Nullable<Int32>) Resolves to the element.innerText. Declaration Task<string> GetInnerTextAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetTextContentAsync(String, Nullable<Int32>) Resolves to the element.textContent. Declaration Task<string> GetTextContentAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source GetTitleAsync() Returns page's title. Declaration Task<string> GetTitleAsync() Returns Type Description Task < System.String > A that completes when the action completed, yielding the frame's title. See Also GetTitleAsync () | Improve this Doc View Source GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) Navigates to an URL. Declaration Task<IResponse> GoToAsync(string url, LifecycleEvent? waitUntil = null, string referer = null, int? timeout = null) Parameters Type Name Description System.String url URL to navigate page to. The url should include scheme, e.g. https://. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.String referer Referer header value. If provided it will take prefrence over the referer header value set by . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > A that completes with resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. Remarks GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will throw an error if: There's an SSL error (e.g. in case of self-signed certificates). Target URL is invalid. The timeout is exceeded during navigation. The remote server does not respond or is unreachable. The main resource failed to load. GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling response.status(). NOTE GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) either throws an error or returns a main resource response. The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null. NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue. Shortcut for GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) . | Improve this Doc View Source HoverAsync(String, Nullable<Point>, Modifier[], Boolean, Nullable<Int32>) Fetches an element with selector , scrolls it into view if needed, and then uses PlaywrightSharp.Mouse to hover over the center of the element. Declaration Task HoverAsync(string selector, Point? position = null, Modifier[] modifiers = null, bool force = false, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered. System.Nullable < Point > position A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Boolean force Whether to bypass the actionability checks. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element matching selector is successfully hovered. | Improve this Doc View Source PressAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task PressAsync(string selector, string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String key Name of the key to press or a character to generate, such as ArrowLeft or a`. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the page. Declaration Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) Queries frame for the selector. If there's no such element within the frame, the method will resolve to null . Declaration Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector Selector to query frame for. Returns Type Description Task < IElementHandle > A that completes when the selector is found (or failed), yielding the IElementHandle pointing to the frame element. See Also QuerySelectorAsync ( System.String ) | Improve this Doc View Source SelectOptionAsync(String, IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, IElementHandle value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params IElementHandle[] values) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, IElementHandle[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, SelectOption value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params SelectOption[] values) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, SelectOption[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration Task<string[]> SelectOptionAsync(string selector, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params string[] values) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SetContentAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) Sets the HTML markup to the frame. Declaration Task SetContentAsync(string html, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String html HTML markup to assign to the page. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the javascript code executing injected the HTML finishes. See Also SetContentAsync ( System.String , System.Nullable < LifecycleEvent >, System.Nullable < System.Int32 >) | Improve this Doc View Source SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, FilePayload file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload file The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, string file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String file The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source TypeAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task TypeAsync(string selector, string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String text A text to type into a focused element. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32) . Examples await page.TypeAsync(\"#mytextarea\", \"Hello\"); // Types instantly await page.TypeAsync(\"#mytextarea\", \"World\", new TypeOptions { Delay = 100 }); // Types slower, like a user | Improve this Doc View Source UncheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task UncheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source WaitForFunctionAsync(String, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForLoadStateAsync(LifecycleEvent, Nullable<Int32>) Completes when the page reaches a required load state, load by default. The navigation can be in progress when it is called. If navigation is already at a required state, completes immediately. Declaration Task WaitForLoadStateAsync(LifecycleEvent state = LifecycleEvent.Load, int? timeout = null) Parameters Type Name Description LifecycleEvent state When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the load is completed. | Improve this Doc View Source WaitForNavigationAsync(Func<String, Boolean>, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(Func<string, bool> url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Func < System.String , System.Boolean > url Wait for this specific URL that matches the function condition. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(Regex, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(Regex url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Regex url Wait for this specific URL Regex. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the frame navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(string url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String url Wait for this specific URL. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for. System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM. | Improve this Doc View Source WaitForTimeoutAsync(Int32) Returns a Task that resolves after the timeout. Declaration Task WaitForTimeoutAsync(int timeout) Parameters Type Name Description System.Int32 timeout A timeout to wait for. Returns Type Description Task A that completes when the timeout is hit."
  },
  "api/PlaywrightSharp.ChromiumCoverage.html": {
    "href": "api/PlaywrightSharp.ChromiumCoverage.html",
    "title": "Class ChromiumCoverage | Playwright Sharp",
    "keywords": "Class ChromiumCoverage Coverage gathers information about parts of JavaScript and CSS that were used by the page.. Inheritance System.Object ChromiumCoverage Implements ICoverage Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ChromiumCoverage : object, ICoverage Methods | Improve this Doc View Source StartCSSCoverageAsync(Boolean) Start the CSS coverage. Declaration public Task StartCSSCoverageAsync(bool resetOnNavigation = true) Parameters Type Name Description System.Boolean resetOnNavigation Whether to reset coverage on every navigation. Defaults to true. Returns Type Description Task A that resolves when the coverage started. | Improve this Doc View Source StartJSCoverageAsync(Boolean, Boolean) Start the JS coverage. Declaration public Task StartJSCoverageAsync(bool resetOnNavigation = true, bool reportAnonymousScripts = false) Parameters Type Name Description System.Boolean resetOnNavigation Whether to reset coverage on every navigation. Defaults to true. System.Boolean reportAnonymousScripts Whether anonymous scripts generated by the page should be reported. Defaults to false. Returns Type Description Task A that resolves when the coverage started. | Improve this Doc View Source StopCSSCoverageAsync() Stop processing the CSS coverage. Declaration public Task<CSSCoverageEntry[]> StopCSSCoverageAsync() Returns Type Description Task < CSSCoverageEntry []> A that resolves to the coverage result. | Improve this Doc View Source StopJSCoverageAsync() Stop processing the JS coverage. Declaration public Task<JSCoverageEntry[]> StopJSCoverageAsync() Returns Type Description Task < JSCoverageEntry []> A that resolves to the coverage result. Implements ICoverage"
  },
  "api/PlaywrightSharp.LaunchOptions.html": {
    "href": "api/PlaywrightSharp.LaunchOptions.html",
    "title": "Class LaunchOptions | Playwright Sharp",
    "keywords": "Class LaunchOptions Options for LaunchAsync(LaunchOptions) . Inheritance System.Object LaunchOptions LaunchPersistentOptions Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class LaunchOptions : object Properties | Improve this Doc View Source Args Additional arguments to pass to the browser instance. Declaration public string[] Args { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source ChromiumSandbox Enable Chromium sandboxing. Defaults to true. Declaration public bool? ChromiumSandbox { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. Declaration public bool? Devtools { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source DownloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. Declaration public string DownloadsPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source DumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. Declaration public bool? DumpIO { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Env Specify environment variables that will be visible to browser. Defaults to Environment variables. Declaration public Dictionary<string, string> Env { get; set; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source ExecutablePath Path to a browser executable to run instead of the bundled one. Declaration public string ExecutablePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source FirefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. Declaration public Dictionary<string, object> FirefoxUserPrefs { get; set; } Property Value Type Description Dictionary < System.String , System.Object > | Improve this Doc View Source HandleSIGHUP Close the browser process on SIGHUP. Defaults to true. Declaration public bool? HandleSIGHUP { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source HandleSIGINT Close the browser process on Ctrl-C. Defaults to true. Declaration public bool? HandleSIGINT { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source HandleSIGTERM Close the browser process on SIGTERM. Defaults to true. Declaration public bool? HandleSIGTERM { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. Declaration public bool? Headless { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IgnoredDefaultArgs if IgnoreDefaultArgs is set to false this list will be used to filter default arguments. Declaration public string[] IgnoredDefaultArgs { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source IgnoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. Declaration public bool? IgnoreDefaultArgs { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IgnoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. Declaration public bool? IgnoreHTTPSErrors { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Proxy Network proxy settings. Declaration public ProxySettings Proxy { get; set; } Property Value Type Description ProxySettings | Improve this Doc View Source SlowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. Declaration public int? SlowMo { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Timeout Maximum time in milliseconds to wait for the browser instance to start. Declaration public int? Timeout { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source UserDataDir Path to a User Data Directory. Declaration public string UserDataDir { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToPersistentOptions() Converts the LaunchOptions to LaunchPersistentOptions . Declaration public LaunchPersistentOptions ToPersistentOptions() Returns Type Description LaunchPersistentOptions The object converted to LaunchPersistentOptions ."
  },
  "api/PlaywrightSharp.Request.html": {
    "href": "api/PlaywrightSharp.Request.html",
    "title": "Class Request | Playwright Sharp",
    "keywords": "Class Request Inheritance System.Object ChannelOwnerBase Request Implements IRequest Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Request : ChannelOwnerBase, IChannelOwner<Request>, IChannelOwner, IRequest Properties | Improve this Doc View Source Failure Gets or sets the failure. Declaration public string Failure { get; } Property Value Type Description System.String | Improve this Doc View Source Frame An IFrame that initiated this request, or null if navigating to error pages. Declaration public IFrame Frame { get; } Property Value Type Description IFrame | Improve this Doc View Source Headers Gets or sets the HTTP headers. Declaration public Dictionary<string, string> Headers { get; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source IsNavigationRequest Gets whether this request is driving frame's navigation. Declaration public bool IsNavigationRequest { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Method Gets or sets the HTTP method. Declaration public HttpMethod Method { get; } Property Value Type Description HttpMethod | Improve this Doc View Source PostData Post data as string. Declaration public string PostData { get; } Property Value Type Description System.String | Improve this Doc View Source PostDataBuffer Post data as a byte[]. Declaration public byte[] PostDataBuffer { get; } Property Value Type Description System.Byte [] | Improve this Doc View Source RedirectedFrom When the server responds with a redirect, Playwright creates a new IRequest object. The two requests are connected by RedirectedFrom and RedirectedTo methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling RedirectedFrom . Declaration public IRequest RedirectedFrom { get; } Property Value Type Description IRequest | Improve this Doc View Source RedirectedTo When the server responds with a redirect, Playwright creates a new IRequest object. The two requests are connected by RedirectedFrom and RedirectedTo methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling RedirectedFrom .. Declaration public IRequest RedirectedTo { get; } Property Value Type Description IRequest | Improve this Doc View Source ResourceType Gets or sets the type of the resource. Declaration public ResourceType ResourceType { get; } Property Value Type Description ResourceType | Improve this Doc View Source Url URL of the request. Declaration public string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetPostDataJsonAsync(JsonDocumentOptions) Returns the parsed request's body for form-urlencoded and JSON as a fallback if any. Declaration public JsonDocument GetPostDataJsonAsync(JsonDocumentOptions options = null) Parameters Type Name Description JsonDocumentOptions options Parser options. Returns Type Description JsonDocument A that completes when the json body is parsed, yielding a representation of request body. | Improve this Doc View Source GetResponseAsync() Responsed attached to the request. Declaration public Task<IResponse> GetResponseAsync() Returns Type Description Task < IResponse > A that completes when the response is resolved. Implements IRequest"
  },
  "api/PlaywrightSharp.ContextPermission.html": {
    "href": "api/PlaywrightSharp.ContextPermission.html",
    "title": "Enum ContextPermission | Playwright Sharp",
    "keywords": "Enum ContextPermission Options for GrantPermissionsAsync(ContextPermission[], String) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum ContextPermission : int Fields Name Description Accelerometer Accelerometer. AccessibilityEvents Accessibility events. AmbientLightSensor Ambient Light Sensor. BackgroundSync Background sync. Camera Camera. ClipboardRead Clipboard read. ClipboardWrite Clipboard write. Geolocation Geolocation. Gyroscope Gyroscope. Magnetometer Magnetometer. Microphone Microphone. Midi MIDI. MidiSysex MIDI sysex. Notifications Notifications. PaymentHandler Payment handler. Push Push. Sensors Ambient light sensor, Accelerometer, Gyroscope, Magnetometer"
  },
  "api/PlaywrightSharp.SameSite.html": {
    "href": "api/PlaywrightSharp.SameSite.html",
    "title": "Enum SameSite | Playwright Sharp",
    "keywords": "Enum SameSite SameSite values in cookies. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum SameSite : int Fields Name Description Lax Lax None None Strict Strict"
  },
  "api/PlaywrightSharp.JSCoverageEntry.html": {
    "href": "api/PlaywrightSharp.JSCoverageEntry.html",
    "title": "Class JSCoverageEntry | Playwright Sharp",
    "keywords": "Class JSCoverageEntry JS Coverage report. See StopJSCoverageAsync() . Inheritance System.Object JSCoverageEntry Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class JSCoverageEntry : object Properties | Improve this Doc View Source Functions V8-specific coverage format. Declaration public JSCoverageFunction[] Functions { get; set; } Property Value Type Description JSCoverageFunction [] | Improve this Doc View Source Source Script Source. Declaration public string Source { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Script URL. Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.Input.html": {
    "href": "api/PlaywrightSharp.Input.html",
    "title": "Namespace PlaywrightSharp.Input | Playwright Sharp",
    "keywords": "Namespace PlaywrightSharp.Input Enums Modifier Modifiers for click actions. MouseButton The type of button click to use with or ."
  },
  "api/PlaywrightSharp.IWorker.html": {
    "href": "api/PlaywrightSharp.IWorker.html",
    "title": "Interface IWorker | Playwright Sharp",
    "keywords": "Interface IWorker The Worker class represents a WebWorker . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IWorker Properties | Improve this Doc View Source Url Gets the Worker URL. Declaration string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source EvaluateAsync(String) Executes a script in the frame context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync(String, Object) Executes a script in the frame context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String) Executes a script in the frame context. Declaration Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a script in the frame context. Declaration Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> Task that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateHandleAsync(String) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. Events | Improve this Doc View Source Close Raised when worker gets closed. Declaration event EventHandler<EventArgs> Close Event Type Type Description EventHandler < EventArgs >"
  },
  "api/PlaywrightSharp.FrameEventArgs.html": {
    "href": "api/PlaywrightSharp.FrameEventArgs.html",
    "title": "Class FrameEventArgs | Playwright Sharp",
    "keywords": "Class FrameEventArgs FrameAttached , FrameDetached and FrameNavigated arguments. Inheritance System.Object FrameEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class FrameEventArgs : EventArgs Constructors | Improve this Doc View Source FrameEventArgs(IFrame) Initializes a new instance of the FrameEventArgs class. Declaration public FrameEventArgs(IFrame frame) Parameters Type Name Description IFrame frame Frame. Properties | Improve this Doc View Source Frame Gets or sets the frame. Declaration public IFrame Frame { get; set; } Property Value Type Description IFrame The frame."
  },
  "api/PlaywrightSharp.DeviceDescriptorName.html": {
    "href": "api/PlaywrightSharp.DeviceDescriptorName.html",
    "title": "Class DeviceDescriptorName | Playwright Sharp",
    "keywords": "Class DeviceDescriptorName Device descriptor name. Inheritance System.Object DeviceDescriptorName Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public static class DeviceDescriptorName : object Fields | Improve this Doc View Source BlackberryPlayBook Blackberry PlayBook. Declaration public const string BlackberryPlayBook = null Field Value Type Description System.String | Improve this Doc View Source BlackberryPlayBookLandscape Blackberry PlayBook landscape. Declaration public const string BlackberryPlayBookLandscape = null Field Value Type Description System.String | Improve this Doc View Source BlackBerryZ30 BlackBerry Z30. Declaration public const string BlackBerryZ30 = null Field Value Type Description System.String | Improve this Doc View Source BlackBerryZ30Landscape BlackBerry Z30 landscape. Declaration public const string BlackBerryZ30Landscape = null Field Value Type Description System.String | Improve this Doc View Source GalaxyNote3 Galaxy Note 3. Declaration public const string GalaxyNote3 = null Field Value Type Description System.String | Improve this Doc View Source GalaxyNote3Landscape Galaxy Note 3 landscape. Declaration public const string GalaxyNote3Landscape = null Field Value Type Description System.String | Improve this Doc View Source GalaxyNoteII Galaxy Note II. Declaration public const string GalaxyNoteII = null Field Value Type Description System.String | Improve this Doc View Source GalaxyNoteIILandscape Galaxy Note II landscape. Declaration public const string GalaxyNoteIILandscape = null Field Value Type Description System.String | Improve this Doc View Source GalaxyS5 Galaxy S5. Declaration public const string GalaxyS5 = null Field Value Type Description System.String | Improve this Doc View Source GalaxyS5Landscape Galaxy S5 landscape. Declaration public const string GalaxyS5Landscape = null Field Value Type Description System.String | Improve this Doc View Source GalaxySIII Galaxy S III. Declaration public const string GalaxySIII = null Field Value Type Description System.String | Improve this Doc View Source GalaxySIIILandscape Galaxy S III landscape. Declaration public const string GalaxySIIILandscape = null Field Value Type Description System.String | Improve this Doc View Source IPad iPad. Declaration public const string IPad = null Field Value Type Description System.String | Improve this Doc View Source IPadLandscape iPad landscape. Declaration public const string IPadLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPadMini iPad Mini. Declaration public const string IPadMini = null Field Value Type Description System.String | Improve this Doc View Source IPadMiniLandscape iPad Mini landscape. Declaration public const string IPadMiniLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPadPro iPad Pro. Declaration public const string IPadPro = null Field Value Type Description System.String | Improve this Doc View Source IPadProLandscape iPad Pro landscape. Declaration public const string IPadProLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone4 iPhone 4. Declaration public const string IPhone4 = null Field Value Type Description System.String | Improve this Doc View Source IPhone4Landscape iPhone 4 landscape. Declaration public const string IPhone4Landscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone5 iPhone 5. Declaration public const string IPhone5 = null Field Value Type Description System.String | Improve this Doc View Source IPhone5Landscape iPhone 5 landscape. Declaration public const string IPhone5Landscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone6 iPhone 6. Declaration public const string IPhone6 = null Field Value Type Description System.String | Improve this Doc View Source IPhone6Landscape iPhone 6 landscape. Declaration public const string IPhone6Landscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone6Plus iPhone 6 Plus. Declaration public const string IPhone6Plus = null Field Value Type Description System.String | Improve this Doc View Source IPhone6PlusLandscape iPhone 6 Plus landscape. Declaration public const string IPhone6PlusLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone7 iPhone 7. Declaration public const string IPhone7 = null Field Value Type Description System.String | Improve this Doc View Source IPhone7Landscape iPhone 7 landscape. Declaration public const string IPhone7Landscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone7Plus iPhone 7 Plus. Declaration public const string IPhone7Plus = null Field Value Type Description System.String | Improve this Doc View Source IPhone7PlusLandscape iPhone 7 Plus landscape. Declaration public const string IPhone7PlusLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone8 iPhone 8. Declaration public const string IPhone8 = null Field Value Type Description System.String | Improve this Doc View Source IPhone8Landscape iPhone 8 landscape. Declaration public const string IPhone8Landscape = null Field Value Type Description System.String | Improve this Doc View Source IPhone8Plus iPhone 8 Plus. Declaration public const string IPhone8Plus = null Field Value Type Description System.String | Improve this Doc View Source IPhone8PlusLandscape iPhone 8 Plus landscape. Declaration public const string IPhone8PlusLandscape = null Field Value Type Description System.String | Improve this Doc View Source IPhoneSE iPhone SE. Declaration public const string IPhoneSE = null Field Value Type Description System.String | Improve this Doc View Source IPhoneSELandscape iPhone SE landscape. Declaration public const string IPhoneSELandscape = null Field Value Type Description System.String | Improve this Doc View Source IPhoneX iPhone X. Declaration public const string IPhoneX = null Field Value Type Description System.String | Improve this Doc View Source IPhoneXLandscape iPhone X landscape. Declaration public const string IPhoneXLandscape = null Field Value Type Description System.String | Improve this Doc View Source JioPhone2 JioPhone 2. Declaration public const string JioPhone2 = null Field Value Type Description System.String | Improve this Doc View Source JioPhone2Landscape JioPhone 2 landscape. Declaration public const string JioPhone2Landscape = null Field Value Type Description System.String | Improve this Doc View Source KindleFireHDX Kindle Fire HDX. Declaration public const string KindleFireHDX = null Field Value Type Description System.String | Improve this Doc View Source KindleFireHDXLandscape Kindle Fire HDX landscape. Declaration public const string KindleFireHDXLandscape = null Field Value Type Description System.String | Improve this Doc View Source LGOptimusL70 LG Optimus L70. Declaration public const string LGOptimusL70 = null Field Value Type Description System.String | Improve this Doc View Source LGOptimusL70Landscape LG Optimus L70 landscape. Declaration public const string LGOptimusL70Landscape = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftLumia550 Microsoft Lumia 550. Declaration public const string MicrosoftLumia550 = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftLumia950 Microsoft Lumia 950. Declaration public const string MicrosoftLumia950 = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftLumia950Landscape Microsoft Lumia 950 landscape. Declaration public const string MicrosoftLumia950Landscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus10 Nexus 10. Declaration public const string Nexus10 = null Field Value Type Description System.String | Improve this Doc View Source Nexus10Landscape Nexus 10 landscape. Declaration public const string Nexus10Landscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus4 Nexus 4. Declaration public const string Nexus4 = null Field Value Type Description System.String | Improve this Doc View Source Nexus4Landscape Nexus 4 landscape. Declaration public const string Nexus4Landscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus5 Nexus 5. Declaration public const string Nexus5 = null Field Value Type Description System.String | Improve this Doc View Source Nexus5Landscape Nexus 5 landscape. Declaration public const string Nexus5Landscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus5X Nexus 5X. Declaration public const string Nexus5X = null Field Value Type Description System.String | Improve this Doc View Source Nexus5XLandscape Nexus 5X landscape. Declaration public const string Nexus5XLandscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus6 Nexus 6. Declaration public const string Nexus6 = null Field Value Type Description System.String | Improve this Doc View Source Nexus6Landscape Nexus 6 landscape. Declaration public const string Nexus6Landscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus6P Nexus 6P. Declaration public const string Nexus6P = null Field Value Type Description System.String | Improve this Doc View Source Nexus6PLandscape Nexus 6P landscape. Declaration public const string Nexus6PLandscape = null Field Value Type Description System.String | Improve this Doc View Source Nexus7 Nexus 7. Declaration public const string Nexus7 = null Field Value Type Description System.String | Improve this Doc View Source Nexus7Landscape Nexus 7 landscape. Declaration public const string Nexus7Landscape = null Field Value Type Description System.String | Improve this Doc View Source NokiaLumia520 Nokia Lumia 520. Declaration public const string NokiaLumia520 = null Field Value Type Description System.String | Improve this Doc View Source NokiaLumia520Landscape Nokia Lumia 520 landscape. Declaration public const string NokiaLumia520Landscape = null Field Value Type Description System.String | Improve this Doc View Source NokiaN9 Nokia N9. Declaration public const string NokiaN9 = null Field Value Type Description System.String | Improve this Doc View Source NokiaN9Landscape Nokia N9 landscape. Declaration public const string NokiaN9Landscape = null Field Value Type Description System.String | Improve this Doc View Source Pixel2 Pixel 2. Declaration public const string Pixel2 = null Field Value Type Description System.String | Improve this Doc View Source Pixel2Landscape Pixel 2 landscape. Declaration public const string Pixel2Landscape = null Field Value Type Description System.String | Improve this Doc View Source Pixel2XL Pixel 2 XL. Declaration public const string Pixel2XL = null Field Value Type Description System.String | Improve this Doc View Source Pixel2XLLandscape Pixel 2 XL landscape. Declaration public const string Pixel2XLLandscape = null Field Value Type Description System.String"
  },
  "api/PlaywrightSharp.IElementHandle.html": {
    "href": "api/PlaywrightSharp.IElementHandle.html",
    "title": "Interface IElementHandle | Playwright Sharp",
    "keywords": "Interface IElementHandle It represents an in-page DOM element. Inherited Members IJSHandle.EvaluateHandleAsync(String) IJSHandle.EvaluateHandleAsync(String, Object) IJSHandle.EvaluateAsync<T>(String) IJSHandle.EvaluateAsync(String) IJSHandle.EvaluateAsync<T>(String, Object) IJSHandle.EvaluateAsync(String, Object) IJSHandle.GetJsonValueAsync<T>() IJSHandle.GetPropertyAsync(String) IJSHandle.GetPropertiesAsync() IJSHandle.DisposeAsync() Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IElementHandle : IJSHandle Methods | Improve this Doc View Source CheckAsync(Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task CheckAsync(int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Scrolls element into view if needed, and then uses Mouse to click in the center of the element. Declaration Task ClickAsync(int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source DblClickAsync(Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Scrolls element into view if needed, and then uses Mouse to double click in the center of the element. Declaration Task DblClickAsync(int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration Task DispatchEventAsync(string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction . Declaration Task<JsonElement? > EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction . Declaration Task<JsonElement? > EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the element and passes it as the first argument to pageFunction . Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the element and passes it as the first argument to pageFunction . Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration Task<JsonElement? > EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration Task<JsonElement? > EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the element and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the element and passes it as the first argument to pageFunction . If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query element for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source FillAsync(String, Nullable<Int32>, Nullable<Boolean>) Focuses the element and triggers an input event after filling. If element is not a text &lt;input> , &lt;textarea> or [contenteditable] element, the method throws an error. Declaration Task FillAsync(string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String value Value to set for the &lt;input> , &lt;textarea> or [contenteditable] element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync() Calls focus on the element. Declaration Task FocusAsync() Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source GetAttributeAsync(String, Nullable<Int32>) Returns element attribute value. Declaration Task<string> GetAttributeAsync(string name, int? timeout = null) Parameters Type Name Description System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetBoundingBoxAsync() Gets the bounding box of the element (relative to the main frame), or null if the element is not visible. Declaration Task<Rect> GetBoundingBoxAsync() Returns Type Description Task < Rect > A that completes when the Rect is resolved, yielding element's Rect . | Improve this Doc View Source GetContentFrameAsync() Content frame for element handles referencing iframe nodes, or null otherwise. Declaration Task<IFrame> GetContentFrameAsync() Returns Type Description Task < IFrame > A that completes when the frame is resolved, yielding element's parent IFrame . | Improve this Doc View Source GetInnerHtmlAsync(Nullable<Int32>) Resolves to the element.innerHTML. Declaration Task<string> GetInnerHtmlAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(Nullable<Int32>) Resolves to the element.innerText. Declaration Task<string> GetInnerTextAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetOwnerFrameAsync() Returns the frame containing the given element. Declaration Task<IFrame> GetOwnerFrameAsync() Returns Type Description Task < IFrame > A that completes when the frame is resolved, yielding element's owner IFrame . | Improve this Doc View Source GetTextContentAsync(Nullable<Int32>) Resolves to the element.textContent. Declaration Task<string> GetTextContentAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source HoverAsync(Modifier[], Nullable<Point>, Nullable<Int32>, Boolean) Scrolls element into view if needed, and then uses Mouse to hover over the center of the element. Declaration Task HoverAsync(Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false) Parameters Type Name Description Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. Returns Type Description Task A that completes when the element is successfully hovered. | Improve this Doc View Source PressAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then uses DownAsync(String) and UpAsync(String) . Declaration Task PressAsync(string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String key Name of key to press, such as ArrowLeft . See KeyDefinitions for a list of all key names. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks If key is a single character and no modifier keys besides Shift are being held down, a keypress / input event will also be generated. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the element. Declaration Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query element for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) The method runs document.querySelector within the element. If no element matches the selector, the return value resolve to null . Declaration Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector A selector to query element for. Returns Type Description Task < IElementHandle > A that completes when the javascript function finishes, yielding an IElementHandle . | Improve this Doc View Source ScreenshotAsync(String, Boolean, Nullable<ScreenshotFormat>, Nullable<Int32>, Nullable<Int32>) Takes a screenshot of the element. Declaration Task<byte[]> ScreenshotAsync(string path = null, bool omitBackground = false, ScreenshotFormat? type = null, int? quality = null, int? timeout = null) Parameters Type Name Description System.String path The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk. System.Boolean omitBackground Hides default white background and allows capturing screenshots with transparency. Defaults to false . System.Nullable < ScreenshotFormat > type Specify screenshot type, can be either jpeg or png. Defaults to 'png'. System.Nullable < System.Int32 > quality The quality of the image, between 0-100. Not applicable to png images. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScrollIntoViewIfNeededAsync(Nullable<Int32>) Tries to scroll element into view, unless it is completely visible as defined by https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API 's ratio . Declaration Task ScrollIntoViewIfNeededAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element is successfully scrolled into view. | Improve this Doc View Source SelectOptionAsync(IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(IElementHandle value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description IElementHandle value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(params IElementHandle[] values) Parameters Type Name Description IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(IElementHandle[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(SelectOption value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description SelectOption value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(params SelectOption[] values) Parameters Type Name Description SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(SelectOption[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration Task<string[]> SelectOptionAsync(int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String value Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(params string[] values) Parameters Type Name Description System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectTextAsync(Nullable<Int32>) This method waits for actionability checks, then focuses the element and selects all its text content. Declaration Task SelectTextAsync(int? timeout = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the text is selected or timeout. | Improve this Doc View Source SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(FilePayload file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload file The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String file The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source TypeAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task TypeAsync(string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String text A text to type into a focused element. System.Int32 delay Delay between key press. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) . Examples elementHandle.TypeAsync(\"#mytextarea\", \"Hello\"); // Types instantly elementHandle.TypeAsync(\"#mytextarea\", \"World\", new TypeOptions { Delay = 100 }); // Types slower, like a user An example of typing into a text field and then submitting the form: var elementHandle = await page.GetElementAsync(\"input\"); await elementHandle.TypeAsync(\"some text\"); await elementHandle.PressAsync(\"Enter\"); | Improve this Doc View Source UncheckAsync(Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task UncheckAsync(int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source WaitForElementStateAsync(ElementState, Nullable<Int32>) Depending on the state parameter, this method waits for one of the actionability checks to pass. This method throws when the element is detached while waiting, unless waiting for the \"hidden\" state. Declaration Task WaitForElementStateAsync(ElementState state, int? timeout = null) Parameters Type Name Description ElementState state State to wait for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task A that completes when the wait condition matches or timed out. | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for, relative to the IElementHandle . System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM."
  },
  "api/PlaywrightSharp.Transport.ChannelOwnerBase.html": {
    "href": "api/PlaywrightSharp.Transport.ChannelOwnerBase.html",
    "title": "Class ChannelOwnerBase | Playwright Sharp",
    "keywords": "Class ChannelOwnerBase Base Channel owner class. Inheritance System.Object ChannelOwnerBase Browser BrowserContext BrowserType CDPSession ConsoleMessage Download Frame JSHandle Page Playwright Request Response Route Namespace : PlaywrightSharp.Transport Assembly : PlaywrightSharp.dll Syntax public class ChannelOwnerBase : object, IChannelOwner"
  },
  "api/PlaywrightSharp.IJSHandle.html": {
    "href": "api/PlaywrightSharp.IJSHandle.html",
    "title": "Interface IJSHandle | Playwright Sharp",
    "keywords": "Interface IJSHandle JSHandle represents an in-page JavaScript object. JSHandles can be created with the EvaluateHandleAsync(String, Object) method. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IJSHandle Methods | Improve this Doc View Source DisposeAsync() Disposes the Handle. It will mark the JSHandle as disposed and release the IJSHandle . Declaration Task DisposeAsync() Returns Type Description Task A that completes when the handle is disposed. | Improve this Doc View Source EvaluateAsync(String) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script is executed, yieling the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync(String, Object) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script is executed, yieling the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync<T>(String) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script is executed, yieling the return value of that script. Type Parameters Name Description T Type to parse the result to. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script is executed, yieling the return value of that script. Type Parameters Name Description T Type to parse the result to. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String) Executes a function in browser context, passing the current IJSHandle as the first argument. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a function in browser context, passing the current IJSHandle as the first argument. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source GetJsonValueAsync<T>() Returns a JSON representation of the object. Declaration Task<T> GetJsonValueAsync<T>() Returns Type Description Task <T> A that completes when the evaluation is completed, yielding an with the json value of the handle. Type Parameters Name Description T Return type. Remarks The method will return an empty JSON if the referenced object is not stringifiable. It will throw an error if the object has circular references. | Improve this Doc View Source GetPropertiesAsync() Returns a with property names as keys and IJSHandle instances for the property values. Declaration Task<IDictionary<string, IJSHandle>> GetPropertiesAsync() Returns Type Description Task < IDictionary < System.String , IJSHandle >> A that completes when the evaluation is completed, yielding a . Examples var handle = await page.EvaluateExpressionHandle(\"({window, document})\"); var properties = await handle.GetPropertiesAsync(); var windowHandle = properties[\"window\"]; var documentHandle = properties[\"document\"]; await handle.DisposeAsync(); | Improve this Doc View Source GetPropertyAsync(String) Fetches a single property from the referenced object. Declaration Task<IJSHandle> GetPropertyAsync(string propertyName) Parameters Type Name Description System.String propertyName property to get. Returns Type Description Task < IJSHandle > A that completes when the evaluation is completed, yielding a IJSHandle from the referenced object."
  },
  "api/PlaywrightSharp.Input.MouseButton.html": {
    "href": "api/PlaywrightSharp.Input.MouseButton.html",
    "title": "Enum MouseButton | Playwright Sharp",
    "keywords": "Enum MouseButton The type of button click to use with or . Namespace : PlaywrightSharp.Input Assembly : PlaywrightSharp.dll Syntax public enum MouseButton : int Fields Name Description Left The left mouse button. Middle The middle mouse button. None Non specified. Right The right mouse button."
  },
  "api/PlaywrightSharp.IDialog.html": {
    "href": "api/PlaywrightSharp.IDialog.html",
    "title": "Interface IDialog | Playwright Sharp",
    "keywords": "Interface IDialog IDialog objects are dispatched by page via the Dialog event. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IDialog Examples An example of using Dialog class: Page.Dialog += async (sender, e) => { await e.Dialog.AcceptAsync(); } await Page.EvaluateAsync(\"alert('yo');\"); Properties | Improve this Doc View Source DefaultValue If dialog is prompt, returns default prompt value. Otherwise, returns empty string. Declaration string DefaultValue { get; } Property Value Type Description System.String The default value. | Improve this Doc View Source Message A message displayed in the dialog. Declaration string Message { get; } Property Value Type Description System.String The message. | Improve this Doc View Source Type Dialog's type, can be one of alert, beforeunload, confirm or prompt. Declaration DialogType Type { get; } Property Value Type Description DialogType The type of the dialog. Methods | Improve this Doc View Source AcceptAsync(String) Accept the Dialog. Declaration Task AcceptAsync(string promptText = \"\") Parameters Type Name Description System.String promptText A text to enter in prompt. Does not cause any effects if the dialog's type is not prompt. Returns Type Description Task A that completes when the dialog has been accepted. | Improve this Doc View Source DismissAsync() Dismiss the dialog. Declaration Task DismissAsync() Returns Type Description Task A that completes when the dialog has been dismissed."
  },
  "api/PlaywrightSharp.KeyDefinition.html": {
    "href": "api/PlaywrightSharp.KeyDefinition.html",
    "title": "Class KeyDefinition | Playwright Sharp",
    "keywords": "Class KeyDefinition Represents a definition of a keyboard key. Inheritance System.Object KeyDefinition Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class KeyDefinition : object Properties | Improve this Doc View Source Code Gets or sets the code. Declaration public string Code { get; set; } Property Value Type Description System.String | Improve this Doc View Source Key Gets or sets the key. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source KeyCode Gets or sets the key code. Declaration public int? KeyCode { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source KeyCodeWithoutLocation Gets or sets the key code without location. Declaration public int? KeyCodeWithoutLocation { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Location Gets or sets the location. Declaration public int? Location { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ShiftKey Gets or sets the shift key. Declaration public string ShiftKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShiftKeyCode Gets or sets the shift key code. Declaration public int? ShiftKeyCode { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ShiftText Gets or sets the shift text. Declaration public string ShiftText { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String | Improve this Doc View Source WindowsVirtualKeyCode Gets or sets the windows virtual key code. Declaration public int? WindowsVirtualKeyCode { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/PlaywrightSharp.Chromium.IChromiumBrowser.html": {
    "href": "api/PlaywrightSharp.Chromium.IChromiumBrowser.html",
    "title": "Interface IChromiumBrowser | Playwright Sharp",
    "keywords": "Interface IChromiumBrowser Chromium-specific features including Tracing, service worker support, etc. You can use chromiumBrowser.StartTracingAsync and chromiumBrowser.StopTracingAsync to create a trace file which can be opened in Chrome DevTools or timeline viewer. Inherited Members IBrowser.Disconnected IBrowser.Version IBrowser.IsConnected IBrowser.CloseAsync() IBrowser.NewPageAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) IBrowser.NewPageAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) IBrowser.NewPageAsync(BrowserContextOptions) Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public interface IChromiumBrowser : IBrowser, IAsyncDisposable Properties | Improve this Doc View Source Contexts Declaration IChromiumBrowserContext[] Contexts { get; } Property Value Type Description IChromiumBrowserContext [] Methods | Improve this Doc View Source NewBrowserCDPSessionAsync() Creates a new browser session. Declaration Task<ICDPSession> NewBrowserCDPSessionAsync() Returns Type Description Task < ICDPSession > A that completes when the browser session was created, yielding the new session. | Improve this Doc View Source NewContextAsync(BrowserContextOptions) Declaration Task<IChromiumBrowserContext> NewContextAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source NewContextAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Declaration Task<IChromiumBrowserContext> NewContextAsync(ViewportSize viewport, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description ViewportSize viewport System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source NewContextAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Declaration Task<IChromiumBrowserContext> NewContextAsync(string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source StartTracingAsync(IPage, Boolean, String, IEnumerable<String>) Starts tracing. Declaration Task StartTracingAsync(IPage page = null, bool screenshots = false, string path = null, IEnumerable<string> categories = null) Parameters Type Name Description IPage page Optional, if specified, tracing includes screenshots of the given page. System.Boolean screenshots Gets or sets a value indicating whether Tracing should captures screenshots in the trace. System.String path A path to write the trace file to. IEnumerable < System.String > categories Specify custom categories to use instead of default. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source StopTracingAsync() Stops tracing. Declaration Task<string> StopTracingAsync() Returns Type Description Task < System.String > A that completes when the message was confirmed by the browser, yielding the tracing result."
  },
  "api/PlaywrightSharp.Geolocation.html": {
    "href": "api/PlaywrightSharp.Geolocation.html",
    "title": "Class Geolocation | Playwright Sharp",
    "keywords": "Class Geolocation Geolocation option. Inheritance System.Object Geolocation Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Geolocation : IEquatable<Geolocation> Properties | Improve this Doc View Source Accuracy Optional non-negative accuracy value. Declaration public decimal Accuracy { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source Latitude Latitude between -90 and 90. Declaration public decimal Latitude { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source Longitude Longitude between -180 and 180. Declaration public decimal Longitude { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Clone() Clones the Geolocation . Declaration public Geolocation Clone() Returns Type Description Geolocation A copy of the current Geolocation . | Improve this Doc View Source Equals(Geolocation) Declaration public bool Equals(Geolocation other) Parameters Type Name Description Geolocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 See Also SetGeolocationAsync ( Geolocation )"
  },
  "api/PlaywrightSharp.Helpers.html": {
    "href": "api/PlaywrightSharp.Helpers.html",
    "title": "Namespace PlaywrightSharp.Helpers | Playwright Sharp",
    "keywords": "Namespace PlaywrightSharp.Helpers Classes StringExtensions String extensions."
  },
  "api/PlaywrightSharp.SelectOption.html": {
    "href": "api/PlaywrightSharp.SelectOption.html",
    "title": "Class SelectOption | Playwright Sharp",
    "keywords": "Class SelectOption Options used with SelectOptionAsync(String, SelectOption[]) . Inheritance System.Object SelectOption Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class SelectOption : object Properties | Improve this Doc View Source Index Gets or sets the index option. Declaration public int? Index { get; set; } Property Value Type Description System.Nullable < System.Int32 > Remarks Matches by the index. | Improve this Doc View Source Label Gets or sets the label option. Declaration public string Label { get; set; } Property Value Type Description System.String Remarks Matches by option.label . | Improve this Doc View Source Value Gets or sets the value option. Declaration public string Value { get; set; } Property Value Type Description System.String Remarks Matches by option.value ."
  },
  "api/PlaywrightSharp.ColorScheme.html": {
    "href": "api/PlaywrightSharp.ColorScheme.html",
    "title": "Enum ColorScheme | Playwright Sharp",
    "keywords": "Enum ColorScheme Options for EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum ColorScheme : int Fields Name Description Dark Dark Light Light NoPreference No preference"
  },
  "api/PlaywrightSharp.Chromium.ICDPSession.html": {
    "href": "api/PlaywrightSharp.Chromium.ICDPSession.html",
    "title": "Interface ICDPSession | Playwright Sharp",
    "keywords": "Interface ICDPSession The CDPSession instances are used to talk raw Chrome Devtools Protocol. Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public interface ICDPSession Methods | Improve this Doc View Source DetachAsync() Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages. Declaration Task DetachAsync() Returns Type Description Task A that completes when the message was confirmed by the browser session. | Improve this Doc View Source SendAsync(String, Object) Make a method call to the browser session. Declaration Task<JsonElement? > SendAsync(string method, object args = null) Parameters Type Name Description System.String method Method name. System.Object args Arguments. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the message was confirmed by the browser session, yielding the result. | Improve this Doc View Source SendAsync<T>(String, Object) Make a method call to the browser session. Declaration Task<T> SendAsync<T>(string method, object args = null) Parameters Type Name Description System.String method Method name. System.Object args Arguments. Returns Type Description Task <T> A that completes when the message was confirmed by the browser session, yielding the result. Type Parameters Name Description T Return type. Events | Improve this Doc View Source MessageReceived Raised when a new message is received. Declaration event EventHandler<CDPEventArgs> MessageReceived Event Type Type Description EventHandler < CDPEventArgs >"
  },
  "api/PlaywrightSharp.PopupEventArgs.html": {
    "href": "api/PlaywrightSharp.PopupEventArgs.html",
    "title": "Class PopupEventArgs | Playwright Sharp",
    "keywords": "Class PopupEventArgs Arguments used by Popup . Inheritance System.Object PopupEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PopupEventArgs : EventArgs Properties | Improve this Doc View Source Page Popup IPage . Declaration public IPage Page { get; } Property Value Type Description IPage"
  },
  "api/PlaywrightSharp.JSHandle.html": {
    "href": "api/PlaywrightSharp.JSHandle.html",
    "title": "Class JSHandle | Playwright Sharp",
    "keywords": "Class JSHandle Inheritance System.Object ChannelOwnerBase JSHandle ElementHandle Implements IJSHandle Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class JSHandle : ChannelOwnerBase, IChannelOwner<JSHandle>, IChannelOwner, IJSHandle Methods | Improve this Doc View Source DisposeAsync() Disposes the Handle. It will mark the JSHandle as disposed and release the IJSHandle . Declaration public Task DisposeAsync() Returns Type Description Task A that completes when the handle is disposed. | Improve this Doc View Source EvaluateAsync(String) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script is executed, yieling the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync(String, Object) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the script is executed, yieling the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync<T>(String) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration public Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script is executed, yieling the return value of that script. Type Parameters Name Description T Type to parse the result to. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a function in browser context, passing the current IElementHandle as the first argument. Declaration public Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script is executed, yieling the return value of that script. Type Parameters Name Description T Type to parse the result to. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String) Executes a function in browser context, passing the current IJSHandle as the first argument. Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a function in browser context, passing the current IJSHandle as the first argument. Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < IJSHandle > A that completes when the script is executed, yielding the return value of that script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source GetJsonValueAsync<T>() Returns a JSON representation of the object. Declaration public Task<T> GetJsonValueAsync<T>() Returns Type Description Task <T> A that completes when the evaluation is completed, yielding an with the json value of the handle. Type Parameters Name Description T Return type. Remarks The method will return an empty JSON if the referenced object is not stringifiable. It will throw an error if the object has circular references. | Improve this Doc View Source GetPropertiesAsync() Returns a with property names as keys and IJSHandle instances for the property values. Declaration public Task<IDictionary<string, IJSHandle>> GetPropertiesAsync() Returns Type Description Task < IDictionary < System.String , IJSHandle >> A that completes when the evaluation is completed, yielding a . | Improve this Doc View Source GetPropertyAsync(String) Fetches a single property from the referenced object. Declaration public Task<IJSHandle> GetPropertyAsync(string propertyName) Parameters Type Name Description System.String propertyName property to get. Returns Type Description Task < IJSHandle > A that completes when the evaluation is completed, yielding a IJSHandle from the referenced object. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Implements IJSHandle"
  },
  "api/PlaywrightSharp.Chromium.ChromiumBrowser.html": {
    "href": "api/PlaywrightSharp.Chromium.ChromiumBrowser.html",
    "title": "Class ChromiumBrowser | Playwright Sharp",
    "keywords": "Class ChromiumBrowser Inheritance System.Object ChannelOwnerBase Browser ChromiumBrowser Implements IChromiumBrowser IBrowser IAsyncDisposable Inherited Members Browser.Disconnected Browser.IsConnected Browser.Version Browser.CloseAsync() Browser.NewPageAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Browser.NewPageAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Browser.NewPageAsync(BrowserContextOptions) Browser.DisposeAsync() Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public class ChromiumBrowser : Browser, IChannelOwner<Browser>, IChannelOwner, IChromiumBrowser, IBrowser, IAsyncDisposable Properties | Improve this Doc View Source Contexts Declaration public IChromiumBrowserContext[] Contexts { get; } Property Value Type Description IChromiumBrowserContext [] Methods | Improve this Doc View Source NewBrowserCDPSessionAsync() Creates a new browser session. Declaration public Task<ICDPSession> NewBrowserCDPSessionAsync() Returns Type Description Task < ICDPSession > A that completes when the browser session was created, yielding the new session. | Improve this Doc View Source NewContextAsync(BrowserContextOptions) Declaration public Task<IChromiumBrowserContext> NewContextAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source NewContextAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Declaration public Task<IChromiumBrowserContext> NewContextAsync(ViewportSize viewport, string userAgent, bool? bypassCSP, bool? javaScriptEnabled, string timezoneId, Geolocation geolocation, ContextPermission[] permissions, bool? isMobile, bool? offline, decimal? deviceScaleFactor, Credentials httpCredentials, bool? hasTouch, bool? acceptDownloads, bool? ignoreHTTPSErrors, ColorScheme? colorScheme, string locale, Dictionary<string, string> extraHttpHeaders) Parameters Type Name Description ViewportSize viewport System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source NewContextAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Declaration public Task<IChromiumBrowserContext> NewContextAsync(string userAgent, bool? bypassCSP, bool? javaScriptEnabled, string timezoneId, Geolocation geolocation, ContextPermission[] permissions, bool? isMobile, bool? offline, decimal? deviceScaleFactor, Credentials httpCredentials, bool? hasTouch, bool? acceptDownloads, bool? ignoreHTTPSErrors, ColorScheme? colorScheme, string locale, Dictionary<string, string> extraHttpHeaders) Parameters Type Name Description System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source StartTracingAsync(IPage, Boolean, String, IEnumerable<String>) Starts tracing. Declaration public Task StartTracingAsync(IPage page = null, bool screenshots = false, string path = null, IEnumerable<string> categories = null) Parameters Type Name Description IPage page Optional, if specified, tracing includes screenshots of the given page. System.Boolean screenshots Gets or sets a value indicating whether Tracing should captures screenshots in the trace. System.String path A path to write the trace file to. IEnumerable < System.String > categories Specify custom categories to use instead of default. Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source StopTracingAsync() Stops tracing. Declaration public Task<string> StopTracingAsync() Returns Type Description Task < System.String > A that completes when the message was confirmed by the browser, yielding the tracing result. Implements IChromiumBrowser IBrowser IAsyncDisposable"
  },
  "api/PlaywrightSharp.BrowserType.html": {
    "href": "api/PlaywrightSharp.BrowserType.html",
    "title": "Class BrowserType | Playwright Sharp",
    "keywords": "Class BrowserType Inheritance System.Object ChannelOwnerBase BrowserType ChromiumBrowserType Implements IBrowserType Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class BrowserType : ChannelOwnerBase, IChannelOwner<BrowserType>, IChannelOwner, IBrowserType Fields | Improve this Doc View Source Chromium Browser type Chromium. Declaration public const string Chromium = null Field Value Type Description System.String | Improve this Doc View Source Firefox Browser type Firefox. Declaration public const string Firefox = null Field Value Type Description System.String | Improve this Doc View Source Webkit Browser type WebKit. Declaration public const string Webkit = null Field Value Type Description System.String Properties | Improve this Doc View Source ExecutablePath Executable path. Declaration public string ExecutablePath { get; } Property Value Type Description System.String | Improve this Doc View Source Name Returns browser name. For example: 'chromium', 'webkit' or 'firefox'. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source LaunchAsync(LaunchOptions) Launches a new browser. Declaration public Task<IBrowser> LaunchAsync(LaunchOptions options = null) Parameters Type Name Description LaunchOptions options Launch options. Returns Type Description Task < IBrowser > A that completes when the browser is launched, yielding the browser. | Improve this Doc View Source LaunchAsync(Nullable<Boolean>, String[], String, Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches a new browser. Declaration public Task<IBrowser> LaunchAsync(bool? headless = null, string[] args = null, string userDataDir = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.String userDataDir Path to a User Data Directory. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowser > A that completes when the browser is launched, yielding the browser. | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchOptions) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration public Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchOptions options) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. LaunchOptions options Launch options. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchPersistentOptions) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration public Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchPersistentOptions options) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. LaunchPersistentOptions options Launch options. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, ViewportSize, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration public Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, ViewportSize viewport, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration public Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. Implements IBrowserType"
  },
  "api/PlaywrightSharp.PlaywrightEvent-1.html": {
    "href": "api/PlaywrightSharp.PlaywrightEvent-1.html",
    "title": "Class PlaywrightEvent<T> | Playwright Sharp",
    "keywords": "Class PlaywrightEvent<T> Events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) and WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . Inheritance System.Object PlaywrightEvent<T> Implements IEvent Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PlaywrightEvent<T> : object, IEvent where T : EventArgs Type Parameters Name Description T returned by the event. Properties | Improve this Doc View Source Name Event Name. Declaration public string Name { get; set; } Property Value Type Description System.String Implements IEvent"
  },
  "api/PlaywrightSharp.ICoverage.html": {
    "href": "api/PlaywrightSharp.ICoverage.html",
    "title": "Interface ICoverage | Playwright Sharp",
    "keywords": "Interface ICoverage Coverage gathers information about parts of JavaScript and CSS that were used by the page. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface ICoverage Methods | Improve this Doc View Source StartCSSCoverageAsync(Boolean) Starts CSS coverage. Declaration Task StartCSSCoverageAsync(bool resetOnNavigation = true) Parameters Type Name Description System.Boolean resetOnNavigation Whether to reset coverage on every navigation. Defaults to true . Returns Type Description Task A task that resolves when coverage is started. | Improve this Doc View Source StartJSCoverageAsync(Boolean, Boolean) Starts the JS coverage. Declaration Task StartJSCoverageAsync(bool resetOnNavigation = true, bool reportAnonymousScripts = false) Parameters Type Name Description System.Boolean resetOnNavigation Whether to reset coverage on every navigation. Defaults to true . System.Boolean reportAnonymousScripts Whether anonymous scripts generated by the page should be reported. Defaults to false . Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source StopCSSCoverageAsync() Stops JS coverage and returns coverage reports for all non-anonymous scripts. Declaration Task<CSSCoverageEntry[]> StopCSSCoverageAsync() Returns Type Description Task < CSSCoverageEntry []> Task that resolves to the array of coverage reports for all stylesheets. Remarks JavaScript Coverage doesn't include anonymous scripts; however, scripts with sourceURLs are reported. | Improve this Doc View Source StopJSCoverageAsync() Stops the JS coverage. Declaration Task<JSCoverageEntry[]> StopJSCoverageAsync() Returns Type Description Task < JSCoverageEntry []> A that completes when the message was confirmed by the browser, yielding the coverage result. See Also Coverage"
  },
  "api/PlaywrightSharp.Transport.html": {
    "href": "api/PlaywrightSharp.Transport.html",
    "title": "Namespace PlaywrightSharp.Transport | Playwright Sharp",
    "keywords": "Namespace PlaywrightSharp.Transport Classes ChannelOwnerBase Base Channel owner class. MessageReceivedEventArgs Message received event arguments. MessageReceived . TransportClosedEventArgs See TransportClosed . Interfaces IConnectionTransport Transport interface. Delegates TransportTaskScheduler Delegate for scheduling of long-running transport tasks."
  },
  "api/PlaywrightSharp.Route.html": {
    "href": "api/PlaywrightSharp.Route.html",
    "title": "Class Route | Playwright Sharp",
    "keywords": "Class Route Whenever a network route is set up with RouteAsync(String, Action<Route, IRequest>) or RouteAsync(String, Action<Route, IRequest>) the Route object allows to handle the route. Inheritance System.Object ChannelOwnerBase Route Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Route : ChannelOwnerBase, IChannelOwner<Route>, IChannelOwner Properties | Improve this Doc View Source Request A request to be routed. Declaration public IRequest Request { get; } Property Value Type Description IRequest Methods | Improve this Doc View Source AbortAsync(RequestAbortErrorCode) Aborts the route's request. Declaration public Task AbortAsync(RequestAbortErrorCode errorCode = RequestAbortErrorCode.Failed) Parameters Type Name Description RequestAbortErrorCode errorCode Optional error code. Returns Type Description Task A that completes when the message was sent. | Improve this Doc View Source ContinueAsync(HttpMethod, String, Dictionary<String, String>) Continues route's request with optional overrides. Declaration public Task ContinueAsync(HttpMethod method = null, string postData = null, Dictionary<string, string> headers = null) Parameters Type Name Description HttpMethod method HTTP method. System.String postData Post data. Dictionary < System.String , System.String > headers HTTP headers. Returns Type Description Task A that completes when the message was sent. | Improve this Doc View Source FulfillAsync(Nullable<HttpStatusCode>, String, Dictionary<String, String>, String, Byte[], String) Fulfills route's request with given response. Declaration public Task FulfillAsync(HttpStatusCode? status = null, string body = null, Dictionary<string, string> headers = null, string contentType = null, byte[] bodyContent = null, string path = null) Parameters Type Name Description System.Nullable < HttpStatusCode > status Status code of the response. System.String body Optional response body as text. Dictionary < System.String , System.String > headers Optional response headers. System.String contentType If set, equals to setting Content-Type response header. System.Byte [] bodyContent Optional response body as binary. System.String path Optional file path to respond with. The content type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. Returns Type Description Task A that completes when the message was sent."
  },
  "api/PlaywrightSharp.CSSCoverageEntry.html": {
    "href": "api/PlaywrightSharp.CSSCoverageEntry.html",
    "title": "Class CSSCoverageEntry | Playwright Sharp",
    "keywords": "Class CSSCoverageEntry Coverage report for all non-anonymous scripts. Inheritance System.Object CSSCoverageEntry Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class CSSCoverageEntry : object Properties | Improve this Doc View Source Ranges Script ranges that were executed. Ranges are sorted and non-overlapping. Declaration public CSSCoverageEntryRange[] Ranges { get; set; } Property Value Type Description CSSCoverageEntryRange [] | Improve this Doc View Source Text Script content. Declaration public string Text { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Script URL. Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.FilePayload.html": {
    "href": "api/PlaywrightSharp.FilePayload.html",
    "title": "Class FilePayload | Playwright Sharp",
    "keywords": "Class FilePayload Payload for SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) , SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) and SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) . Inheritance System.Object FilePayload Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class FilePayload : object Properties | Improve this Doc View Source Buffer File content as a base64 string. Declaration public string Buffer { get; set; } Property Value Type Description System.String | Improve this Doc View Source MimeType Mime type. Declaration public string MimeType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name File name. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.ConsoleMessageLocation.html": {
    "href": "api/PlaywrightSharp.ConsoleMessageLocation.html",
    "title": "Class ConsoleMessageLocation | Playwright Sharp",
    "keywords": "Class ConsoleMessageLocation Console message location. Inheritance System.Object ConsoleMessageLocation Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ConsoleMessageLocation : IEquatable<ConsoleMessageLocation> Properties | Improve this Doc View Source ColumnNumber 0-based column number in the resource if known. Declaration public int? ColumnNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source LineNumber 0-based line number in the resource if known. Declaration public int? LineNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source URL URL of the resource if known. Declaration public string URL { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(ConsoleMessageLocation) Declaration public bool Equals(ConsoleMessageLocation other) Parameters Type Name Description ConsoleMessageLocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(ConsoleMessageLocation, ConsoleMessageLocation) Declaration public static bool operator ==(ConsoleMessageLocation location1, ConsoleMessageLocation location2) Parameters Type Name Description ConsoleMessageLocation location1 ConsoleMessageLocation location2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(ConsoleMessageLocation, ConsoleMessageLocation) Declaration public static bool operator !=(ConsoleMessageLocation location1, ConsoleMessageLocation location2) Parameters Type Name Description ConsoleMessageLocation location1 ConsoleMessageLocation location2 Returns Type Description System.Boolean"
  },
  "api/PlaywrightSharp.Chromium.IChromiumBrowserType.html": {
    "href": "api/PlaywrightSharp.Chromium.IChromiumBrowserType.html",
    "title": "Interface IChromiumBrowserType | Playwright Sharp",
    "keywords": "Interface IChromiumBrowserType Inherited Members IBrowserType.ExecutablePath IBrowserType.Name Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public interface IChromiumBrowserType : IBrowserType Methods | Improve this Doc View Source LaunchAsync(LaunchOptions) Declaration Task<IChromiumBrowser> LaunchAsync(LaunchOptions options) Parameters Type Name Description LaunchOptions options Returns Type Description Task < IChromiumBrowser > | Improve this Doc View Source LaunchAsync(Nullable<Boolean>, String[], String, Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration Task<IChromiumBrowser> LaunchAsync(bool? headless = null, string[] args = null, string userDataDir = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.Nullable < System.Boolean > headless System.String [] args System.String userDataDir System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowser > | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchOptions) Declaration Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchOptions options) Parameters Type Name Description System.String userDataDir LaunchOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchPersistentOptions) Declaration Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchPersistentOptions options) Parameters Type Name Description System.String userDataDir LaunchPersistentOptions options Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, ViewportSize, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, ViewportSize viewport, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir ViewportSize viewport System.Nullable < System.Boolean > headless System.String [] args System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowserContext > | Improve this Doc View Source LaunchPersistentContextAsync(String, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Declaration Task<IChromiumBrowserContext> LaunchPersistentContextAsync(string userDataDir, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir System.Nullable < System.Boolean > headless System.String [] args System.Nullable < System.Boolean > devtools System.String executablePath System.String downloadsPath System.Nullable < System.Boolean > ignoreHTTPSErrors System.Nullable < System.Int32 > timeout System.Nullable < System.Boolean > dumpIO System.Nullable < System.Int32 > slowMo System.Nullable < System.Boolean > ignoreDefaultArgs System.String [] ignoredDefaultArgs Dictionary < System.String , System.String > env Dictionary < System.String , System.Object > firefoxUserPrefs ProxySettings proxy System.String userAgent System.Nullable < System.Boolean > bypassCSP System.Nullable < System.Boolean > javaScriptEnabled System.String timezoneId Geolocation geolocation ContextPermission [] permissions System.Nullable < System.Boolean > isMobile System.Nullable < System.Boolean > offline System.Nullable < System.Decimal > deviceScaleFactor Credentials httpCredentials System.Nullable < System.Boolean > hasTouch System.Nullable < System.Boolean > acceptDownloads System.Nullable < ColorScheme > colorScheme System.String locale Dictionary < System.String , System.String > extraHttpHeaders System.Nullable < System.Boolean > chromiumSandbox System.Nullable < System.Boolean > handleSIGINT System.Nullable < System.Boolean > handleSIGTERM System.Nullable < System.Boolean > handleSIGHUP Returns Type Description Task < IChromiumBrowserContext >"
  },
  "api/PlaywrightSharp.Credentials.html": {
    "href": "api/PlaywrightSharp.Credentials.html",
    "title": "Class Credentials | Playwright Sharp",
    "keywords": "Class Credentials Options to be used in SetHttpCredentialsAsync(Credentials) . Inheritance System.Object Credentials Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Credentials : object Properties | Improve this Doc View Source Password Gets or sets the password to be used for authentication. Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Gets or sets the username to be used for authentication. Declaration public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.IPlaywright.html": {
    "href": "api/PlaywrightSharp.IPlaywright.html",
    "title": "Interface IPlaywright | Playwright Sharp",
    "keywords": "Interface IPlaywright IPlaywright provides methods to interact with the playwright server. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IPlaywright : IDisposable Properties | Improve this Doc View Source Chromium Gets the Chromium browser type from the playwright server. Declaration IChromiumBrowserType Chromium { get; } Property Value Type Description IChromiumBrowserType | Improve this Doc View Source Devices Returns a list of devices to be used with NewContextAsync(BrowserContextOptions) . Declaration IReadOnlyDictionary<string, DeviceDescriptor> Devices { get; } Property Value Type Description IReadOnlyDictionary < System.String , DeviceDescriptor > | Improve this Doc View Source Firefox Gets the Firefox browser type from the playwright server. Declaration IBrowserType Firefox { get; } Property Value Type Description IBrowserType | Improve this Doc View Source Item[String] Gets a IBrowserType . Declaration IBrowserType this[string browserType] { get; } Parameters Type Name Description System.String browserType IBrowserType name. You can get the names from BrowserType . e.g.: Chromium , Firefox or Webkit . Property Value Type Description IBrowserType | Improve this Doc View Source Selectors Selectors can be used to install custom selector engines. Declaration Selectors Selectors { get; } Property Value Type Description Selectors | Improve this Doc View Source Webkit Gets the Webkit browser type from the playwright server. Declaration IBrowserType Webkit { get; } Property Value Type Description IBrowserType"
  },
  "api/PlaywrightSharp.IBrowser.html": {
    "href": "api/PlaywrightSharp.IBrowser.html",
    "title": "Interface IBrowser | Playwright Sharp",
    "keywords": "Interface IBrowser A Browser is created when Playwright connects to a browser instance. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IBrowser : IAsyncDisposable Properties | Improve this Doc View Source Contexts Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts. Declaration IBrowserContext[] Contexts { get; } Property Value Type Description IBrowserContext [] | Improve this Doc View Source IsConnected Indicates that the browser is connected. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Version Returns the browser version. Declaration string Version { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CloseAsync() Closes browser and all of its pages (if any were opened). The Browser object itself is considered to be disposed and cannot be used anymore. Declaration Task CloseAsync() Returns Type Description Task A that completes when the browser is closed. | Improve this Doc View Source NewContextAsync(BrowserContextOptions) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration Task<IBrowserContext> NewContextAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Context options. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. Examples . // Create a new incognito browser context. const context = await browser.NewContextAsync(); // Create a new page in a pristine context. const page = await context.NewPageAsync(\"https://example.com\"); | Improve this Doc View Source NewContextAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration Task<IBrowserContext> NewContextAsync(ViewportSize viewport, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. Examples . // Create a new incognito browser context. const context = await browser.NewContextAsync(); // Create a new page in a pristine context. const page = await context.NewPageAsync(\"https://example.com\"); | Improve this Doc View Source NewContextAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration Task<IBrowserContext> NewContextAsync(string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. Examples . // Create a new incognito browser context. const context = await browser.NewContextAsync(); // Create a new page in a pristine context. const page = await context.NewPageAsync(\"https://example.com\"); | Improve this Doc View Source NewPageAsync(BrowserContextOptions) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration Task<IPage> NewPageAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Context options. Returns Type Description Task < IPage > A that completes when a new IPage is created. | Improve this Doc View Source NewPageAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration Task<IPage> NewPageAsync(ViewportSize viewport, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IPage > A that completes when a new IPage is created. Examples . // Create a new incognito browser context. const context = await browser.NewContextAsync(); // Create a new page in a pristine context. const page = await context.NewPageAsync(\"https://example.com\"); | Improve this Doc View Source NewPageAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration Task<IPage> NewPageAsync(string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IPage > A that completes when a new IPage is created. Examples . // Create a new incognito browser context. const context = await browser.NewContextAsync(); // Create a new page in a pristine context. const page = await context.NewPageAsync(\"https://example.com\"); Events | Improve this Doc View Source Disconnected Raised when the IBrowser gets disconnected from the browser instance. This might happen because one of the following: Browser is closed or crashed CloseAsync() method was called Declaration event EventHandler Disconnected Event Type Type Description EventHandler"
  },
  "api/PlaywrightSharp.LoadStateEventArgs.html": {
    "href": "api/PlaywrightSharp.LoadStateEventArgs.html",
    "title": "Class LoadStateEventArgs | Playwright Sharp",
    "keywords": "Class LoadStateEventArgs See LoadState . Inheritance System.Object LoadStateEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class LoadStateEventArgs : object Properties | Improve this Doc View Source LifecycleEvent Load state being added. Declaration public LifecycleEvent LifecycleEvent { get; set; } Property Value Type Description LifecycleEvent"
  },
  "api/PlaywrightSharp.Chromium.html": {
    "href": "api/PlaywrightSharp.Chromium.html",
    "title": "Namespace PlaywrightSharp.Chromium | Playwright Sharp",
    "keywords": "Namespace PlaywrightSharp.Chromium Classes CDPEventArgs See MessageReceived . CDPSession Base Channel owner class. ChromiumBrowser ChromiumBrowserContext ChromiumBrowserType Interfaces ICDPSession The CDPSession instances are used to talk raw Chrome Devtools Protocol. IChromiumBrowser Chromium-specific features including Tracing, service worker support, etc. You can use chromiumBrowser.StartTracingAsync and chromiumBrowser.StopTracingAsync to create a trace file which can be opened in Chrome DevTools or timeline viewer. IChromiumBrowserContext Chromium-specific features including background pages, service worker support, etc. IChromiumBrowserType"
  },
  "api/PlaywrightSharp.Margin.html": {
    "href": "api/PlaywrightSharp.Margin.html",
    "title": "Class Margin | Playwright Sharp",
    "keywords": "Class Margin Margin options used in GetPdfAsync(String, Decimal, Boolean, String, String, Boolean, Boolean, String, PaperFormat, String, String, Margin, Boolean) . Inheritance System.Object Margin Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Margin : IEquatable<Margin> Properties | Improve this Doc View Source Bottom Bottom margin, accepts values labeled with units. Declaration public string Bottom { get; set; } Property Value Type Description System.String | Improve this Doc View Source Left Left margin, accepts values labeled with units. Declaration public string Left { get; set; } Property Value Type Description System.String | Improve this Doc View Source Right Right margin, accepts values labeled with units. Declaration public string Right { get; set; } Property Value Type Description System.String | Improve this Doc View Source Top Top margin, accepts values labeled with units. Declaration public string Top { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Margin) Checks for object equality. Declaration public bool Equals(Margin other) Parameters Type Name Description Margin other Options to check. Returns Type Description System.Boolean Whether the objects are equal or not. | Improve this Doc View Source Equals(Object) Checks for object equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Options to check. Returns Type Description System.Boolean Whether the objects are equal or not. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Margin, Margin) Declaration public static bool operator ==(Margin left, Margin right) Parameters Type Name Description Margin left Margin right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Margin, Margin) Declaration public static bool operator !=(Margin left, Margin right) Parameters Type Name Description Margin left Margin right Returns Type Description System.Boolean"
  },
  "api/PlaywrightSharp.IBrowserType.html": {
    "href": "api/PlaywrightSharp.IBrowserType.html",
    "title": "Interface IBrowserType | Playwright Sharp",
    "keywords": "Interface IBrowserType BrowserType provides methods to launch a specific browser instance or connect to an existing one. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IBrowserType Properties | Improve this Doc View Source ExecutablePath Executable path. Declaration string ExecutablePath { get; } Property Value Type Description System.String | Improve this Doc View Source Name Returns browser name. For example: 'chromium', 'webkit' or 'firefox'. Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source LaunchAsync(LaunchOptions) Launches a new browser. Declaration Task<IBrowser> LaunchAsync(LaunchOptions options) Parameters Type Name Description LaunchOptions options Launch options. Returns Type Description Task < IBrowser > A that completes when the browser is launched, yielding the browser. | Improve this Doc View Source LaunchAsync(Nullable<Boolean>, String[], String, Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches a new browser. Declaration Task<IBrowser> LaunchAsync(bool? headless = null, string[] args = null, string userDataDir = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.String userDataDir Path to a User Data Directory. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowser > A that completes when the browser is launched, yielding the browser. | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchOptions) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchOptions options) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. LaunchOptions options Launch options. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, LaunchPersistentOptions) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, LaunchPersistentOptions options) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. LaunchPersistentOptions options Launch options. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, ViewportSize, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, ViewportSize viewport, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server. | Improve this Doc View Source LaunchPersistentContextAsync(String, Nullable<Boolean>, String[], Nullable<Boolean>, String, String, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>, String[], Dictionary<String, String>, Dictionary<String, Object>, ProxySettings, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser. Declaration Task<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, bool? headless = null, string[] args = null, bool? devtools = null, string executablePath = null, string downloadsPath = null, bool? ignoreHTTPSErrors = null, int? timeout = null, bool? dumpIO = null, int? slowMo = null, bool? ignoreDefaultArgs = null, string[] ignoredDefaultArgs = null, Dictionary<string, string> env = null, Dictionary<string, object> firefoxUserPrefs = null, ProxySettings proxy = null, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null, bool? chromiumSandbox = null, bool? handleSIGINT = null, bool? handleSIGTERM = null, bool? handleSIGHUP = null) Parameters Type Name Description System.String userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. System.Nullable < System.Boolean > headless Whether to run browser in headless mode. Defaults to true unless the devtools option is true. System.String [] args Additional arguments to pass to the browser instance. System.Nullable < System.Boolean > devtools Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. System.String executablePath Path to a browser executable to run instead of the bundled one. System.String downloadsPath If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds to wait for the browser instance to start. System.Nullable < System.Boolean > dumpIO Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false. System.Nullable < System.Int32 > slowMo Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on. System.Nullable < System.Boolean > ignoreDefaultArgs If true, Playwright does not pass its own configurations args and only uses the ones from args. Dangerous option; use with care. Defaults to false. System.String [] ignoredDefaultArgs if ignoreDefaultArgs is set to false this list will be used to filter default arguments. Dictionary < System.String , System.String > env Specify environment variables that will be visible to browser. Defaults to Environment variables. Dictionary < System.String , System.Object > firefoxUserPrefs Firefox user preferences. Learn more about the Firefox user preferences at about:config. ProxySettings proxy Network proxy settings. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. System.Nullable < System.Boolean > chromiumSandbox Enable Chromium sandboxing. Defaults to true. System.Nullable < System.Boolean > handleSIGINT Close the browser process on Ctrl-C. Defaults to true. System.Nullable < System.Boolean > handleSIGTERM Close the browser process on SIGTERM. Defaults to true. System.Nullable < System.Boolean > handleSIGHUP Close the browser process on SIGHUP. Defaults to true. Returns Type Description Task < IBrowserContext > A that completes when the browser is launched, yielding the browser server."
  },
  "api/PlaywrightSharp.ScreenshotFormat.html": {
    "href": "api/PlaywrightSharp.ScreenshotFormat.html",
    "title": "Enum ScreenshotFormat | Playwright Sharp",
    "keywords": "Enum ScreenshotFormat Screenshot file format. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum ScreenshotFormat : int Fields Name Description Jpeg JPEG type. Png PNG type. See Also ScreenshotAsync ( System.String , System.Boolean , Rect , System.Boolean , System.Nullable < ScreenshotFormat >, System.Nullable < System.Int32 >, System.Nullable < System.Int32 >) ScreenshotAsync ( System.String , System.Boolean , System.Nullable < ScreenshotFormat >, System.Nullable < System.Int32 >, System.Nullable < System.Int32 >)"
  },
  "api/PlaywrightSharp.PageEventArgs.html": {
    "href": "api/PlaywrightSharp.PageEventArgs.html",
    "title": "Class PageEventArgs | Playwright Sharp",
    "keywords": "Class PageEventArgs See Page . Inheritance System.Object PageEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PageEventArgs : EventArgs Properties | Improve this Doc View Source Page Page created. Declaration public Page Page { get; } Property Value Type Description Page"
  },
  "api/PlaywrightSharp.Response.html": {
    "href": "api/PlaywrightSharp.Response.html",
    "title": "Class Response | Playwright Sharp",
    "keywords": "Class Response Inheritance System.Object ChannelOwnerBase Response Implements IResponse Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Response : ChannelOwnerBase, IChannelOwner<Response>, IChannelOwner, IResponse Properties | Improve this Doc View Source Frame An IFrame that initiated this response, or null if navigating to error pages. Declaration public IFrame Frame { get; } Property Value Type Description IFrame | Improve this Doc View Source Headers An object with HTTP headers associated with the response. All header names are lower-case. Declaration public IDictionary<string, string> Headers { get; } Property Value Type Description IDictionary < System.String , System.String > | Improve this Doc View Source Ok Whether the response was successful (status in the range 200-299) or not. Declaration public bool Ok { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Request A matching IRequest object. Declaration public IRequest Request { get; } Property Value Type Description IRequest | Improve this Doc View Source Status Status code of the response. Declaration public HttpStatusCode Status { get; } Property Value Type Description HttpStatusCode | Improve this Doc View Source StatusText Contains the status text of the response (e.g. usually an \"OK\" for a success). Declaration public string StatusText { get; } Property Value Type Description System.String | Improve this Doc View Source Url The URL of the response. Declaration public string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FinishedAsync() Waits for this response to finish, returns failure error if request failed. Declaration public Task FinishedAsync() Returns Type Description Task A that completes when the response finished. | Improve this Doc View Source GetBodyAsync() Returns a which resolves to a buffer with response body. Declaration public Task<byte[]> GetBodyAsync() Returns Type Description Task < System.Byte []> A that completes when the response is returned by the server, yielding a array. | Improve this Doc View Source GetJsonAsync(JsonDocumentOptions) Returns a which resolves to a representation of response body. Declaration public Task<JsonDocument> GetJsonAsync(JsonDocumentOptions options = null) Parameters Type Name Description JsonDocumentOptions options Parser options. Returns Type Description Task < JsonDocument > A that completes when the json body is parsed, yielding a representation of response body. | Improve this Doc View Source GetJsonAsync<T>(JsonSerializerOptions) Returns a which resolves to a T representation of response body. Declaration public Task<T> GetJsonAsync<T>(JsonSerializerOptions options = null) Parameters Type Name Description JsonSerializerOptions options Parser options. Returns Type Description Task <T> A that completes when the json body is parsed, yielding a T representation of response body. Type Parameters Name Description T Return type. | Improve this Doc View Source GetTextAsync() A text representation of response body. Declaration public Task<string> GetTextAsync() Returns Type Description Task < System.String > A that completes when the text was processed, yielding to a text representation of response body. Implements IResponse"
  },
  "api/PlaywrightSharp.IPage.html": {
    "href": "api/PlaywrightSharp.IPage.html",
    "title": "Interface IPage | Playwright Sharp",
    "keywords": "Interface IPage Page provides methods to interact with a single tab or extension background page in Chromium. One Browser instance might have multiple Page instances. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IPage Examples This example creates a page and navigates it to a URL: var context = await browser.NewContextAsync(); const page = await context.NewPageAsync(\"https://example.com\"); await browser.CloseAsync(); Properties | Improve this Doc View Source Accessibility Gets the accessibility. Declaration IAccessibility Accessibility { get; } Property Value Type Description IAccessibility | Improve this Doc View Source Context Get the browser context that the page belongs to. Declaration IBrowserContext Context { get; } Property Value Type Description IBrowserContext | Improve this Doc View Source Coverage Browser-specific Coverage implementation, only available for Chromium atm. Declaration ICoverage Coverage { get; } Property Value Type Description ICoverage | Improve this Doc View Source DefaultNavigationTimeout Maximum navigation time in milliseconds. Declaration int DefaultNavigationTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DefaultTimeout This setting will change the default maximum time for all the methods accepting timeout option. Declaration int DefaultTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Frames Gets all frames attached to the page. Declaration IFrame[] Frames { get; } Property Value Type Description IFrame [] | Improve this Doc View Source IsClosed Get an indication that the page has been closed. Declaration bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Keyboard Gets this page's keyboard. Declaration IKeyboard Keyboard { get; } Property Value Type Description IKeyboard | Improve this Doc View Source MainFrame Page is guaranteed to have a main frame which persists during navigations. Declaration IFrame MainFrame { get; } Property Value Type Description IFrame | Improve this Doc View Source Mouse Gets this page's mouse. Declaration IMouse Mouse { get; } Property Value Type Description IMouse | Improve this Doc View Source Url Shortcut for MainFrame.Url. Declaration string Url { get; } Property Value Type Description System.String | Improve this Doc View Source ViewportSize Page Viewport. Declaration ViewportSize ViewportSize { get; } Property Value Type Description ViewportSize | Improve this Doc View Source Workers Gets all workers in the page. Declaration IEnumerable<IWorker> Workers { get; } Property Value Type Description IEnumerable < IWorker > Methods | Improve this Doc View Source AddInitScriptAsync(String, Object[], String, String) Adds a script which would be evaluated in one of the following scenarios: Whenever a page is created in the browser context or is navigated. Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame. Declaration Task AddInitScriptAsync(string script = null, object[] arg = null, string path = null, string content = null) Parameters Type Name Description System.String script Script to be evaluated in all pages in the browser context or script path. System.Object [] arg Optional argument to pass to script . System.String path Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to . System.String content Gets or sets the raw JavaScript content to be injected into frame. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source AddScriptTagAsync(String, String, String, String) Adds a <script> tag into the page with the desired url or content. Declaration Task<IElementHandle> AddScriptTagAsync(string url = null, string path = null, string content = null, string type = null) Parameters Type Name Description System.String url URL of a script to be added. System.String path Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw JavaScript content to be injected into frame. System.String type Script type. Use 'module' in order to load a Javascript ES6 module. Returns Type Description Task < IElementHandle > A that completes when the tag is added, yielding the added tag as an IElementHandle when the script's onload fires or when the script content was injected into frame. Remarks Shortcut for page.MainFrame.AddScriptTagAsync(options) . | Improve this Doc View Source AddStyleTagAsync(String, String, String) Adds a <link rel=\"stylesheet\"> tag into the page with the desired url or a <link rel=\"stylesheet\"> tag with the content. Declaration Task<IElementHandle> AddStyleTagAsync(string url = null, string path = null, string content = null) Parameters Type Name Description System.String url URL of the link tag. System.String path Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw CSS content to be injected into frame. Returns Type Description Task < IElementHandle > A that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added IElementHandle . | Improve this Doc View Source BringToFrontAsync() Brings page to front (activates tab). Declaration Task BringToFrontAsync() Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source CheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task CheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to click in the center of the element. Declaration Task ClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully clicked. | Improve this Doc View Source CloseAsync(Boolean) Closes the page. Declaration Task CloseAsync(bool runBeforeUnload = false) Parameters Type Name Description System.Boolean runBeforeUnload Defaults to false . Whether to run the beforeunload page handlers. Returns Type Description Task A that completes when the close process finishes. | Improve this Doc View Source DblClickAsync(String, Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to double click in the center of the element. Declaration Task DblClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration Task DispatchEventAsync(string selector, string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used. System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EmulateMediaAsync() Setup media emulation. Declaration Task EmulateMediaAsync() Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<ColorScheme>) Setup media emulation. Declaration Task EmulateMediaAsync(ColorScheme? colorScheme) Parameters Type Name Description System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<MediaType>) Setup media emulation. Declaration Task EmulateMediaAsync(MediaType? media) Parameters Type Name Description System.Nullable < MediaType > media Changes the CSS media type of the page. Passing null disables CSS media emulation. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) Setup media emulation. Declaration Task EmulateMediaAsync(MediaType? media, ColorScheme? colorScheme) Parameters Type Name Description System.Nullable < MediaType > media Changes the CSS media type of the page. Passing null disables CSS media emulation. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration Task EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration Task EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync(String) Executes a script in browser context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String ) | Improve this Doc View Source EvaluateAsync(String, Object) Executes a script in browser context. Declaration Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String) Executes a script in browser context. Declaration Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String ) | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a script in browser context. Declaration Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateHandleAsync(String) Executes a script in browser context. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < IJSHandle > A that completes when function is executed, yielding the return value. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a script in browser context. Declaration Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Function arguments. Returns Type Description Task < IJSHandle > A that completes when function is executed, yielding the return value. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source ExposeBindingAsync(String, Action<BindingSource>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves when playwrightBinding completes. Declaration Task ExposeBindingAsync(string name, Action<BindingSource> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource > playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T>(String, Action<BindingSource, T>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration Task ExposeBindingAsync<T>(string name, Action<BindingSource, T> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource , T> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeBindingAsync<TResult>(string name, Func<BindingSource, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeBindingAsync<T, TResult>(string name, Func<BindingSource, T, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeBindingAsync<T1, T2, TResult>(string name, Func<BindingSource, T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeBindingAsync<T1, T2, T3, TResult>(string name, Func<BindingSource, T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, T3, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeBindingAsync<T1, T2, T3, T4, TResult>(string name, Func<BindingSource, T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func < BindingSource , T1, T2, T3, T4, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . T4 The fourth parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync(String, Action) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration Task ExposeFunctionAsync(string name, Action playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T>(String, Action<T>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration Task ExposeFunctionAsync<T>(string name, Action<T> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action <T> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<TResult>(String, Func<TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<TResult>(string name, Func<TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<TResult>(String, Func<TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T, TResult>(string name, Func<T, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T The parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, TResult>(string name, Func<T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, T3, TResult>(string name, Func<T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, T3, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves to the return value of playwrightFunction . Declaration Task ExposeFunctionAsync<T1, T2, T3, T4, TResult>(string name, Func<T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Func <T1, T2, T3, T4, TResult> playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Type Parameters Name Description T1 The first parameter of playwrightFunction . T2 The second parameter of playwrightFunction . T3 The third parameter of playwrightFunction . T4 The fourth parameter of playwrightFunction . TResult The result of playwrightFunction . Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) survive navigations. | Improve this Doc View Source FillAsync(String, String, Nullable<Int32>, Nullable<Boolean>) This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error. Shortcut for MainFrame.FillAsync. Declaration Task FillAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to fill for the <input>, <textarea> or [contenteditable] element System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync(String, Nullable<Int32>) Fetches an element with selector and focuses it. Declaration Task FocusAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the the element matching selector is successfully focused. | Improve this Doc View Source GetAttributeAsync(String, String, Nullable<Int32>) Returns element attribute value. Declaration Task<string> GetAttributeAsync(string selector, string name, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetContentAsync() Gets the full HTML contents of the page, including the doctype. Declaration Task<string> GetContentAsync() Returns Type Description Task < System.String > A that completes when the evaluation is completed, yielding the HTML content. | Improve this Doc View Source GetFrame(Func<String, Boolean>) Returns frame matching the specified criteria. Declaration IFrame GetFrame(Func<string, bool> url) Parameters Type Name Description Func < System.String , System.Boolean > url A function receiving the framn's URL. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetFrame(Regex) Returns frame matching the specified criteria. Declaration IFrame GetFrame(Regex url) Parameters Type Name Description Regex url Regex pattern. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetFrame(String, String) Returns frame matching the specified criteria. Declaration IFrame GetFrame(string name = null, string url = null) Parameters Type Name Description System.String name Frame name specified in the iframe's name attribute. System.String url A glob pattern. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetInnerHtmlAsync(String, Nullable<Int32>) Resolves to the element.innerHTML. Declaration Task<string> GetInnerHtmlAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(String, Nullable<Int32>) Resolves to the element.innerText. Declaration Task<string> GetInnerTextAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetOpenerAsync() Returns the opener for popup pages and null for others. Declaration Task<IPage> GetOpenerAsync() Returns Type Description Task < IPage > A that completes when the opener is resolved, yielding the opener IPage . Remarks If the opener has been closed already the task may resolve to null . Examples IPage popup; page.Popup += (sender, e) => popup = e.Page; await page.EvaluateAsync(\"() => window.open('about:blank')\"); | Improve this Doc View Source GetPdfAsync(String, Decimal, Boolean, String, String, Boolean, Boolean, String, PaperFormat, String, String, Margin, Boolean) generates a pdf of the page with Print css media. To generate a pdf with Screen media call EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) with Screen . Declaration Task<byte[]> GetPdfAsync(string path = \"\", decimal scale = null, bool displayHeaderFooter = false, string headerTemplate = \"\", string footerTemplate = \"\", bool printBackground = false, bool landscape = false, string pageRanges = \"\", PaperFormat format = null, string width = null, string height = null, Margin margin = null, bool preferCSSPageSize = false) Parameters Type Name Description System.String path The file path to save the PDF to. paths are resolved using . System.Decimal scale Scale of the webpage rendering. Defaults to 1 . Scale amount must be between 0.1 and 2. System.Boolean displayHeaderFooter Display header and footer. Defaults to false . System.String headerTemplate HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date - formatted print date title - document title url - document location pageNumber - current page number totalPages - total pages in the document. System.String footerTemplate HTML template for the print footer. Should be valid HTML markup with following classes used to inject printing values into them: date - formatted print date title - document title url - document location pageNumber - current page number totalPages - total pages in the document. System.Boolean printBackground Print background graphics. Defaults to false . System.Boolean landscape Paper orientation.. Defaults to false . System.String pageRanges Paper ranges to print, e.g., 1-5, 8, 11-13 . Defaults to the empty string, which means print all pages. PaperFormat format Paper format. If set, takes priority over width and height . System.String width Paper width, accepts values labeled with units. System.String height Paper height, accepts values labeled with units. Margin margin Paper margins, defaults to none. System.Boolean preferCSSPageSize Give any CSS @page size declared in the page priority over what is declared in width and height or format options. Defaults to false , which will scale the content to fit the paper size. Returns Type Description Task < System.Byte []> A that completes when the PDF was generated. Remarks Generating a pdf is currently only supported in Chrome headless. | Improve this Doc View Source GetTextContentAsync(String, Nullable<Int32>) Resolves to the element.textContent. Declaration Task<string> GetTextContentAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source GetTitleAsync() Returns page's title. Declaration Task<string> GetTitleAsync() Returns Type Description Task < System.String > A the completes when the title is resolved, yielding the page's title. | Improve this Doc View Source GoBackAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Navigate to the previous page in history. Declaration Task<IResponse> GoBackAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go back, resolves to null. | Improve this Doc View Source GoForwardAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Navigate to the next page in history. Declaration Task<IResponse> GoForwardAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go forward, resolves to null. | Improve this Doc View Source GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) Navigates to an URL. Declaration Task<IResponse> GoToAsync(string url, LifecycleEvent? waitUntil = null, string referer = null, int? timeout = null) Parameters Type Name Description System.String url URL to navigate page to. The url should include scheme, e.g. https://. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.String referer Referer header value. If provided it will take prefrence over the referer header value set by . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > A that completes with resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. Remarks GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will throw an error if: There's an SSL error (e.g. in case of self-signed certificates). Target URL is invalid. The timeout is exceeded during navigation. The remote server does not respond or is unreachable. The main resource failed to load. GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling response.status(). NOTE GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) either throws an error or returns a main resource response. The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null. NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue. Shortcut for GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) . | Improve this Doc View Source HoverAsync(String, Nullable<Point>, Modifier[], Boolean, Nullable<Int32>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to hover over the center of the element. Declaration Task HoverAsync(string selector, Point? position = null, Modifier[] modifiers = null, bool force = false, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered. System.Nullable < Point > position A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Boolean force Whether to bypass the actionability checks. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element matching selector is successfully hovered. | Improve this Doc View Source PressAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task PressAsync(string selector, string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String key Name of the key to press or a character to generate, such as ArrowLeft or a . System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the page. Declaration Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) The method runs document.querySelector within the page. If no element matches the selector, the return value resolve to null . Declaration Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IElementHandle > A that completes when the javascript function finishes, yielding an IElementHandle . | Improve this Doc View Source ReloadAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Reloads the page. Declaration Task<IResponse> ReloadAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. | Improve this Doc View Source RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(Func<string, bool> url, Action<Route, IRequest> handler) Parameters Type Name Description Func < System.String , System.Boolean > url A fucntion that evaluate the URL match. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(Regex, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(Regex url, Action<Route, IRequest> handler) Parameters Type Name Description Regex url A regex to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(String, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration Task RouteAsync(string url, Action<Route, IRequest> handler) Parameters Type Name Description System.String url A glob pattern to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source ScreenshotAsync(Rect) Takes a screenshot of the page. Declaration Task<byte[]> ScreenshotAsync(Rect clip) Parameters Type Name Description Rect clip Specifies clipping region of the page. Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScreenshotAsync(Boolean) Takes a screenshot of the page. Declaration Task<byte[]> ScreenshotAsync(bool fullPage) Parameters Type Name Description System.Boolean fullPage When true , takes a screenshot of the full scrollable page. Defaults to false . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScreenshotAsync(String, Boolean, Rect, Boolean, Nullable<ScreenshotFormat>, Nullable<Int32>, Nullable<Int32>) Takes a screenshot of the page. Declaration Task<byte[]> ScreenshotAsync(string path = null, bool fullPage = false, Rect clip = null, bool omitBackground = false, ScreenshotFormat? type = null, int? quality = null, int? timeout = null) Parameters Type Name Description System.String path The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk. System.Boolean fullPage When true , takes a screenshot of the full scrollable page. Defaults to false . Rect clip Specifies clipping region of the page. System.Boolean omitBackground Hides default white background and allows capturing screenshots with transparency. Defaults to false . System.Nullable < ScreenshotFormat > type Specify screenshot type, can be either jpeg or png. Defaults to 'png'. System.Nullable < System.Int32 > quality The quality of the image, between 0-100. Not applicable to png images. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source SelectOptionAsync(String, IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, IElementHandle values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params IElementHandle[] values) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, IElementHandle[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, SelectOption values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params SelectOption[] values) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, SelectOption[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration Task<string[]> SelectOptionAsync(string selector, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, string values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, params string[] values) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration Task<string[]> SelectOptionAsync(string selector, string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SetContentAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) Sets the HTML markup to the main frame. Declaration Task SetContentAsync(string html, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String html HTML markup to assign to the page. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the javascript code executing injected the HTML finishes. See Also SetContentAsync ( System.String , System.Nullable < LifecycleEvent >, System.Nullable < System.Int32 >) | Improve this Doc View Source SetExtraHttpHeadersAsync(Dictionary<String, String>) Sets extra HTTP headers that will be sent with every request the page initiates. Declaration Task SetExtraHttpHeadersAsync(Dictionary<string, string> headers) Parameters Type Name Description Dictionary < System.String , System.String > headers Additional http headers to be sent with every request. Returns Type Description Task A that completes when the headers are set. | Improve this Doc View Source SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, FilePayload files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload files The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, string files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String files The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration Task SetInputFilesAsync(string selector, string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetViewportSizeAsync(ViewportSize) In the case of multiple pages in a single browser, each page can have its own viewport size. However, NewContextAsync(BrowserContextOptions) allows to set viewport size (and more) for all pages in the context at once. SetViewportSizeAsync(ViewportSize) will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page. Declaration Task SetViewportSizeAsync(ViewportSize viewportSize) Parameters Type Name Description ViewportSize viewportSize Viewport to set. Returns Type Description Task A that completes when the viewport is set. | Improve this Doc View Source SetViewportSizeAsync(Int32, Int32) In the case of multiple pages in a single browser, each page can have its own viewport size. However, NewContextAsync(BrowserContextOptions) allows to set viewport size (and more) for all pages in the context at once. SetViewportSizeAsync(ViewportSize) will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page. Declaration Task SetViewportSizeAsync(int width, int height) Parameters Type Name Description System.Int32 width Viewport width. System.Int32 height Viewport height. Returns Type Description Task A that completes when the viewport is set. | Improve this Doc View Source TypeAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task TypeAsync(string selector, string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String text A text to type into a focused element. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32) . Examples await page.TypeAsync(\"#mytextarea\", \"Hello\"); // Types instantly await page.TypeAsync(\"#mytextarea\", \"World\", new TypeOptions { Delay = 100 }); // Types slower, like a user | Improve this Doc View Source UncheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration Task UncheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Removes a route created with RouteAsync(Regex, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(Func<string, bool> url, Action<Route, IRequest> handler = null) Parameters Type Name Description Func < System.String , System.Boolean > url A function used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(Regex, Action<Route, IRequest>) Removes a route created with RouteAsync(Regex, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(Regex url, Action<Route, IRequest> handler = null) Parameters Type Name Description Regex url A regex used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(String, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration Task UnrouteAsync(string url, Action<Route, IRequest> handler = null) Parameters Type Name Description System.String url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) Waits for event to fire and passes its value into the predicate function. Declaration Task<T> WaitForEvent<T>(PlaywrightEvent<T> pageEvent, Func<T, bool> predicate = null, int? timeout = null) where T : EventArgs Parameters Type Name Description PlaywrightEvent <T> pageEvent Event to wait for. Func <T, System.Boolean > predicate Receives the event data and resolves when the waiting should resolve. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task <T> A that completes when the predicate returns truthy value. Yielding the information of the event. Type Parameters Name Description T Resulting event args. Examples // wait for console event: var console = await page.WaitForEvent(PageEvent.Console); // wait for popup event: var popup = await page.WaitForEvent(PageEvent.Popup); // wait for dialog event: var dialog = await page.WaitForEvent(PageEvent.Dialog); // wait for request event: var request = await page.WaitForEvent(PageEvent.Request); | Improve this Doc View Source WaitForFunctionAsync(String, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForLoadStateAsync(LifecycleEvent, Nullable<Int32>) Completes when the page reaches a required load state, load by default. The navigation can be in progress when it is called. If navigation is already at a required state, completes immediately. Declaration Task WaitForLoadStateAsync(LifecycleEvent state = LifecycleEvent.Load, int? timeout = null) Parameters Type Name Description LifecycleEvent state Load state to wait for. Defaults to Load . If the state has been already reached while loading current document, the method resolves immediately. System.Nullable < System.Int32 > timeout Maximum waiting time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultNavigationTimeout , DefaultTimeout , DefaultNavigationTimeout or DefaultTimeout properties. Returns Type Description Task A that completes when the load is completed. | Improve this Doc View Source WaitForNavigationAsync(Func<String, Boolean>, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(Func<string, bool> url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Func < System.String , System.Boolean > url Wait for this specific URL that matches the function condition. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(Regex, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(Regex url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Regex url Wait for this specific URL Regex. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForNavigationAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration Task<IResponse> WaitForNavigationAsync(string url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String url Wait for this specific URL. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. Examples var navigationTask = page.WaitForNavigationAsync(); await page.ClickAsync(\"a.my-link\"); await navigationTask; | Improve this Doc View Source WaitForRequestAsync(Func<IRequest, Boolean>, Nullable<Int32>) Waits for a request. Declaration Task<IRequest> WaitForRequestAsync(Func<IRequest, bool> predicate, int? timeout = null) Parameters Type Name Description Func < IRequest , System.Boolean > predicate Function used to evaluate requets. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . | Improve this Doc View Source WaitForRequestAsync(Regex, Nullable<Int32>) Waits for a request. Declaration Task<IRequest> WaitForRequestAsync(Regex url, int? timeout = null) Parameters Type Name Description Regex url Regex to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . Examples var firstRequest = await page.WaitForRequestAsync(new Regex(\"digits\\\\d\\\\.png\"); return firstRequest.Url; | Improve this Doc View Source WaitForRequestAsync(String, Nullable<Int32>) Waits for a request. Declaration Task<IRequest> WaitForRequestAsync(string url, int? timeout = null) Parameters Type Name Description System.String url URL to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . Examples var firstRequest = await page.WaitForRequestAsync(\"http://example.com/resource\"); return firstRequest.Url; | Improve this Doc View Source WaitForResponseAsync(Func<IResponse, Boolean>, Nullable<Int32>) Waits for a response. Declaration Task<IResponse> WaitForResponseAsync(Func<IResponse, bool> predicate, int? timeout = null) Parameters Type Name Description Func < IResponse , System.Boolean > predicate Function used to evaluate requets. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. | Improve this Doc View Source WaitForResponseAsync(Regex, Nullable<Int32>) Waits for a response. Declaration Task<IResponse> WaitForResponseAsync(Regex url, int? timeout = null) Parameters Type Name Description Regex url Regex to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. | Improve this Doc View Source WaitForResponseAsync(String, Nullable<Int32>) Waits for a response. Declaration Task<IResponse> WaitForResponseAsync(string url, int? timeout = null) Parameters Type Name Description System.String url URL to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. Examples var firstResponse = await page.WaitForResponseAsync(\"http://example.com/resource\"); return firstResponse.Url; | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for. System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM. | Improve this Doc View Source WaitForTimeoutAsync(Int32) Waits for a timeout. Declaration Task WaitForTimeoutAsync(int timeout) Parameters Type Name Description System.Int32 timeout Timeout in milliseconds. Returns Type Description Task A that completes when the timeout is reached. Events | Improve this Doc View Source Close Raised when the page closes. Declaration event EventHandler<EventArgs> Close Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Console Raised when JavaScript within the page calls one of console API methods, e.g. console.log or console.dir . Also emitted if the page throws an error or a warning. The arguments passed into console.log appear as arguments on the event handler. Declaration event EventHandler<ConsoleEventArgs> Console Event Type Type Description EventHandler < ConsoleEventArgs > Examples An example of handling Console event: page.Console += (sender, e) => { for (var i = 0; i < e.Message.Args.Count; ++i) { System.Console.WriteLine($\"{i}: {e.Message.Args[i]}\"); } } | Improve this Doc View Source Crash Raised when the page crashes. Declaration event EventHandler<EventArgs> Crash Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Dialog Raised when a JavaScript dialog appears, such as alert , prompt , confirm or beforeunload . PlaywrightSharp can respond to the dialog via Dialog 's AcceptAsync(String) or DismissAsync() methods. Declaration event EventHandler<DialogEventArgs> Dialog Event Type Type Description EventHandler < DialogEventArgs > | Improve this Doc View Source DOMContentLoaded The JavaScript DOMContentLoaded https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded event Declaration event EventHandler<EventArgs> DOMContentLoaded Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Download Emitted when attachment download started. User can access basic file operations on downloaded content via the passed Download instance. Declaration event EventHandler<DownloadEventArgs> Download Event Type Type Description EventHandler < DownloadEventArgs > | Improve this Doc View Source FileChooser Raised when a file chooser is supposed to appear, such as after clicking the <input type=file> `. Playwright can respond to it via setting the input files using SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) . Declaration event EventHandler<FileChooserEventArgs> FileChooser Event Type Type Description EventHandler < FileChooserEventArgs > | Improve this Doc View Source FrameAttached Raised when a frame is attached. Declaration event EventHandler<FrameEventArgs> FrameAttached Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source FrameDetached Raised when a frame is detached. Declaration event EventHandler<FrameEventArgs> FrameDetached Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source FrameNavigated Raised when a frame is navigated to a new url. Declaration event EventHandler<FrameEventArgs> FrameNavigated Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source Load Raised when the JavaScript load https://developer.mozilla.org/en-US/docs/Web/Events/load event is dispatched. Declaration event EventHandler<EventArgs> Load Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source PageError Raised when an uncaught exception happens within the page. Declaration event EventHandler<PageErrorEventArgs> PageError Event Type Type Description EventHandler < PageErrorEventArgs > | Improve this Doc View Source Popup Emitted when the page opens a new tab or window. Declaration event EventHandler<PopupEventArgs> Popup Event Type Type Description EventHandler < PopupEventArgs > Examples var popupTargetCompletion = new TaskCompletionSource<IPage>(); page.Popup += (sender, e) => popupTargetCompletion.SetResult(e.Page); await Task.WhenAll( popupTargetCompletion.Task, page.ClickAsync('a[target=_blank]') ); | Improve this Doc View Source Request Raised when a page issues a request. The IRequest object is read-only. Declaration event EventHandler<RequestEventArgs> Request Event Type Type Description EventHandler < RequestEventArgs > | Improve this Doc View Source RequestFailed Raised when a request fails, for example by timing out. Declaration event EventHandler<RequestFailedEventArgs> RequestFailed Event Type Type Description EventHandler < RequestFailedEventArgs > | Improve this Doc View Source RequestFinished Raised when a request finishes successfully. Declaration event EventHandler<RequestEventArgs> RequestFinished Event Type Type Description EventHandler < RequestEventArgs > | Improve this Doc View Source Response Raised when a IResponse is received. Declaration event EventHandler<ResponseEventArgs> Response Event Type Type Description EventHandler < ResponseEventArgs > Examples An example of handling IResponse event: var tcs = new TaskCompletionSource<string>(); page.Response += async(sender, e) => { if (e.Response.Url.Contains(\"script.js\")) { tcs.TrySetResult(await e.Response.TextAsync()); } }; await Task.WhenAll( page.GoToAsync(TestConstants.ServerUrl + \"/grid.html\"), tcs.Task); Console.WriteLine(await tcs.Task); | Improve this Doc View Source Worker Raised when a dedicated WebWorker ( https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API ) is spawned by the page. Declaration event EventHandler<WorkerEventArgs> Worker Event Type Type Description EventHandler < WorkerEventArgs >"
  },
  "api/PlaywrightSharp.DialogEventArgs.html": {
    "href": "api/PlaywrightSharp.DialogEventArgs.html",
    "title": "Class DialogEventArgs | Playwright Sharp",
    "keywords": "Class DialogEventArgs Dialog arguments. Inheritance System.Object DialogEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class DialogEventArgs : EventArgs Constructors | Improve this Doc View Source DialogEventArgs(IDialog) Initializes a new instance of the DialogEventArgs class. Declaration public DialogEventArgs(IDialog dialog) Parameters Type Name Description IDialog dialog Dialog. Properties | Improve this Doc View Source Dialog Dialog data. Declaration public IDialog Dialog { get; } Property Value Type Description IDialog"
  },
  "examples/index.html": {
    "href": "examples/index.html",
    "title": "🎭 Playwright for .NET | Playwright Sharp",
    "keywords": "🎭 Playwright for .NET PlaywrightSharp is a .Net library to automate Chromium , Firefox and WebKit browsers with a single API. Playwright delivers automation that is ever-green , capable , reliable and fast . See how Playwright is better . Take screenshots await Playwright.InstallAsync(); var playwright = await Playwright.CreateAsync(); await using var browser = await playwright.Chromium.LaunchAsync(headless: false); var page = await browser.NewPageAsync(); await page.GoToAsync(\"http://www.google.com\"); await page.ScreenshotAsync(path: outputFile); You can also change the view port before generating the screenshot await page.SetViewportSizeAsync(width: 500, height: 500); Generate PDF files await Playwright.InstallAsync(); var playwright = await Playwright.CreateAsync(); await using var browser = await playwright.Chromium.LaunchAsync(headless: true); var page = await browser.NewPageAsync(); await page.GoToAsync(\"http://www.google.com\"); await page.GetPdfAsync(path: outputFile); Inject HTML var page = await browser.NewPageAsync(); await page.SetContentAsync(\"<div>My Receipt</div>\"); var result = await page.GetContentAsync(); await page.GetPdfAsync(outputFile); SaveHtmlToDB(result); Evaluate Javascript var page = await browser.NewPageAsync(); var seven = await page.EvaluateAsync<int>(\"4 + 3\"); var someObject = await page.EvaluateAsync<dynamic>(\"(value) => ({a: value})\", 5); Console.WriteLine(someObject.a); Wait For Selector var page = await browser.NewPageAsync(); await page.GoToAsync(\"http://www.spapage.com\"); await page.WaitForSelectorAsync(\"div.main-content\"); await page.GetPdfAsync(outputFile); Wait For Function var page = await Browser.NewPageAsync(); await page.GoToAsync(\"http://www.spapage.com\"); var watchDog = page.WaitForFunctionAsync(\" () => window.innerWidth < 100\"); await page.SetViewportSizeAsync(width: 50, height: 50); await watchDog; Connect to a remote browser var options = new ConnectOptions() { BrowserWSEndpoint = }; var url = \"https://www.google.com/\"; await using (var browser = await playwright.Chromium.ConnectAsync($\"wss://www.externalbrowser.io?token={apikey}\")) { var page = await browser.NewPageAsync(); await page.GoToAsync(url); await page.GetPdfAsync(\"wot.pdf\"); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Playwright Sharp",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Playwright Sharp",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "examples/Page.ScreenshotAsync.html": {
    "href": "examples/Page.ScreenshotAsync.html",
    "title": "How to take screenshots | Playwright Sharp",
    "keywords": "How to take screenshots Contributors: Meir Blachman Problem You need to take an screenshot of a page. Solution Use Page.ScreenshotAsync passing a file path as an argument. await Playwright.InstallAsync(); var playwright = await Playwright.CreateAsync(); var url = \"https://www.somepage.com\"; var file = \".\\\\somepage.jpg\"; await using IBrowser browser = await playwright.Chromium.LaunchAsync(headless: false); var page = await browser.NewPageAsync(); await page.GoToAsync(url); await page.ScreenshotAsync(path: file);"
  },
  "api/PlaywrightSharp.Transport.MessageReceivedEventArgs.html": {
    "href": "api/PlaywrightSharp.Transport.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs | Playwright Sharp",
    "keywords": "Class MessageReceivedEventArgs Message received event arguments. MessageReceived . Inheritance System.Object MessageReceivedEventArgs Namespace : PlaywrightSharp.Transport Assembly : PlaywrightSharp.dll Syntax public class MessageReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source MessageReceivedEventArgs(String) Initializes a new instance of the MessageReceivedEventArgs class. Declaration public MessageReceivedEventArgs(string message) Parameters Type Name Description System.String message Message. Properties | Improve this Doc View Source Message Transport message. Declaration public string Message { get; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.FrameNavigatedEventArgs.html": {
    "href": "api/PlaywrightSharp.FrameNavigatedEventArgs.html",
    "title": "Class FrameNavigatedEventArgs | Playwright Sharp",
    "keywords": "Class FrameNavigatedEventArgs See Navigated . Inheritance System.Object FrameNavigatedEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class FrameNavigatedEventArgs : EventArgs Properties | Improve this Doc View Source Error Navigation Error. Declaration public string Error { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Frame name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Frame URL. Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.SetNetworkCookieParam.html": {
    "href": "api/PlaywrightSharp.SetNetworkCookieParam.html",
    "title": "Class SetNetworkCookieParam | Playwright Sharp",
    "keywords": "Class SetNetworkCookieParam Cookie set data. Inheritance System.Object SetNetworkCookieParam Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class SetNetworkCookieParam : object Properties | Improve this Doc View Source Domain Gets or sets the domain. Declaration public string Domain { get; set; } Property Value Type Description System.String The domain. | Improve this Doc View Source Expires Gets or sets the expiration. Unix time in seconds. Declaration public decimal? Expires { get; set; } Property Value Type Description System.Nullable < System.Decimal > Expiration. | Improve this Doc View Source HttpOnly Gets or sets if it's HTTP only. Declaration public bool? HttpOnly { get; set; } Property Value Type Description System.Nullable < System.Boolean > Whether it's http only or not. | Improve this Doc View Source Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String The name. | Improve this Doc View Source Path Gets or sets the path. Declaration public string Path { get; set; } Property Value Type Description System.String The path. | Improve this Doc View Source SameSite Gets or sets the cookies SameSite value. Declaration public SameSite SameSite { get; set; } Property Value Type Description SameSite | Improve this Doc View Source Secure Gets or sets if it's secure. Declaration public bool? Secure { get; set; } Property Value Type Description System.Nullable < System.Boolean > Whether it's secure or not. | Improve this Doc View Source Url Gets or sets the URL. Declaration public string Url { get; set; } Property Value Type Description System.String The URL. | Improve this Doc View Source Value Gets or sets the value. Declaration public string Value { get; set; } Property Value Type Description System.String The value. See Also AddCookiesAsync ( SetNetworkCookieParam []) GetCookiesAsync ( System.String [])"
  },
  "api/PlaywrightSharp.PaperFormat.html": {
    "href": "api/PlaywrightSharp.PaperFormat.html",
    "title": "Class PaperFormat | Playwright Sharp",
    "keywords": "Class PaperFormat Paper format. Inheritance System.Object PaperFormat Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PaperFormat : IEquatable<PaperFormat> Constructors | Improve this Doc View Source PaperFormat(Decimal, Decimal) Initializes a new instance of the PaperFormat class. Declaration public PaperFormat(decimal width, decimal height) Parameters Type Name Description System.Decimal width Page width in inches. System.Decimal height Page height in inches. Properties | Improve this Doc View Source A0 A0: 33.1 inches by 46.8 inches. Declaration public static PaperFormat A0 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A1 A1: 23.4 inches by 33.1 inches. Declaration public static PaperFormat A1 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A2 A2: 16.5 inches by 23.4 inches. Declaration public static PaperFormat A2 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A3 A3: 11.7 inches by 16.5 inches. Declaration public static PaperFormat A3 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A4 A4: 8.27 inches by 11.7 inches. Declaration public static PaperFormat A4 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A5 A5: 5.83 inches by 8.27 inches. Declaration public static PaperFormat A5 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source A6 A6: 4.13 inches by 5.83 inches. Declaration public static PaperFormat A6 { get; } Property Value Type Description PaperFormat | Improve this Doc View Source Height Page height in inches. Declaration public decimal Height { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source Ledger Ledger: 17 inches by 11 inches. Declaration public static PaperFormat Ledger { get; } Property Value Type Description PaperFormat | Improve this Doc View Source Legal Legal: 8.5 inches by 14 inches. Declaration public static PaperFormat Legal { get; } Property Value Type Description PaperFormat | Improve this Doc View Source Letter Letter: 8.5 inches x 11 inches. Declaration public static PaperFormat Letter { get; } Property Value Type Description PaperFormat | Improve this Doc View Source Tabloid Tabloid: 11 inches by 17 inches. Declaration public static PaperFormat Tabloid { get; } Property Value Type Description PaperFormat | Improve this Doc View Source Width Page width in inches. Declaration public decimal Width { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(PaperFormat) Checks for object equality. Declaration public bool Equals(PaperFormat other) Parameters Type Name Description PaperFormat other Format to check. Returns Type Description System.Boolean Whether the objects are equal or not. | Improve this Doc View Source Equals(Object) Checks for object equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Format to check. Returns Type Description System.Boolean Whether the objects are equal or not. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(PaperFormat, PaperFormat) Declaration public static bool operator ==(PaperFormat left, PaperFormat right) Parameters Type Name Description PaperFormat left PaperFormat right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PaperFormat, PaperFormat) Declaration public static bool operator !=(PaperFormat left, PaperFormat right) Parameters Type Name Description PaperFormat left PaperFormat right Returns Type Description System.Boolean See Also GetPdfAsync ( System.String , System.Decimal , System.Boolean , System.String , System.String , System.Boolean , System.Boolean , System.String , PaperFormat , System.String , System.String , Margin , System.Boolean )"
  },
  "api/PlaywrightSharp.Chromium.CDPSession.html": {
    "href": "api/PlaywrightSharp.Chromium.CDPSession.html",
    "title": "Class CDPSession | Playwright Sharp",
    "keywords": "Class CDPSession Base Channel owner class. Inheritance System.Object ChannelOwnerBase CDPSession Implements ICDPSession Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public class CDPSession : ChannelOwnerBase, IChannelOwner<CDPSession>, IChannelOwner, ICDPSession Methods | Improve this Doc View Source DetachAsync() Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages. Declaration public Task DetachAsync() Returns Type Description Task A that completes when the message was confirmed by the browser session. | Improve this Doc View Source SendAsync(String, Object) Make a method call to the browser session. Declaration public Task<JsonElement? > SendAsync(string method, object args = null) Parameters Type Name Description System.String method Method name. System.Object args Arguments. Returns Type Description Task < System.Nullable < JsonElement >> A that completes when the message was confirmed by the browser session, yielding the result. | Improve this Doc View Source SendAsync<T>(String, Object) Make a method call to the browser session. Declaration public Task<T> SendAsync<T>(string method, object args = null) Parameters Type Name Description System.String method Method name. System.Object args Arguments. Returns Type Description Task <T> A that completes when the message was confirmed by the browser session, yielding the result. Type Parameters Name Description T Return type. Events | Improve this Doc View Source MessageReceived Raised when a new message is received. Declaration public event EventHandler<CDPEventArgs> MessageReceived Event Type Type Description EventHandler < CDPEventArgs > Implements ICDPSession"
  },
  "api/PlaywrightSharp.FileChooserEventArgs.html": {
    "href": "api/PlaywrightSharp.FileChooserEventArgs.html",
    "title": "Class FileChooserEventArgs | Playwright Sharp",
    "keywords": "Class FileChooserEventArgs see FileChooser arguments. Inheritance System.Object FileChooserEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class FileChooserEventArgs : EventArgs Constructors | Improve this Doc View Source FileChooserEventArgs(IPage, IElementHandle, Boolean) Initializes a new instance of the FileChooserEventArgs class. Declaration public FileChooserEventArgs(IPage page, IElementHandle element, bool multiple) Parameters Type Name Description IPage page The page this file chooser belongs to. IElementHandle element The input element. System.Boolean multiple The multiple option. Properties | Improve this Doc View Source Element Handle to the input element that was clicked. Declaration public IElementHandle Element { get; set; } Property Value Type Description IElementHandle | Improve this Doc View Source IsMultiple Whether file chooser allow for multiple file selection. Declaration public bool IsMultiple { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Page The page this file chooser belongs to. Declaration public IPage Page { get; set; } Property Value Type Description IPage Methods | Improve this Doc View Source SetFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetFilesAsync(FilePayload file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload file The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. | Improve this Doc View Source SetFilesAsync(FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetFilesAsync(FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. | Improve this Doc View Source SetFilesAsync(String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the file are relative paths, then they are resolved relative to the . Declaration public Task SetFilesAsync(string file, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String file The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set. | Improve this Doc View Source SetFilesAsync(String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetFilesAsync(string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the files are successfully set."
  },
  "api/PlaywrightSharp.Page.html": {
    "href": "api/PlaywrightSharp.Page.html",
    "title": "Class Page | Playwright Sharp",
    "keywords": "Class Page Inheritance System.Object ChannelOwnerBase Page Implements IPage Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Page : ChannelOwnerBase, IChannelOwner<Page>, IChannelOwner, IPage Properties | Improve this Doc View Source Accessibility Gets the accessibility. Declaration public IAccessibility Accessibility { get; } Property Value Type Description IAccessibility | Improve this Doc View Source BrowserContext Declaration public BrowserContext BrowserContext { get; set; } Property Value Type Description BrowserContext | Improve this Doc View Source Coverage Browser-specific Coverage implementation, only available for Chromium atm. Declaration public ICoverage Coverage { get; } Property Value Type Description ICoverage | Improve this Doc View Source DefaultNavigationTimeout Maximum navigation time in milliseconds. Declaration public int DefaultNavigationTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DefaultTimeout This setting will change the default maximum time for all the methods accepting timeout option. Declaration public int DefaultTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Frames Gets all frames attached to the page. Declaration public IFrame[] Frames { get; } Property Value Type Description IFrame [] | Improve this Doc View Source IsClosed Get an indication that the page has been closed. Declaration public bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Keyboard Gets this page's keyboard. Declaration public IKeyboard Keyboard { get; } Property Value Type Description IKeyboard | Improve this Doc View Source MainFrame Declaration public Frame MainFrame { get; } Property Value Type Description Frame | Improve this Doc View Source Mouse Gets this page's mouse. Declaration public IMouse Mouse { get; } Property Value Type Description IMouse | Improve this Doc View Source Url Shortcut for MainFrame.Url. Declaration public string Url { get; } Property Value Type Description System.String | Improve this Doc View Source ViewportSize Page Viewport. Declaration public ViewportSize ViewportSize { get; } Property Value Type Description ViewportSize | Improve this Doc View Source Workers Gets all workers in the page. Declaration public IEnumerable<IWorker> Workers { get; } Property Value Type Description IEnumerable < IWorker > Methods | Improve this Doc View Source AddInitScriptAsync(String, Object[], String, String) Adds a script which would be evaluated in one of the following scenarios: Whenever a page is created in the browser context or is navigated. Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame. Declaration public Task AddInitScriptAsync(string script = null, object[] arg = null, string path = null, string content = null) Parameters Type Name Description System.String script Script to be evaluated in all pages in the browser context or script path. System.Object [] arg Optional argument to pass to script . System.String path Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to . System.String content Gets or sets the raw JavaScript content to be injected into frame. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source AddScriptTagAsync(String, String, String, String) Adds a <script> tag into the page with the desired url or content. Declaration public Task<IElementHandle> AddScriptTagAsync(string url = null, string path = null, string content = null, string type = null) Parameters Type Name Description System.String url URL of a script to be added. System.String path Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw JavaScript content to be injected into frame. System.String type Script type. Use 'module' in order to load a Javascript ES6 module. Returns Type Description Task < IElementHandle > A that completes when the tag is added, yielding the added tag as an IElementHandle when the script's onload fires or when the script content was injected into frame. Remarks Shortcut for page.MainFrame.AddScriptTagAsync(options) . | Improve this Doc View Source AddStyleTagAsync(String, String, String) Adds a <link rel=\"stylesheet\"> tag into the page with the desired url or a <link rel=\"stylesheet\"> tag with the content. Declaration public Task<IElementHandle> AddStyleTagAsync(string url = null, string path = null, string content = null) Parameters Type Name Description System.String url URL of the link tag. System.String path Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw CSS content to be injected into frame. Returns Type Description Task < IElementHandle > A that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added IElementHandle . | Improve this Doc View Source BringToFrontAsync() Brings page to front (activates tab). Declaration public Task BringToFrontAsync() Returns Type Description Task A that completes when the message was confirmed by the browser. | Improve this Doc View Source CheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task CheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to click in the center of the element. Declaration public Task ClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, int clickCount = 1, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . System.Int32 clickCount Click count. Defaults to 1. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully clicked. | Improve this Doc View Source CloseAsync(Boolean) Closes the page. Declaration public Task CloseAsync(bool runBeforeUnload = false) Parameters Type Name Description System.Boolean runBeforeUnload Defaults to false . Whether to run the beforeunload page handlers. Returns Type Description Task A that completes when the close process finishes. | Improve this Doc View Source DblClickAsync(String, Int32, MouseButton, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to double click in the center of the element. Declaration public Task DblClickAsync(string selector, int delay = 0, MouseButton button = MouseButton.Left, Modifier[] modifiers = null, Point? position = null, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. System.Int32 delay Time to wait between mousedown and mouseup in milliseconds. Defaults to 0. MouseButton button Button to click. Details to Left . Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Nullable < Point > position A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element matching selector is successfully double clicked. | Improve this Doc View Source DispatchEventAsync(String, String, Object, Nullable<Int32>) Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element. Events are composed, cancelable and bubble by default. Declaration public Task DispatchEventAsync(string selector, string type, object eventInit = null, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used. System.String type DOM event type: \"click\", \"dragstart\", etc. System.Object eventInit Event-specific initialization properties. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the event was dispatched. | Improve this Doc View Source EmulateMediaAsync() Setup media emulation. Declaration public Task EmulateMediaAsync() Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<ColorScheme>) Setup media emulation. Declaration public Task EmulateMediaAsync(ColorScheme? colorScheme) Parameters Type Name Description System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<MediaType>) Setup media emulation. Declaration public Task EmulateMediaAsync(MediaType? media) Parameters Type Name Description System.Nullable < MediaType > media Changes the CSS media type of the page. Passing null disables CSS media emulation. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) Setup media emulation. Declaration public Task EmulateMediaAsync(MediaType? media, ColorScheme? colorScheme) Parameters Type Name Description System.Nullable < MediaType > media Changes the CSS media type of the page. Passing null disables CSS media emulation. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration public Task EvalOnSelectorAllAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration public Task EvalOnSelectorAllAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAllAsync<T>(String, String, Object) This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction. Declaration public Task<T> EvalOnSelectorAllAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task EvalOnSelectorAsync(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task EvalOnSelectorAsync(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task A that completes when the script finishes or the promise is resolved, yielding the result of the script. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvalOnSelectorAsync<T>(String, String, Object) This method runs document.querySelector within the page and passes it as the first argument to pageFunction. If there's no element matching selector, the method throws an error. Declaration public Task<T> EvalOnSelectorAsync<T>(string selector, string pageFunction, object arg) Parameters Type Name Description System.String selector A selector to query page for. System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Result type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. | Improve this Doc View Source EvaluateAsync(String) Executes a script in browser context. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < System.Nullable < JsonElement >> Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String ) | Improve this Doc View Source EvaluateAsync(String, Object) Executes a script in browser context. Declaration public Task<JsonElement? > EvaluateAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task < System.Nullable < JsonElement >> Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync ( System.String , System.Object ) | Improve this Doc View Source EvaluateAsync<T>(String) Executes a script in browser context. Declaration public Task<T> EvaluateAsync<T>(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String ) | Improve this Doc View Source EvaluateAsync<T>(String, Object) Executes a script in browser context. Declaration public Task<T> EvaluateAsync<T>(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Arguments to pass to script. Returns Type Description Task <T> A that completes when the script finishes or the promise is resolved, yielding the result of the script. Type Parameters Name Description T Return type. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. See Also EvaluateAsync<T> ( System.String , System.Object ) | Improve this Doc View Source EvaluateHandleAsync(String) Executes a script in browser context. Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. Returns Type Description Task < IJSHandle > A that completes when function is executed, yielding the return value. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source EvaluateHandleAsync(String, Object) Executes a script in browser context. Declaration public Task<IJSHandle> EvaluateHandleAsync(string pageFunction, object arg) Parameters Type Name Description System.String pageFunction Script to be evaluated in browser context. System.Object arg Function arguments. Returns Type Description Task < IJSHandle > A that completes when function is executed, yielding the return value. Remarks If the script, returns a Promise, then the method would wait for the promise to resolve and return its value. IJSHandle instances can be passed as arguments. | Improve this Doc View Source ExposeBindingAsync(String, Action<BindingSource>) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightBinding in C# and returns a which resolves when playwrightBinding completes. Declaration public Task ExposeBindingAsync(string name, Action<BindingSource> playwrightBinding) Parameters Type Name Description System.String name Name of the function on the window object. Action < BindingSource > playwrightBinding Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightBinding returns a , it will be awaited. Functions installed via ExposeBindingAsync(String, Action<BindingSource>) survive navigations. | Improve this Doc View Source ExposeBindingAsync<T>(String, Action<BindingSource, T>) Declaration public Task ExposeBindingAsync<T>(string name, Action<BindingSource, T> playwrightFunction) Parameters Type Name Description System.String name Action < BindingSource , T> playwrightFunction Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) Declaration public Task ExposeBindingAsync<TResult>(string name, Func<BindingSource, TResult> playwrightFunction) Parameters Type Name Description System.String name Func < BindingSource , TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description TResult | Improve this Doc View Source ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) Declaration public Task ExposeBindingAsync<T, TResult>(string name, Func<BindingSource, T, TResult> playwrightFunction) Parameters Type Name Description System.String name Func < BindingSource , T, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, TResult>(string name, Func<BindingSource, T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, T3, TResult>(string name, Func<BindingSource, T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, T3, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) Declaration public Task ExposeBindingAsync<T1, T2, T3, T4, TResult>(string name, Func<BindingSource, T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Func < BindingSource , T1, T2, T3, T4, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source ExposeFunctionAsync(String, Action) The method adds a function called name on the window object of every frame in every page in the context. When called, the function executes playwrightFunction in C# and returns a which resolves when playwrightFunction completes. Declaration public Task ExposeFunctionAsync(string name, Action playwrightFunction) Parameters Type Name Description System.String name Name of the function on the window object. Action playwrightFunction Callback function which will be called in Playwright's context. Returns Type Description Task Task. Remarks If the playwrightFunction returns a , it will be awaited. Functions installed via ExposeFunctionAsync(String, Action) survive navigations. | Improve this Doc View Source ExposeFunctionAsync<T>(String, Action<T>) Declaration public Task ExposeFunctionAsync<T>(string name, Action<T> playwrightFunction) Parameters Type Name Description System.String name Action <T> playwrightFunction Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ExposeFunctionAsync<TResult>(String, Func<TResult>) Declaration public Task ExposeFunctionAsync<TResult>(string name, Func<TResult> playwrightFunction) Parameters Type Name Description System.String name Func <TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description TResult | Improve this Doc View Source ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) Declaration public Task ExposeFunctionAsync<T, TResult>(string name, Func<T, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, TResult>(string name, Func<T1, T2, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, T3, TResult>(string name, Func<T1, T2, T3, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, T3, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) Declaration public Task ExposeFunctionAsync<T1, T2, T3, T4, TResult>(string name, Func<T1, T2, T3, T4, TResult> playwrightFunction) Parameters Type Name Description System.String name Func <T1, T2, T3, T4, TResult> playwrightFunction Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source FillAsync(String, String, Nullable<Int32>, Nullable<Boolean>) This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error. Shortcut for MainFrame.FillAsync. Declaration public Task FillAsync(string selector, string value, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String value Value to fill for the <input>, <textarea> or [contenteditable] element System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. Returns Type Description Task A that completes when the fill action is done. | Improve this Doc View Source FocusAsync(String, Nullable<Int32>) Fetches an element with selector and focuses it. Declaration public Task FocusAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the the element matching selector is successfully focused. | Improve this Doc View Source GetAttributeAsync(String, String, Nullable<Int32>) Returns element attribute value. Declaration public Task<string> GetAttributeAsync(string selector, string name, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.String name Attribute name to get the value for. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the value or the attribute. | Improve this Doc View Source GetContentAsync() Gets the full HTML contents of the page, including the doctype. Declaration public Task<string> GetContentAsync() Returns Type Description Task < System.String > A that completes when the evaluation is completed, yielding the HTML content. | Improve this Doc View Source GetFrame(Func<String, Boolean>) Returns frame matching the specified criteria. Declaration public IFrame GetFrame(Func<string, bool> url) Parameters Type Name Description Func < System.String , System.Boolean > url A function receiving the framn's URL. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetFrame(Regex) Returns frame matching the specified criteria. Declaration public IFrame GetFrame(Regex url) Parameters Type Name Description Regex url Regex pattern. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetFrame(String, String) Returns frame matching the specified criteria. Declaration public IFrame GetFrame(string name = null, string url = null) Parameters Type Name Description System.String name Frame name specified in the iframe's name attribute. System.String url A glob pattern. Returns Type Description IFrame The IFrame matching the condition if found. | Improve this Doc View Source GetInnerHtmlAsync(String, Nullable<Int32>) Resolves to the element.innerHTML. Declaration public Task<string> GetInnerHtmlAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element. | Improve this Doc View Source GetInnerTextAsync(String, Nullable<Int32>) Resolves to the element.innerText. Declaration public Task<string> GetInnerTextAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the innerText of the element. | Improve this Doc View Source GetOpenerAsync() Returns the opener for popup pages and null for others. Declaration public Task<IPage> GetOpenerAsync() Returns Type Description Task < IPage > A that completes when the opener is resolved, yielding the opener IPage . Remarks If the opener has been closed already the task may resolve to null . | Improve this Doc View Source GetPdfAsync(String, Decimal, Boolean, String, String, Boolean, Boolean, String, PaperFormat, String, String, Margin, Boolean) generates a pdf of the page with Print css media. To generate a pdf with Screen media call EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) with Screen . Declaration public Task<byte[]> GetPdfAsync(string path = \"\", decimal scale = null, bool displayHeaderFooter = false, string headerTemplate = \"\", string footerTemplate = \"\", bool printBackground = false, bool landscape = false, string pageRanges = \"\", PaperFormat format = null, string width = null, string height = null, Margin margin = null, bool preferCSSPageSize = false) Parameters Type Name Description System.String path The file path to save the PDF to. paths are resolved using . System.Decimal scale Scale of the webpage rendering. Defaults to 1 . Scale amount must be between 0.1 and 2. System.Boolean displayHeaderFooter Display header and footer. Defaults to false . System.String headerTemplate HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date - formatted print date title - document title url - document location pageNumber - current page number totalPages - total pages in the document. System.String footerTemplate HTML template for the print footer. Should be valid HTML markup with following classes used to inject printing values into them: date - formatted print date title - document title url - document location pageNumber - current page number totalPages - total pages in the document. System.Boolean printBackground Print background graphics. Defaults to false . System.Boolean landscape Paper orientation.. Defaults to false . System.String pageRanges Paper ranges to print, e.g., 1-5, 8, 11-13 . Defaults to the empty string, which means print all pages. PaperFormat format Paper format. If set, takes priority over width and height . System.String width Paper width, accepts values labeled with units. System.String height Paper height, accepts values labeled with units. Margin margin Paper margins, defaults to none. System.Boolean preferCSSPageSize Give any CSS @page size declared in the page priority over what is declared in width and height or format options. Defaults to false , which will scale the content to fit the paper size. Returns Type Description Task < System.Byte []> A that completes when the PDF was generated. Remarks Generating a pdf is currently only supported in Chrome headless. | Improve this Doc View Source GetTextContentAsync(String, Nullable<Int32>) Resolves to the element.textContent. Declaration public Task<string> GetTextContentAsync(string selector, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.String > A that completes when the attribute was evaluated (or timeout), yielding the textContent of the element. | Improve this Doc View Source GetTitleAsync() Returns page's title. Declaration public Task<string> GetTitleAsync() Returns Type Description Task < System.String > A the completes when the title is resolved, yielding the page's title. | Improve this Doc View Source GoBackAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Navigate to the previous page in history. Declaration public Task<IResponse> GoBackAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go back, resolves to null. | Improve this Doc View Source GoForwardAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Navigate to the next page in history. Declaration public Task<IResponse> GoForwardAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go forward, resolves to null. | Improve this Doc View Source GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) Navigates to an URL. Declaration public Task<IResponse> GoToAsync(string url, LifecycleEvent? waitUntil = null, string referer = null, int? timeout = null) Parameters Type Name Description System.String url URL to navigate page to. The url should include scheme, e.g. https://. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.String referer Referer header value. If provided it will take prefrence over the referer header value set by . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > A that completes with resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. Remarks GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will throw an error if: There's an SSL error (e.g. in case of self-signed certificates). Target URL is invalid. The timeout is exceeded during navigation. The remote server does not respond or is unreachable. The main resource failed to load. GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling response.status(). NOTE GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) either throws an error or returns a main resource response. The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null. NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue. Shortcut for GoToAsync(String, Nullable<LifecycleEvent>, String, Nullable<Int32>) . | Improve this Doc View Source HoverAsync(String, Nullable<Point>, Modifier[], Boolean, Nullable<Int32>) Fetches an element with selector , scrolls it into view if needed, and then uses Mouse to hover over the center of the element. Declaration public Task HoverAsync(string selector, Point? position = null, Modifier[] modifiers = null, bool force = false, int? timeout = null) Parameters Type Name Description System.String selector A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered. System.Nullable < Point > position A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element. Modifier [] modifiers Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. System.Boolean force Whether to bypass the actionability checks. Defaults to false. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task A that completes when the element matching selector is successfully hovered. | Improve this Doc View Source PressAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Focuses the element, and then sends a keydown , keypress / input , and keyup event for each character in the text. Declaration public Task PressAsync(string selector, string key, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String key Name of the key to press or a character to generate, such as ArrowLeft or a . System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. | Improve this Doc View Source QuerySelectorAllAsync(String) The method runs Array.from(document.querySelectorAll(selector)) within the page. Declaration public Task<IEnumerable<IElementHandle>> QuerySelectorAllAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IEnumerable < IElementHandle >> A that completes when the javascript function finishes, yielding an array of IElementHandle . | Improve this Doc View Source QuerySelectorAsync(String) The method runs document.querySelector within the page. If no element matches the selector, the return value resolve to null . Declaration public Task<IElementHandle> QuerySelectorAsync(string selector) Parameters Type Name Description System.String selector A selector to query page for. Returns Type Description Task < IElementHandle > A that completes when the javascript function finishes, yielding an IElementHandle . | Improve this Doc View Source ReloadAsync(Nullable<Int32>, Nullable<LifecycleEvent>) Reloads the page. Declaration public Task<IResponse> ReloadAsync(int? timeout = null, LifecycleEvent? waitUntil = null) Parameters Type Name Description System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . Returns Type Description Task < IResponse > A that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. | Improve this Doc View Source RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(Func<string, bool> url, Action<Route, IRequest> handler) Parameters Type Name Description Func < System.String , System.Boolean > url A fucntion that evaluate the URL match. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(Regex, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(Regex url, Action<Route, IRequest> handler) Parameters Type Name Description Regex url A regex to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source RouteAsync(String, Action<Route, IRequest>) Routing provides the capability to modify network requests that are made by a page. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted. Declaration public Task RouteAsync(string url, Action<Route, IRequest> handler) Parameters Type Name Description System.String url A glob pattern to match while routing. Action < Route , IRequest > handler Handler function to route the request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source ScreenshotAsync(Rect) Takes a screenshot of the page. Declaration public Task<byte[]> ScreenshotAsync(Rect clip) Parameters Type Name Description Rect clip Specifies clipping region of the page. Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScreenshotAsync(Boolean) Takes a screenshot of the page. Declaration public Task<byte[]> ScreenshotAsync(bool fullPage) Parameters Type Name Description System.Boolean fullPage When true , takes a screenshot of the full scrollable page. Defaults to false . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source ScreenshotAsync(String, Boolean, Rect, Boolean, Nullable<ScreenshotFormat>, Nullable<Int32>, Nullable<Int32>) Takes a screenshot of the page. Declaration public Task<byte[]> ScreenshotAsync(string path = null, bool fullPage = false, Rect clip = null, bool omitBackground = false, ScreenshotFormat? type = null, int? quality = null, int? timeout = null) Parameters Type Name Description System.String path The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk. System.Boolean fullPage When true , takes a screenshot of the full scrollable page. Defaults to false . Rect clip Specifies clipping region of the page. System.Boolean omitBackground Hides default white background and allows capturing screenshots with transparency. Defaults to false . System.Nullable < ScreenshotFormat > type Specify screenshot type, can be either jpeg or png. Defaults to 'png'. System.Nullable < System.Int32 > quality The quality of the image, between 0-100. Not applicable to png images. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < System.Byte []> A that completes when the screenshot is done, yielding the screenshot as a . | Improve this Doc View Source SelectOptionAsync(String, IElementHandle, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, IElementHandle values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params IElementHandle[] values) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, IElementHandle[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, IElementHandle[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. IElementHandle [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, SelectOption values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params SelectOption[] values) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, SelectOption[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, SelectOption[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. SelectOption [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all, unselecting all the selected elements. Declaration public Task<string[]> SelectOptionAsync(string selector, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, string values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String values Value to select. If the <select> has the multiple attribute. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[]) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, params string[] values) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SelectOptionAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Triggers a change and input event once all the provided options have been selected. If there's no <select> element matching selector, the method throws an error. Declaration public Task<string[]> SelectOptionAsync(string selector, string[] values, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to query page for. System.String [] values Values of options to select. If the <select> has the multiple attribute, all values are considered, otherwise only the first one is taken into account. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task < System.String []> A the completes when the value have been selected, yielding an array of option values that have been successfully selected. | Improve this Doc View Source SetContentAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) Sets the HTML markup to the main frame. Declaration public Task SetContentAsync(string html, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String html HTML markup to assign to the page. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task A that completes when the javascript code executing injected the HTML finishes. See Also SetContentAsync ( System.String , System.Nullable < LifecycleEvent >, System.Nullable < System.Int32 >) | Improve this Doc View Source SetExtraHttpHeadersAsync(Dictionary<String, String>) Sets extra HTTP headers that will be sent with every request the page initiates. Declaration public Task SetExtraHttpHeadersAsync(Dictionary<string, string> headers) Parameters Type Name Description Dictionary < System.String , System.String > headers Additional http headers to be sent with every request. Returns Type Description Task A that completes when the headers are set. | Improve this Doc View Source SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, FilePayload files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload files The file payload. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, FilePayload[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, FilePayload[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. FilePayload [] files File payloads. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String, Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, string files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String files The file path. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetInputFilesAsync(String, String[], Nullable<Int32>, Nullable<Boolean>) Sets the value of the file input to these file paths or files. If some of the files are relative paths, then they are resolved relative to the . Declaration public Task SetInputFilesAsync(string selector, string[] files, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String [] files File paths. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the files are successfully set. Remarks This method expects IElementHandle to point to an https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input . | Improve this Doc View Source SetViewportSizeAsync(ViewportSize) In the case of multiple pages in a single browser, each page can have its own viewport size. However, NewContextAsync(BrowserContextOptions) allows to set viewport size (and more) for all pages in the context at once. SetViewportSizeAsync(ViewportSize) will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page. Declaration public Task SetViewportSizeAsync(ViewportSize viewportSize) Parameters Type Name Description ViewportSize viewportSize Viewport to set. Returns Type Description Task A that completes when the viewport is set. | Improve this Doc View Source SetViewportSizeAsync(Int32, Int32) In the case of multiple pages in a single browser, each page can have its own viewport size. However, NewContextAsync(BrowserContextOptions) allows to set viewport size (and more) for all pages in the context at once. SetViewportSizeAsync(ViewportSize) will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page. Declaration public Task SetViewportSizeAsync(int width, int height) Parameters Type Name Description System.Int32 width Viewport width. System.Int32 height Viewport height. Returns Type Description Task A that completes when the viewport is set. | Improve this Doc View Source TypeAsync(String, String, Int32, Nullable<Int32>, Nullable<Boolean>) Sends a keydown , keypress / input , and keyup event for each character in the text. Declaration public Task TypeAsync(string selector, string text, int delay = 0, int? timeout = null, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. System.String text A text to type into a focused element. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the type message is confirmed by the browser. Remarks To press a special key, like Control or ArrowDown use PressAsync(String, Int32) . | Improve this Doc View Source UncheckAsync(String, Nullable<Int32>, Boolean, Nullable<Boolean>) This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses ClickAsync(String, Int32, MouseButton, Int32, Modifier[], Nullable<Point>, Nullable<Int32>, Boolean, Nullable<Boolean>) to click in the center of the element. If there's no element matching selector, the method waits until a matching element appears in the DOM. If the element is detached during the actionability checks, the action is retried. Declaration public Task UncheckAsync(string selector, int? timeout = null, bool force = false, bool? noWaitAfter = null) Parameters Type Name Description System.String selector A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. System.Boolean force Whether to pass the accionability checks. System.Nullable < System.Boolean > noWaitAfter Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false. Returns Type Description Task A that completes when the element is successfully clicked. | Improve this Doc View Source UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) Removes a route created with RouteAsync(Regex, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(Func<string, bool> url, Action<Route, IRequest> handler = null) Parameters Type Name Description Func < System.String , System.Boolean > url A function used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(Regex, Action<Route, IRequest>) Removes a route created with RouteAsync(Regex, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(Regex url, Action<Route, IRequest> handler = null) Parameters Type Name Description Regex url A regex used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source UnrouteAsync(String, Action<Route, IRequest>) Removes a route created with RouteAsync(String, Action<Route, IRequest>) . When handler is not specified, removes all routes for the url. Declaration public Task UnrouteAsync(string url, Action<Route, IRequest> handler = null) Parameters Type Name Description System.String url A glob pattern used to match while routing. Action < Route , IRequest > handler Handler function used to route a request. Returns Type Description Task A that completes when the registration was completed. | Improve this Doc View Source WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) Declaration public Task<T> WaitForEvent<T>(PlaywrightEvent<T> pageEvent, Func<T, bool> predicate = null, int? timeout = null) where T : EventArgs Parameters Type Name Description PlaywrightEvent <T> pageEvent Func <T, System.Boolean > predicate System.Nullable < System.Int32 > timeout Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source WaitForFunctionAsync(String, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Polling, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, Polling polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . Polling polling An interval at which the pageFunction is executed. defaults to Raf . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Int32, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int polling, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Int32 polling An interval at which the function is executed. If no value is specified will use polling . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForFunctionAsync(String, Object, Nullable<Int32>) Waits for a function to be evaluated to a truthy value. Declaration public Task<IJSHandle> WaitForFunctionAsync(string pageFunction, object arg, int? timeout = null) Parameters Type Name Description System.String pageFunction Function to be evaluated in browser context. System.Object arg Arguments to pass to script . System.Nullable < System.Int32 > timeout Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultTimeout or DefaultTimeout . Returns Type Description Task < IJSHandle > A that resolves when the script returns a truthy value, yielding a IJSHandle . | Improve this Doc View Source WaitForLoadStateAsync(LifecycleEvent, Nullable<Int32>) Completes when the page reaches a required load state, load by default. The navigation can be in progress when it is called. If navigation is already at a required state, completes immediately. Declaration public Task WaitForLoadStateAsync(LifecycleEvent state = LifecycleEvent.Load, int? timeout = null) Parameters Type Name Description LifecycleEvent state Load state to wait for. Defaults to Load . If the state has been already reached while loading current document, the method resolves immediately. System.Nullable < System.Int32 > timeout Maximum waiting time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the DefaultNavigationTimeout , DefaultTimeout , DefaultNavigationTimeout or DefaultTimeout properties. Returns Type Description Task A that completes when the load is completed. | Improve this Doc View Source WaitForNavigationAsync(Func<String, Boolean>, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(Func<string, bool> url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Func < System.String , System.Boolean > url Wait for this specific URL that matches the function condition. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(Regex, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(Regex url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description Regex url Wait for this specific URL Regex. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForNavigationAsync(String, Nullable<LifecycleEvent>, Nullable<Int32>) This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Declaration public Task<IResponse> WaitForNavigationAsync(string url, LifecycleEvent? waitUntil = null, int? timeout = null) Parameters Type Name Description System.String url Wait for this specific URL. System.Nullable < LifecycleEvent > waitUntil When to consider navigation succeeded, defaults to Load . System.Nullable < System.Int32 > timeout Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. Returns Type Description Task < IResponse > Task which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with null . Remarks Usage of the History API https://developer.mozilla.org/en-US/docs/Web/API/History_API to change the URL is considered a navigation. | Improve this Doc View Source WaitForRequestAsync(Func<IRequest, Boolean>, Nullable<Int32>) Waits for a request. Declaration public Task<IRequest> WaitForRequestAsync(Func<IRequest, bool> predicate, int? timeout = null) Parameters Type Name Description Func < IRequest , System.Boolean > predicate Function used to evaluate requets. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . | Improve this Doc View Source WaitForRequestAsync(Regex, Nullable<Int32>) Waits for a request. Declaration public Task<IRequest> WaitForRequestAsync(Regex url, int? timeout = null) Parameters Type Name Description Regex url Regex to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . | Improve this Doc View Source WaitForRequestAsync(String, Nullable<Int32>) Waits for a request. Declaration public Task<IRequest> WaitForRequestAsync(string url, int? timeout = null) Parameters Type Name Description System.String url URL to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IRequest > A that completes when the request was made (or timeout), yielding the matching IRequest . | Improve this Doc View Source WaitForResponseAsync(Func<IResponse, Boolean>, Nullable<Int32>) Waits for a response. Declaration public Task<IResponse> WaitForResponseAsync(Func<IResponse, bool> predicate, int? timeout = null) Parameters Type Name Description Func < IResponse , System.Boolean > predicate Function used to evaluate requets. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. | Improve this Doc View Source WaitForResponseAsync(Regex, Nullable<Int32>) Waits for a response. Declaration public Task<IResponse> WaitForResponseAsync(Regex url, int? timeout = null) Parameters Type Name Description Regex url Regex to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. | Improve this Doc View Source WaitForResponseAsync(String, Nullable<Int32>) Waits for a response. Declaration public Task<IResponse> WaitForResponseAsync(string url, int? timeout = null) Parameters Type Name Description System.String url URL to wait for. System.Nullable < System.Int32 > timeout /// Maximum time to wait for in milliseconds. Pass 0 to disable timeout. The default value can be changed by setting the DefaultTimeout property. Returns Type Description Task < IResponse > A that completes when a matching response is received, yielding the response being waited for. | Improve this Doc View Source WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) Waits for a selector to be added to the DOM. Declaration public Task<IElementHandle> WaitForSelectorAsync(string selector, WaitForState? state = null, int? timeout = null) Parameters Type Name Description System.String selector A selector of an element to wait for. System.Nullable < WaitForState > state Wait for element to become in the specified state. System.Nullable < System.Int32 > timeout Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout. The default value can be changed by using DefaultTimeout method. Returns Type Description Task < IElementHandle > A that completes when element specified by selector string is added to DOM, yielding the IElementHandle to wait for. Resolves to null if waiting for hidden: true and selector is not found in DOM. | Improve this Doc View Source WaitForTimeoutAsync(Int32) Waits for a timeout. Declaration public Task WaitForTimeoutAsync(int timeout) Parameters Type Name Description System.Int32 timeout Timeout in milliseconds. Returns Type Description Task A that completes when the timeout is reached. Events | Improve this Doc View Source Close Raised when the page closes. Declaration public event EventHandler<EventArgs> Close Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Console Raised when JavaScript within the page calls one of console API methods, e.g. console.log or console.dir . Also emitted if the page throws an error or a warning. The arguments passed into console.log appear as arguments on the event handler. Declaration public event EventHandler<ConsoleEventArgs> Console Event Type Type Description EventHandler < ConsoleEventArgs > | Improve this Doc View Source Crash Raised when the page crashes. Declaration public event EventHandler<EventArgs> Crash Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Dialog Raised when a JavaScript dialog appears, such as alert , prompt , confirm or beforeunload . PlaywrightSharp can respond to the dialog via Dialog 's AcceptAsync(String) or DismissAsync() methods. Declaration public event EventHandler<DialogEventArgs> Dialog Event Type Type Description EventHandler < DialogEventArgs > | Improve this Doc View Source DOMContentLoaded The JavaScript DOMContentLoaded https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded event Declaration public event EventHandler<EventArgs> DOMContentLoaded Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source Download Emitted when attachment download started. User can access basic file operations on downloaded content via the passed Download instance. Declaration public event EventHandler<DownloadEventArgs> Download Event Type Type Description EventHandler < DownloadEventArgs > | Improve this Doc View Source FileChooser Raised when a file chooser is supposed to appear, such as after clicking the <input type=file> `. Playwright can respond to it via setting the input files using SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) . Declaration public event EventHandler<FileChooserEventArgs> FileChooser Event Type Type Description EventHandler < FileChooserEventArgs > | Improve this Doc View Source FrameAttached Raised when a frame is attached. Declaration public event EventHandler<FrameEventArgs> FrameAttached Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source FrameDetached Raised when a frame is detached. Declaration public event EventHandler<FrameEventArgs> FrameDetached Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source FrameNavigated Raised when a frame is navigated to a new url. Declaration public event EventHandler<FrameEventArgs> FrameNavigated Event Type Type Description EventHandler < FrameEventArgs > | Improve this Doc View Source Load Raised when the JavaScript load https://developer.mozilla.org/en-US/docs/Web/Events/load event is dispatched. Declaration public event EventHandler<EventArgs> Load Event Type Type Description EventHandler < EventArgs > | Improve this Doc View Source PageError Raised when an uncaught exception happens within the page. Declaration public event EventHandler<PageErrorEventArgs> PageError Event Type Type Description EventHandler < PageErrorEventArgs > | Improve this Doc View Source Popup Emitted when the page opens a new tab or window. Declaration public event EventHandler<PopupEventArgs> Popup Event Type Type Description EventHandler < PopupEventArgs > | Improve this Doc View Source Request Raised when a page issues a request. The IRequest object is read-only. Declaration public event EventHandler<RequestEventArgs> Request Event Type Type Description EventHandler < RequestEventArgs > | Improve this Doc View Source RequestFailed Raised when a request fails, for example by timing out. Declaration public event EventHandler<RequestFailedEventArgs> RequestFailed Event Type Type Description EventHandler < RequestFailedEventArgs > | Improve this Doc View Source RequestFinished Raised when a request finishes successfully. Declaration public event EventHandler<RequestEventArgs> RequestFinished Event Type Type Description EventHandler < RequestEventArgs > | Improve this Doc View Source Response Raised when a IResponse is received. Declaration public event EventHandler<ResponseEventArgs> Response Event Type Type Description EventHandler < ResponseEventArgs > | Improve this Doc View Source Worker Raised when a dedicated WebWorker ( https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API ) is spawned by the page. Declaration public event EventHandler<WorkerEventArgs> Worker Event Type Type Description EventHandler < WorkerEventArgs > Explicit Interface Implementations | Improve this Doc View Source IPage.Context Get the browser context that the page belongs to. Declaration IBrowserContext IPage.Context { get; } Returns Type Description IBrowserContext | Improve this Doc View Source IPage.MainFrame Page is guaranteed to have a main frame which persists during navigations. Declaration IFrame IPage.MainFrame { get; } Returns Type Description IFrame Implements IPage"
  },
  "api/PlaywrightSharp.Rect.html": {
    "href": "api/PlaywrightSharp.Rect.html",
    "title": "Class Rect | Playwright Sharp",
    "keywords": "Class Rect Bounding box data returned by GetBoundingBoxAsync() . Inheritance System.Object Rect Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Rect : IEquatable<Rect> Constructors | Improve this Doc View Source Rect() Initializes a new instance of the Rect class. Declaration public Rect() | Improve this Doc View Source Rect(Decimal, Decimal, Decimal, Decimal) Initializes a new instance of the Rect class. Declaration public Rect(decimal x, decimal y, decimal width, decimal height) Parameters Type Name Description System.Decimal x The x coordinate. System.Decimal y The y coordinate. System.Decimal width Width. System.Decimal height Height. Properties | Improve this Doc View Source Height The height of the element in pixels. Declaration public decimal Height { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source Width The width of the element in pixels. Declaration public decimal Width { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source X The x coordinate of the element in pixels. Declaration public decimal X { get; set; } Property Value Type Description System.Decimal | Improve this Doc View Source Y The y coordinate of the element in pixels. Declaration public decimal Y { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(Rect) Determines whether the specified Rect is equal to the current Rect . Declaration public bool Equals(Rect other) Parameters Type Name Description Rect other The Rect to compare with the current Rect . Returns Type Description System.Boolean true if the specified Rect is equal to the current Rect ; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/PlaywrightSharp.Browser.html": {
    "href": "api/PlaywrightSharp.Browser.html",
    "title": "Class Browser | Playwright Sharp",
    "keywords": "Class Browser Inheritance System.Object ChannelOwnerBase Browser ChromiumBrowser Implements IBrowser IAsyncDisposable Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Browser : ChannelOwnerBase, IChannelOwner<Browser>, IChannelOwner, IBrowser, IAsyncDisposable Properties | Improve this Doc View Source Contexts Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts. Declaration public IBrowserContext[] Contexts { get; } Property Value Type Description IBrowserContext [] | Improve this Doc View Source IsConnected Indicates that the browser is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Version Returns the browser version. Declaration public string Version { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CloseAsync() Closes browser and all of its pages (if any were opened). The Browser object itself is considered to be disposed and cannot be used anymore. Declaration public Task CloseAsync() Returns Type Description Task A that completes when the browser is closed. | Improve this Doc View Source DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source NewContextAsync(BrowserContextOptions) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration public Task<IBrowserContext> NewContextAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Context options. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. | Improve this Doc View Source NewContextAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration public Task<IBrowserContext> NewContextAsync(ViewportSize viewport, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. | Improve this Doc View Source NewContextAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new browser context. It won't share cookies/cache with other browser contexts. Declaration public Task<IBrowserContext> NewContextAsync(string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IBrowserContext > A that completes when a new IBrowserContext is created. | Improve this Doc View Source NewPageAsync(BrowserContextOptions) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration public Task<IPage> NewPageAsync(BrowserContextOptions options) Parameters Type Name Description BrowserContextOptions options Context options. Returns Type Description Task < IPage > A that completes when a new IPage is created. | Improve this Doc View Source NewPageAsync(ViewportSize, String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration public Task<IPage> NewPageAsync(ViewportSize viewport, string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description ViewportSize viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IPage > A that completes when a new IPage is created. | Improve this Doc View Source NewPageAsync(String, Nullable<Boolean>, Nullable<Boolean>, String, Geolocation, ContextPermission[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Decimal>, Credentials, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<ColorScheme>, String, Dictionary<String, String>) Creates a new page in a new browser context. Closing this page will close the context as well. Declaration public Task<IPage> NewPageAsync(string userAgent = null, bool? bypassCSP = null, bool? javaScriptEnabled = null, string timezoneId = null, Geolocation geolocation = null, ContextPermission[] permissions = null, bool? isMobile = null, bool? offline = null, decimal? deviceScaleFactor = null, Credentials httpCredentials = null, bool? hasTouch = null, bool? acceptDownloads = null, bool? ignoreHTTPSErrors = null, ColorScheme? colorScheme = null, string locale = null, Dictionary<string, string> extraHttpHeaders = null) Parameters Type Name Description System.String userAgent Specific user agent to use in this context. System.Nullable < System.Boolean > bypassCSP Toggles bypassing page's Content-Security-Policy. System.Nullable < System.Boolean > javaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. System.String timezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Geolocation geolocation Changes the Geolocation of the context. ContextPermission [] permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. System.Nullable < System.Boolean > isMobile Gets or sets whether the meta viewport tag is taken into account. System.Nullable < System.Boolean > offline Whether to emulate network being offline. Defaults to false . System.Nullable < System.Decimal > deviceScaleFactor Gets or sets the device scale factor. Credentials httpCredentials Credentials for HTTP authentication. System.Nullable < System.Boolean > hasTouch Specifies if viewport supports touch events. Defaults to false. System.Nullable < System.Boolean > acceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. System.Nullable < System.Boolean > ignoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. System.Nullable < ColorScheme > colorScheme Emulates 'prefers-colors-scheme' media feature. System.String locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Dictionary < System.String , System.String > extraHttpHeaders An object containing additional HTTP headers to be sent with every request. Returns Type Description Task < IPage > A that completes when a new IPage is created. Events | Improve this Doc View Source Disconnected Raised when the IBrowser gets disconnected from the browser instance. This might happen because one of the following: Browser is closed or crashed CloseAsync() method was called Declaration public event EventHandler Disconnected Event Type Type Description EventHandler Implements IBrowser IAsyncDisposable"
  },
  "api/PlaywrightSharp.IEvent.html": {
    "href": "api/PlaywrightSharp.IEvent.html",
    "title": "Interface IEvent | Playwright Sharp",
    "keywords": "Interface IEvent Events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) and WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IEvent Properties | Improve this Doc View Source Name Event Name. Declaration string Name { get; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.PageEvent.html": {
    "href": "api/PlaywrightSharp.PageEvent.html",
    "title": "Class PageEvent | Playwright Sharp",
    "keywords": "Class PageEvent Page events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . Inheritance System.Object PageEvent Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public static class PageEvent : object Properties | Improve this Doc View Source Close PlaywrightEvent<T> representing a Close . Declaration public static PlaywrightEvent<EventArgs> Close { get; } Property Value Type Description PlaywrightEvent < EventArgs > | Improve this Doc View Source Console PlaywrightEvent<T> representing a Console . Declaration public static PlaywrightEvent<ConsoleEventArgs> Console { get; } Property Value Type Description PlaywrightEvent < ConsoleEventArgs > | Improve this Doc View Source Crash PlaywrightEvent<T> representing a Crash . Declaration public static PlaywrightEvent<EventArgs> Crash { get; } Property Value Type Description PlaywrightEvent < EventArgs > | Improve this Doc View Source Dialog PlaywrightEvent<T> representing a Dialog . Declaration public static PlaywrightEvent<DialogEventArgs> Dialog { get; } Property Value Type Description PlaywrightEvent < DialogEventArgs > | Improve this Doc View Source DOMContentLoaded PlaywrightEvent<T> representing a DOMContentLoaded . Declaration public static PlaywrightEvent<EventArgs> DOMContentLoaded { get; } Property Value Type Description PlaywrightEvent < EventArgs > | Improve this Doc View Source Download PlaywrightEvent<T> representing a Download . Declaration public static PlaywrightEvent<DownloadEventArgs> Download { get; } Property Value Type Description PlaywrightEvent < DownloadEventArgs > | Improve this Doc View Source FileChooser PlaywrightEvent<T> representing a FileChooser . Declaration public static PlaywrightEvent<FileChooserEventArgs> FileChooser { get; } Property Value Type Description PlaywrightEvent < FileChooserEventArgs > | Improve this Doc View Source FrameDetached PlaywrightEvent<T> representing a FrameDetached . Declaration public static PlaywrightEvent<FrameEventArgs> FrameDetached { get; } Property Value Type Description PlaywrightEvent < FrameEventArgs > | Improve this Doc View Source FrameNavigated PlaywrightEvent<T> representing a FrameNavigated . Declaration public static PlaywrightEvent<FrameEventArgs> FrameNavigated { get; } Property Value Type Description PlaywrightEvent < FrameEventArgs > | Improve this Doc View Source Load PlaywrightEvent<T> representing a Load . Declaration public static PlaywrightEvent<EventArgs> Load { get; } Property Value Type Description PlaywrightEvent < EventArgs > | Improve this Doc View Source PageError PlaywrightEvent<T> representing a PageError . Declaration public static PlaywrightEvent<PageErrorEventArgs> PageError { get; } Property Value Type Description PlaywrightEvent < PageErrorEventArgs > | Improve this Doc View Source Popup PlaywrightEvent<T> representing a Popup . Declaration public static PlaywrightEvent<PopupEventArgs> Popup { get; } Property Value Type Description PlaywrightEvent < PopupEventArgs > | Improve this Doc View Source Request PlaywrightEvent<T> representing a Request . Declaration public static PlaywrightEvent<RequestEventArgs> Request { get; } Property Value Type Description PlaywrightEvent < RequestEventArgs > | Improve this Doc View Source RequestFinished PlaywrightEvent<T> representing a RequestFinished . Declaration public static PlaywrightEvent<RequestEventArgs> RequestFinished { get; } Property Value Type Description PlaywrightEvent < RequestEventArgs > | Improve this Doc View Source Response PlaywrightEvent<T> representing a Response . Declaration public static PlaywrightEvent<ResponseEventArgs> Response { get; } Property Value Type Description PlaywrightEvent < ResponseEventArgs > | Improve this Doc View Source Worker PlaywrightEvent<T> representing a Worker . Declaration public static PlaywrightEvent<WorkerEventArgs> Worker { get; } Property Value Type Description PlaywrightEvent < WorkerEventArgs >"
  },
  "api/PlaywrightSharp.Chromium.ChromiumBrowserContext.html": {
    "href": "api/PlaywrightSharp.Chromium.ChromiumBrowserContext.html",
    "title": "Class ChromiumBrowserContext | Playwright Sharp",
    "keywords": "Class ChromiumBrowserContext Inheritance System.Object ChannelOwnerBase BrowserContext ChromiumBrowserContext Implements IChromiumBrowserContext IBrowserContext IAsyncDisposable Inherited Members BrowserContext.Close BrowserContext.Page BrowserContext.Pages BrowserContext.DefaultTimeout BrowserContext.DefaultNavigationTimeout BrowserContext.NewPageAsync(String) BrowserContext.CloseAsync() BrowserContext.GetCookiesAsync(String[]) BrowserContext.AddCookiesAsync(IEnumerable<SetNetworkCookieParam>) BrowserContext.AddCookiesAsync(SetNetworkCookieParam[]) BrowserContext.ClearCookiesAsync() BrowserContext.GrantPermissionsAsync(ContextPermission[], String) BrowserContext.GrantPermissionsAsync(ContextPermission, String) BrowserContext.SetGeolocationAsync(Decimal, Decimal, Decimal) BrowserContext.SetGeolocationAsync(Geolocation) BrowserContext.ClearPermissionsAsync() BrowserContext.DisposeAsync() BrowserContext.ExposeBindingAsync(String, Action<BindingSource>) BrowserContext.ExposeBindingAsync<T>(String, Action<BindingSource, T>) BrowserContext.ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) BrowserContext.ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) BrowserContext.ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) BrowserContext.ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) BrowserContext.ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) BrowserContext.ExposeFunctionAsync(String, Action) BrowserContext.ExposeFunctionAsync<T>(String, Action<T>) BrowserContext.ExposeFunctionAsync<TResult>(String, Func<TResult>) BrowserContext.ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) BrowserContext.ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) BrowserContext.ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) BrowserContext.ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) BrowserContext.WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) BrowserContext.AddInitScriptAsync(String, Object[], String, String) BrowserContext.SetHttpCredentialsAsync(Credentials) BrowserContext.SetOfflineAsync(Boolean) BrowserContext.RouteAsync(String, Action<Route, IRequest>) BrowserContext.RouteAsync(Regex, Action<Route, IRequest>) BrowserContext.RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) BrowserContext.UnrouteAsync(String, Action<Route, IRequest>) BrowserContext.UnrouteAsync(Regex, Action<Route, IRequest>) BrowserContext.UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) BrowserContext.SetExtraHttpHeadersAsync(Dictionary<String, String>) Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public class ChromiumBrowserContext : BrowserContext, IChannelOwner<BrowserContext>, IChannelOwner, IChromiumBrowserContext, IBrowserContext, IAsyncDisposable Properties | Improve this Doc View Source BackgroundPages All existing background pages in the context. Chromium Only. Declaration public IPage[] BackgroundPages { get; } Property Value Type Description IPage [] | Improve this Doc View Source ServiceWorkers All existing service workers in the context. Chromium Only. Declaration public IWorker[] ServiceWorkers { get; } Property Value Type Description IWorker [] Methods | Improve this Doc View Source NewCDPSessionAsync(IPage) Creates a new browser session. Declaration public Task<ICDPSession> NewCDPSessionAsync(IPage page) Parameters Type Name Description IPage page Page to create a new session for. Returns Type Description Task < ICDPSession > A that completes when the browser session was created, yielding the new session. Events | Improve this Doc View Source BackgroundPage Raised when new background page is created in the context. Chromium only Declaration public event EventHandler<PageEventArgs> BackgroundPage Event Type Type Description EventHandler < PageEventArgs > | Improve this Doc View Source ServiceWorker Raised when new service worker is created in the context. Chromium only Declaration public event EventHandler<WorkerEventArgs> ServiceWorker Event Type Type Description EventHandler < WorkerEventArgs > Implements IChromiumBrowserContext IBrowserContext IAsyncDisposable"
  },
  "api/PlaywrightSharp.ConsoleMessage.html": {
    "href": "api/PlaywrightSharp.ConsoleMessage.html",
    "title": "Class ConsoleMessage | Playwright Sharp",
    "keywords": "Class ConsoleMessage ConsoleMessage is part of ConsoleEventArgs used by Console . Inheritance System.Object ChannelOwnerBase ConsoleMessage Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ConsoleMessage : ChannelOwnerBase, IChannelOwner<ConsoleMessage>, IChannelOwner Properties | Improve this Doc View Source Args Gets the arguments. Declaration public IEnumerable<IJSHandle> Args { get; } Property Value Type Description IEnumerable < IJSHandle > | Improve this Doc View Source Location Gets the location. Declaration public ConsoleMessageLocation Location { get; } Property Value Type Description ConsoleMessageLocation | Improve this Doc View Source Text Gets the console text. Declaration public string Text { get; } Property Value Type Description System.String | Improve this Doc View Source Type Gets the ConsoleMessage type. Declaration public string Type { get; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.Selectors.html": {
    "href": "api/PlaywrightSharp.Selectors.html",
    "title": "Class Selectors | Playwright Sharp",
    "keywords": "Class Selectors Selectors can be used to install custom selector engines. Inheritance System.Object Selectors Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class Selectors : object Methods | Improve this Doc View Source RegisterAsync(String, String, String, String, Nullable<Boolean>) Registers a new selector engine. Declaration public Task RegisterAsync(string name, string script = null, string path = null, string content = null, bool? contentScript = null) Parameters Type Name Description System.String name Name that is used in selectors as a prefix, e.g. {name: 'foo'} enables foo=myselectorbody selectors. May only contain [a-zA-Z0-9_] characters. System.String script Script that evaluates to a selector engine instance. System.String path Path to the JavaScript file. If path is a relative path, then it is resolved relative to current working directory. System.String content Raw script content. System.Nullable < System.Boolean > contentScript Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to false. Note that running as a content script is not guaranteed when this engine is used together with other registered engines. Returns Type Description Task A that completes when the engine is registered."
  },
  "api/PlaywrightSharp.Transport.IConnectionTransport.html": {
    "href": "api/PlaywrightSharp.Transport.IConnectionTransport.html",
    "title": "Interface IConnectionTransport | Playwright Sharp",
    "keywords": "Interface IConnectionTransport Transport interface. Namespace : PlaywrightSharp.Transport Assembly : PlaywrightSharp.dll Syntax public interface IConnectionTransport Methods | Improve this Doc View Source Close(String) Closes the connection. Declaration void Close(string closeReason) Parameters Type Name Description System.String closeReason Close reason. | Improve this Doc View Source SendAsync(String) Sends a message using the transport. Declaration Task SendAsync(string message) Parameters Type Name Description System.String message Message to send. Returns Type Description Task The task. Events | Improve this Doc View Source MessageReceived Occurs when a message is received. Declaration event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler < MessageReceivedEventArgs > | Improve this Doc View Source TransportClosed Occurs when the transport is closed. Declaration event EventHandler<TransportClosedEventArgs> TransportClosed Event Type Type Description EventHandler < TransportClosedEventArgs >"
  },
  "api/PlaywrightSharp.PressedState.html": {
    "href": "api/PlaywrightSharp.PressedState.html",
    "title": "Enum PressedState | Playwright Sharp",
    "keywords": "Enum PressedState Three-state boolean. See Pressed . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum PressedState : int Fields Name Description Mixed Mixed. Pressed Pressed. Released Released."
  },
  "api/PlaywrightSharp.IRequest.html": {
    "href": "api/PlaywrightSharp.IRequest.html",
    "title": "Interface IRequest | Playwright Sharp",
    "keywords": "Interface IRequest Whenever the page sends a request, the following events are emitted by an IPage . Request emitted when the request is issued by the page. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IRequest Properties | Improve this Doc View Source Failure Gets or sets the failure. Declaration string Failure { get; } Property Value Type Description System.String | Improve this Doc View Source Frame An IFrame that initiated this request, or null if navigating to error pages. Declaration IFrame Frame { get; } Property Value Type Description IFrame | Improve this Doc View Source Headers Gets or sets the HTTP headers. Declaration Dictionary<string, string> Headers { get; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source IsNavigationRequest Gets whether this request is driving frame's navigation. Declaration bool IsNavigationRequest { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Method Gets or sets the HTTP method. Declaration HttpMethod Method { get; } Property Value Type Description HttpMethod | Improve this Doc View Source PostData Post data as string. Declaration string PostData { get; } Property Value Type Description System.String | Improve this Doc View Source PostDataBuffer Post data as a byte[]. Declaration byte[] PostDataBuffer { get; } Property Value Type Description System.Byte [] | Improve this Doc View Source RedirectedFrom When the server responds with a redirect, Playwright creates a new IRequest object. The two requests are connected by RedirectedFrom and RedirectedTo methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling RedirectedFrom . Declaration IRequest RedirectedFrom { get; } Property Value Type Description IRequest | Improve this Doc View Source RedirectedTo When the server responds with a redirect, Playwright creates a new IRequest object. The two requests are connected by RedirectedFrom and RedirectedTo methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling RedirectedFrom .. Declaration IRequest RedirectedTo { get; } Property Value Type Description IRequest | Improve this Doc View Source ResourceType Gets or sets the type of the resource. Declaration ResourceType ResourceType { get; } Property Value Type Description ResourceType | Improve this Doc View Source Url URL of the request. Declaration string Url { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetPostDataJsonAsync(JsonDocumentOptions) Returns the parsed request's body for form-urlencoded and JSON as a fallback if any. Declaration JsonDocument GetPostDataJsonAsync(JsonDocumentOptions options = null) Parameters Type Name Description JsonDocumentOptions options Parser options. Returns Type Description JsonDocument A that completes when the json body is parsed, yielding a representation of request body. | Improve this Doc View Source GetResponseAsync() Responsed attached to the request. Declaration Task<IResponse> GetResponseAsync() Returns Type Description Task < IResponse > A that completes when the response is resolved."
  },
  "api/PlaywrightSharp.Chromium.IChromiumBrowserContext.html": {
    "href": "api/PlaywrightSharp.Chromium.IChromiumBrowserContext.html",
    "title": "Interface IChromiumBrowserContext | Playwright Sharp",
    "keywords": "Interface IChromiumBrowserContext Chromium-specific features including background pages, service worker support, etc. Inherited Members IBrowserContext.Close IBrowserContext.Page IBrowserContext.DefaultTimeout IBrowserContext.DefaultNavigationTimeout IBrowserContext.Pages IBrowserContext.NewPageAsync(String) IBrowserContext.CloseAsync() IBrowserContext.GetCookiesAsync(String[]) IBrowserContext.AddInitScriptAsync(String, Object[], String, String) IBrowserContext.AddCookiesAsync(IEnumerable<SetNetworkCookieParam>) IBrowserContext.AddCookiesAsync(SetNetworkCookieParam[]) IBrowserContext.ClearCookiesAsync() IBrowserContext.GrantPermissionsAsync(ContextPermission[], String) IBrowserContext.GrantPermissionsAsync(ContextPermission, String) IBrowserContext.SetGeolocationAsync(Decimal, Decimal, Decimal) IBrowserContext.SetGeolocationAsync(Geolocation) IBrowserContext.ClearPermissionsAsync() IBrowserContext.WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) IBrowserContext.ExposeBindingAsync(String, Action<BindingSource>) IBrowserContext.ExposeBindingAsync<T>(String, Action<BindingSource, T>) IBrowserContext.ExposeBindingAsync<TResult>(String, Func<BindingSource, TResult>) IBrowserContext.ExposeBindingAsync<T, TResult>(String, Func<BindingSource, T, TResult>) IBrowserContext.ExposeBindingAsync<T1, T2, TResult>(String, Func<BindingSource, T1, T2, TResult>) IBrowserContext.ExposeBindingAsync<T1, T2, T3, TResult>(String, Func<BindingSource, T1, T2, T3, TResult>) IBrowserContext.ExposeBindingAsync<T1, T2, T3, T4, TResult>(String, Func<BindingSource, T1, T2, T3, T4, TResult>) IBrowserContext.ExposeFunctionAsync(String, Action) IBrowserContext.ExposeFunctionAsync<T>(String, Action<T>) IBrowserContext.ExposeFunctionAsync<TResult>(String, Func<TResult>) IBrowserContext.ExposeFunctionAsync<T, TResult>(String, Func<T, TResult>) IBrowserContext.ExposeFunctionAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>) IBrowserContext.ExposeFunctionAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>) IBrowserContext.ExposeFunctionAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>) IBrowserContext.SetHttpCredentialsAsync(Credentials) IBrowserContext.RouteAsync(String, Action<Route, IRequest>) IBrowserContext.RouteAsync(Regex, Action<Route, IRequest>) IBrowserContext.RouteAsync(Func<String, Boolean>, Action<Route, IRequest>) IBrowserContext.UnrouteAsync(String, Action<Route, IRequest>) IBrowserContext.UnrouteAsync(Regex, Action<Route, IRequest>) IBrowserContext.UnrouteAsync(Func<String, Boolean>, Action<Route, IRequest>) IBrowserContext.SetOfflineAsync(Boolean) IBrowserContext.SetExtraHttpHeadersAsync(Dictionary<String, String>) Namespace : PlaywrightSharp.Chromium Assembly : PlaywrightSharp.dll Syntax public interface IChromiumBrowserContext : IBrowserContext, IAsyncDisposable Properties | Improve this Doc View Source BackgroundPages All existing background pages in the context. Chromium Only. Declaration IPage[] BackgroundPages { get; } Property Value Type Description IPage [] | Improve this Doc View Source ServiceWorkers All existing service workers in the context. Chromium Only. Declaration IWorker[] ServiceWorkers { get; } Property Value Type Description IWorker [] Methods | Improve this Doc View Source NewCDPSessionAsync(IPage) Creates a new browser session. Declaration Task<ICDPSession> NewCDPSessionAsync(IPage page) Parameters Type Name Description IPage page Page to create a new session for. Returns Type Description Task < ICDPSession > A that completes when the browser session was created, yielding the new session. Events | Improve this Doc View Source BackgroundPage Raised when new background page is created in the context. Chromium only Declaration event EventHandler<PageEventArgs> BackgroundPage Event Type Type Description EventHandler < PageEventArgs > | Improve this Doc View Source ServiceWorker Raised when new service worker is created in the context. Chromium only Declaration event EventHandler<WorkerEventArgs> ServiceWorker Event Type Type Description EventHandler < WorkerEventArgs >"
  },
  "api/PlaywrightSharp.WorkerEventArgs.html": {
    "href": "api/PlaywrightSharp.WorkerEventArgs.html",
    "title": "Class WorkerEventArgs | Playwright Sharp",
    "keywords": "Class WorkerEventArgs Workder created event arguments. Inheritance System.Object WorkerEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class WorkerEventArgs : EventArgs Constructors | Improve this Doc View Source WorkerEventArgs(IWorker) Initializes a new instance of the WorkerEventArgs class. Declaration public WorkerEventArgs(IWorker worker) Parameters Type Name Description IWorker worker Worker. Properties | Improve this Doc View Source Worker Worker. Declaration public IWorker Worker { get; set; } Property Value Type Description IWorker The worker."
  },
  "api/PlaywrightSharp.MediaType.html": {
    "href": "api/PlaywrightSharp.MediaType.html",
    "title": "Enum MediaType | Playwright Sharp",
    "keywords": "Enum MediaType Options for EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum MediaType : int Fields Name Description Null None Print Media Print. Screen Media Screen."
  },
  "api/PlaywrightSharp.html": {
    "href": "api/PlaywrightSharp.html",
    "title": "Namespace PlaywrightSharp | Playwright Sharp",
    "keywords": "Namespace PlaywrightSharp Classes BindingSource caller information. Browser BrowserContext BrowserContextOptions NewContextAsync(BrowserContextOptions) . BrowserType ChromiumCoverage Coverage gathers information about parts of JavaScript and CSS that were used by the page.. ConsoleEventArgs Console data. ConsoleMessage ConsoleMessage is part of ConsoleEventArgs used by Console . ConsoleMessageLocation Console message location. ContextEvent Context events. See WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . Credentials Options to be used in SetHttpCredentialsAsync(Credentials) . CSSCoverageEntry Coverage report for all non-anonymous scripts. CSSCoverageEntryRange Script range. DeviceDescriptor Device descriptor. DeviceDescriptorName Device descriptor name. DialogEventArgs Dialog arguments. Download Download objects are dispatched by page via the Download event. All the downloaded files belonging to the browser context are deleted when the browser context is closed.All downloaded files are deleted when the browser closes. Download event is emitted once the download starts. DownloadEventArgs See Download . ElementHandle FileChooserEventArgs see FileChooser arguments. FilePayload Payload for SetInputFilesAsync(FilePayload, Nullable<Int32>, Nullable<Boolean>) , SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) and SetInputFilesAsync(String, FilePayload, Nullable<Int32>, Nullable<Boolean>) . Frame FrameEventArgs FrameAttached , FrameDetached and FrameNavigated arguments. FrameNavigatedEventArgs See Navigated . Geolocation Geolocation option. JSCoverageEntry JS Coverage report. See StopJSCoverageAsync() . JSCoverageEntryRange Script range. See JSCoverageFunction . JSCoverageFunction JS Coverage function info. See Functions . JSHandle KeyDefinition Represents a definition of a keyboard key. KeyDefinitions Utility class for getting KeyDefinition . LaunchOptions Options for LaunchAsync(LaunchOptions) . LaunchPersistentOptions Options for LaunchPersistentContextAsync(String, LaunchPersistentOptions) . LoadStateEventArgs See LoadState . Margin Margin options used in GetPdfAsync(String, Decimal, Boolean, String, String, Boolean, Boolean, String, PaperFormat, String, String, Margin, Boolean) . NavigationException Exception thrown when a IPage fails to navigate an URL. NetworkCookie Cookie data. Page PageErrorEventArgs Page error event arguments. PageEvent Page events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . PageEventArgs See Page . PaperFormat Paper format. Payload Payload information. Playwright PlaywrightEvent<T> Events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) and WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . PlaywrightSharpException Base exception used to identify any exception thrown by PlaywrightSharp. PopupEventArgs Arguments used by Popup . ProxySettings Proxy Settings. See LaunchAsync(LaunchOptions) and LaunchPersistentContextAsync(String, LaunchPersistentOptions) . Rect Bounding box data returned by GetBoundingBoxAsync() . Request RequestEventArgs Arguments used by IPage events. RequestFailedEventArgs Arguments used by IPage events. Response ResponseEventArgs Response arguments. Route Whenever a network route is set up with RouteAsync(String, Action<Route, IRequest>) or RouteAsync(String, Action<Route, IRequest>) the Route object allows to handle the route. SelectOption Options used with SelectOptionAsync(String, SelectOption[]) . Selectors Selectors can be used to install custom selector engines. SerializedAXNode AXNode. SetNetworkCookieParam Cookie set data. TargetClosedException Exception thrown by a connection when it detects that the target was closed. ViewportSize View port data. WorkerEventArgs Workder created event arguments. Structs ResponseData Response that will fulfill a request. Interfaces IAccessibility The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches. Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output. Blink - Chrome's rendering engine - has a concept of \"accessibility tree\", which is than translated into different platform-specific APIs. Accessibility namespace gives users access to the Blink Accessibility Tree. Most of the accessibility tree gets filtered out when converting from Blink AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, PlaywrightSharp tries to approximate this filtering, exposing only the \"interesting\" nodes of the tree. IBrowser A Browser is created when Playwright connects to a browser instance. IBrowserContext BrowserContexts provide a way to operate multiple independent browser sessions. If a IPage opens another page, e.g.with a window.open call, the popup will belong to the parent page's browser context. PlaywrightSharp allows creation of \"incognito\" browser contexts with NewContextAsync(BrowserContextOptions) method. \"Incognito\" browser contexts don't write any browsing data to disk. IBrowserType BrowserType provides methods to launch a specific browser instance or connect to an existing one. ICoverage Coverage gathers information about parts of JavaScript and CSS that were used by the page. IDialog IDialog objects are dispatched by page via the Dialog event. IElementHandle It represents an in-page DOM element. IEvent Events for WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) and WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . IFrame At every point of time, page exposes its current frame tree via the MainFrame and ChildFrames methods. IJSHandle JSHandle represents an in-page JavaScript object. JSHandles can be created with the EvaluateHandleAsync(String, Object) method. IKeyboard Keyboard provides an api for managing a virtual keyboard. IMouse Provides methods to interact with the mouse. IPage Page provides methods to interact with a single tab or extension background page in Chromium. One Browser instance might have multiple Page instances. IPlaywright IPlaywright provides methods to interact with the playwright server. IRequest Whenever the page sends a request, the following events are emitted by an IPage . Request emitted when the request is issued by the page. IResponse Represents responses which are received by page. IWorker The Worker class represents a WebWorker . Enums CheckedState Three-state boolean. See Checked . ColorScheme Options for EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) . ContextPermission Options for GrantPermissionsAsync(ContextPermission[], String) . DialogType Dialog type. ElementState See WaitForElementStateAsync(ElementState, Nullable<Int32>) . LifecycleEvent Lyfe cycle event. MediaType Options for EmulateMediaAsync(Nullable<MediaType>, Nullable<ColorScheme>) . Polling An interval at which the pageFunction is executed. PressedState Three-state boolean. See Pressed . RequestAbortErrorCode Abort error codes. ResourceType Resource type. SameSite SameSite values in cookies. ScreenshotFormat Screenshot file format. WaitForState Wait for options for WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) and WaitForSelectorAsync(String, Nullable<WaitForState>, Nullable<Int32>) ."
  },
  "api/PlaywrightSharp.ContextEvent.html": {
    "href": "api/PlaywrightSharp.ContextEvent.html",
    "title": "Class ContextEvent | Playwright Sharp",
    "keywords": "Class ContextEvent Context events. See WaitForEvent<T>(PlaywrightEvent<T>, Func<T, Boolean>, Nullable<Int32>) . Inheritance System.Object ContextEvent Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public static class ContextEvent : object Properties | Improve this Doc View Source BackgroundPage PlaywrightEvent<T> representing a BackgroundPage . Declaration public static PlaywrightEvent<PageEventArgs> BackgroundPage { get; } Property Value Type Description PlaywrightEvent < PageEventArgs > | Improve this Doc View Source Close PlaywrightEvent<T> representing a Close . Declaration public static PlaywrightEvent<EventArgs> Close { get; } Property Value Type Description PlaywrightEvent < EventArgs > | Improve this Doc View Source Page PlaywrightEvent<T> representing a Page . Declaration public static PlaywrightEvent<PageEventArgs> Page { get; } Property Value Type Description PlaywrightEvent < PageEventArgs > | Improve this Doc View Source ServiceWorker PlaywrightEvent<T> representing a ServiceWorker . Declaration public static PlaywrightEvent<WorkerEventArgs> ServiceWorker { get; } Property Value Type Description PlaywrightEvent < WorkerEventArgs >"
  },
  "api/PlaywrightSharp.LifecycleEvent.html": {
    "href": "api/PlaywrightSharp.LifecycleEvent.html",
    "title": "Enum LifecycleEvent | Playwright Sharp",
    "keywords": "Enum LifecycleEvent Lyfe cycle event. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum LifecycleEvent : int Fields Name Description DOMContentLoaded Consider navigation to be finished when the DOMContentLoaded event is fired Load Consider navigation to be finished when the load event is fired Networkidle Consider navigation to be finished when there are no more than 0 network connections for at least 500 ms"
  },
  "api/PlaywrightSharp.JSCoverageEntryRange.html": {
    "href": "api/PlaywrightSharp.JSCoverageEntryRange.html",
    "title": "Class JSCoverageEntryRange | Playwright Sharp",
    "keywords": "Class JSCoverageEntryRange Script range. See JSCoverageFunction . Inheritance System.Object JSCoverageEntryRange Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class JSCoverageEntryRange : object Properties | Improve this Doc View Source Count Count. Declaration public int Count { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndOffset An end offset in text, exclusive. Declaration public int EndOffset { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StartOffset A start offset in text, inclusive. Declaration public int StartOffset { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/PlaywrightSharp.PageErrorEventArgs.html": {
    "href": "api/PlaywrightSharp.PageErrorEventArgs.html",
    "title": "Class PageErrorEventArgs | Playwright Sharp",
    "keywords": "Class PageErrorEventArgs Page error event arguments. Inheritance System.Object PageErrorEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class PageErrorEventArgs : EventArgs Properties | Improve this Doc View Source Message Error Message. Declaration public string Message { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Error name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Stack Error stack. Declaration public string Stack { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Error Value. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlaywrightSharp.ConsoleEventArgs.html": {
    "href": "api/PlaywrightSharp.ConsoleEventArgs.html",
    "title": "Class ConsoleEventArgs | Playwright Sharp",
    "keywords": "Class ConsoleEventArgs Console data. Inheritance System.Object ConsoleEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ConsoleEventArgs : EventArgs Constructors | Improve this Doc View Source ConsoleEventArgs(ConsoleMessage) Initializes a new instance of the ConsoleEventArgs class. Declaration public ConsoleEventArgs(ConsoleMessage message) Parameters Type Name Description ConsoleMessage message Message. Properties | Improve this Doc View Source Message Gets the message. Declaration public ConsoleMessage Message { get; } Property Value Type Description ConsoleMessage The message."
  },
  "api/PlaywrightSharp.RequestFailedEventArgs.html": {
    "href": "api/PlaywrightSharp.RequestFailedEventArgs.html",
    "title": "Class RequestFailedEventArgs | Playwright Sharp",
    "keywords": "Class RequestFailedEventArgs Arguments used by IPage events. Inheritance System.Object RequestFailedEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class RequestFailedEventArgs : EventArgs Properties | Improve this Doc View Source FailureText Failure text. Declaration public string FailureText { get; set; } Property Value Type Description System.String | Improve this Doc View Source Request Gets the request. Declaration public IRequest Request { get; set; } Property Value Type Description IRequest See Also RequestFailed"
  },
  "api/PlaywrightSharp.ResponseEventArgs.html": {
    "href": "api/PlaywrightSharp.ResponseEventArgs.html",
    "title": "Class ResponseEventArgs | Playwright Sharp",
    "keywords": "Class ResponseEventArgs Response arguments. Inheritance System.Object ResponseEventArgs Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ResponseEventArgs : EventArgs Properties | Improve this Doc View Source Response Gets the response. Declaration public IResponse Response { get; set; } Property Value Type Description IResponse The response."
  },
  "api/PlaywrightSharp.Input.Modifier.html": {
    "href": "api/PlaywrightSharp.Input.Modifier.html",
    "title": "Enum Modifier | Playwright Sharp",
    "keywords": "Enum Modifier Modifiers for click actions. Namespace : PlaywrightSharp.Input Assembly : PlaywrightSharp.dll Syntax public enum Modifier : int Fields Name Description Alt Alt key. Control Control key. Meta Meta key. Shift Shift Key."
  },
  "api/PlaywrightSharp.Playwright.html": {
    "href": "api/PlaywrightSharp.Playwright.html",
    "title": "Class Playwright | Playwright Sharp",
    "keywords": "Class Playwright Inheritance System.Object ChannelOwnerBase Playwright Implements IPlaywright IDisposable Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public sealed class Playwright : ChannelOwnerBase, IPlaywright, IDisposable, IChannelOwner<Playwright>, IChannelOwner Fields | Improve this Doc View Source DefaultTimeout Default timeout. Declaration public const int DefaultTimeout = null Field Value Type Description System.Int32 Properties | Improve this Doc View Source Chromium Gets the Chromium browser type from the playwright server. Declaration public IChromiumBrowserType Chromium { get; } Property Value Type Description IChromiumBrowserType | Improve this Doc View Source Devices Returns a list of devices to be used with NewContextAsync(BrowserContextOptions) . Declaration public IReadOnlyDictionary<string, DeviceDescriptor> Devices { get; } Property Value Type Description IReadOnlyDictionary < System.String , DeviceDescriptor > | Improve this Doc View Source Firefox Gets the Firefox browser type from the playwright server. Declaration public IBrowserType Firefox { get; } Property Value Type Description IBrowserType | Improve this Doc View Source Item[String] Gets a IBrowserType . Declaration public IBrowserType this[string browserType] { get; } Parameters Type Name Description System.String browserType IBrowserType name. You can get the names from BrowserType . e.g.: Chromium , Firefox or Webkit . Property Value Type Description IBrowserType | Improve this Doc View Source Selectors Selectors can be used to install custom selector engines. Declaration public Selectors Selectors { get; } Property Value Type Description Selectors | Improve this Doc View Source Webkit Gets the Webkit browser type from the playwright server. Declaration public IBrowserType Webkit { get; } Property Value Type Description IBrowserType Methods | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IPlaywright IDisposable"
  },
  "api/PlaywrightSharp.Transport.TransportTaskScheduler.html": {
    "href": "api/PlaywrightSharp.Transport.TransportTaskScheduler.html",
    "title": "Delegate TransportTaskScheduler | Playwright Sharp",
    "keywords": "Delegate TransportTaskScheduler Delegate for scheduling of long-running transport tasks. Namespace : PlaywrightSharp.Transport Assembly : PlaywrightSharp.dll Syntax public delegate void TransportTaskScheduler(Func<CancellationToken, Task> func, CancellationToken cancellationToken); Parameters Type Name Description Func < CancellationToken , Task > func Reader func. CancellationToken cancellationToken Cancellation token for the task to be scheduled."
  },
  "api/PlaywrightSharp.BindingSource.html": {
    "href": "api/PlaywrightSharp.BindingSource.html",
    "title": "Class BindingSource | Playwright Sharp",
    "keywords": "Class BindingSource caller information. Inheritance System.Object BindingSource Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class BindingSource : object Properties | Improve this Doc View Source Context Browser Context. Declaration public IBrowserContext Context { get; set; } Property Value Type Description IBrowserContext | Improve this Doc View Source Frame Frame. Declaration public IFrame Frame { get; set; } Property Value Type Description IFrame | Improve this Doc View Source Page Page. Declaration public IPage Page { get; set; } Property Value Type Description IPage"
  },
  "api/PlaywrightSharp.RequestAbortErrorCode.html": {
    "href": "api/PlaywrightSharp.RequestAbortErrorCode.html",
    "title": "Enum RequestAbortErrorCode | Playwright Sharp",
    "keywords": "Enum RequestAbortErrorCode Abort error codes. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum RequestAbortErrorCode : int Fields Name Description Aborted An operation was aborted (due to user action) AccessDenied Permission to access a resource, other than the network, was denied AddressUnreachable The IP address is unreachable. This usually means that there is no route to the specified host or network. BlockedByClient The client chose to block the request. BlockedByResponse The request failed because the response was delivered along with requirements which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance). ConnectionAborted A connection timed out as a result of not receiving an ACK for data sent. ConnectionClosed A connection was closed (corresponding to a TCP FIN). ConnectionFailed A connection attempt failed. ConnectionRefused A connection attempt was refused. ConnectionReset A connection was reset (corresponding to a TCP RST). Failed A generic failure occurred. InternetDisconnected The Internet connection has been lost. NameNotResolved The host name could not be resolved. TimedOut An operation timed out."
  },
  "api/PlaywrightSharp.IKeyboard.html": {
    "href": "api/PlaywrightSharp.IKeyboard.html",
    "title": "Interface IKeyboard | Playwright Sharp",
    "keywords": "Interface IKeyboard Keyboard provides an api for managing a virtual keyboard. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IKeyboard Methods | Improve this Doc View Source DownAsync(String) Dispatches a <c>keydown</c> event Declaration Task DownAsync(string key) Parameters Type Name Description System.String key Name of key to press, such as ArrowLeft . Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks If key is a single character and no modifier keys besides Shift are being held down, a keypress / input event will also generated. The text option can be specified to force an input event to be generated. If key is a modifier key, Shift , Meta , Control , or Alt , subsequent key presses will be sent with that modifier active. To release the modifier key, use UpAsync(String) After the key is pressed once, subsequent calls to DownAsync(String) will have repeat set to true . To release the key, use UpAsync(String) . | Improve this Doc View Source InsertTextAsync(String) Dispatches only input event, does not emit the keydown, keyup or keypress events. Declaration Task InsertTextAsync(string text) Parameters Type Name Description System.String text Sets input to the specified text value. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source PressAsync(String, Int32) Shortcut for DownAsync(String) and UpAsync(String) . Declaration Task PressAsync(string key, int delay = 0) Parameters Type Name Description System.String key Name of key to press, such as ArrowLeft . KeyDefinitions for a list of all key names. System.Int32 delay Time to wait between keydown and keyup in milliseconds. Defaults to 0. Returns Type Description Task A that completes when the message is confirmed by the browser. Remarks If key is a single character and no modifier keys besides Shift are being held down, a keypress / input event will also generated. Modifier keys DO effect PressAsync(String, Int32, Nullable<Int32>, Nullable<Boolean>) . Holding down Shift will type the text in upper case. | Improve this Doc View Source TypeAsync(String, Int32) Sends a keydown , keypress / input , and keyup event for each character in the text. Declaration Task TypeAsync(string text, int delay = 0) Parameters Type Name Description System.String text A text to type into a focused element. System.Int32 delay Delay between key press. Returns Type Description Task A that completes when the message is confirmed by the browser. | Improve this Doc View Source UpAsync(String) Dispatches a keyup event. Declaration Task UpAsync(string key) Parameters Type Name Description System.String key Name of key to release, such as ArrowLeft . Returns Type Description Task A that completes when the message is confirmed by the browser."
  },
  "api/PlaywrightSharp.CheckedState.html": {
    "href": "api/PlaywrightSharp.CheckedState.html",
    "title": "Enum CheckedState | Playwright Sharp",
    "keywords": "Enum CheckedState Three-state boolean. See Checked . Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public enum CheckedState : int Fields Name Description Checked Checked. Mixed Mixed. Unchecked Unchecked."
  },
  "api/PlaywrightSharp.IAccessibility.html": {
    "href": "api/PlaywrightSharp.IAccessibility.html",
    "title": "Interface IAccessibility | Playwright Sharp",
    "keywords": "Interface IAccessibility The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches. Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output. Blink - Chrome's rendering engine - has a concept of \"accessibility tree\", which is than translated into different platform-specific APIs. Accessibility namespace gives users access to the Blink Accessibility Tree. Most of the accessibility tree gets filtered out when converting from Blink AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, PlaywrightSharp tries to approximate this filtering, exposing only the \"interesting\" nodes of the tree. Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public interface IAccessibility Methods | Improve this Doc View Source SnapshotAsync(Boolean, IElementHandle) Snapshots the async. Declaration Task<SerializedAXNode> SnapshotAsync(bool interestingOnly = true, IElementHandle root = null) Parameters Type Name Description System.Boolean interestingOnly Prune uninteresting nodes from the tree. Defaults to true. IElementHandle root The root DOM element for the snapshot. Defaults to the whole page. Returns Type Description Task < SerializedAXNode > A that completes when the snapshot is completed, yielding the serialized result."
  },
  "api/PlaywrightSharp.BrowserContextOptions.html": {
    "href": "api/PlaywrightSharp.BrowserContextOptions.html",
    "title": "Class BrowserContextOptions | Playwright Sharp",
    "keywords": "Class BrowserContextOptions NewContextAsync(BrowserContextOptions) . Inheritance System.Object BrowserContextOptions Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class BrowserContextOptions : object Properties | Improve this Doc View Source AcceptDownloads Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled. Declaration public bool? AcceptDownloads { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BypassCSP Toggles bypassing page's Content-Security-Policy. Declaration public bool? BypassCSP { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ColorScheme Emulates 'prefers-colors-scheme' media feature. Declaration public ColorScheme? ColorScheme { get; set; } Property Value Type Description System.Nullable < ColorScheme > | Improve this Doc View Source DeviceScaleFactor Gets or sets the device scale factor. Declaration public decimal? DeviceScaleFactor { get; set; } Property Value Type Description System.Nullable < System.Decimal > | Improve this Doc View Source ExtraHttpHeaders An object containing additional HTTP headers to be sent with every request. Declaration public Dictionary<string, string> ExtraHttpHeaders { get; set; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source Geolocation Changes the Geolocation of the context. Declaration public Geolocation Geolocation { get; set; } Property Value Type Description Geolocation | Improve this Doc View Source HasTouch Specifies if viewport supports touch events. Defaults to false. Declaration public bool? HasTouch { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source HttpCredentials Credentials for HTTP authentication. Declaration public Credentials HttpCredentials { get; set; } Property Value Type Description Credentials | Improve this Doc View Source IgnoreHTTPSErrors Whether to ignore HTTPS errors during navigation. Defaults to false. Declaration public bool? IgnoreHTTPSErrors { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsMobile Gets or sets whether the meta viewport tag is taken into account. Declaration public bool? IsMobile { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source JavaScriptEnabled Whether or not to enable or disable JavaScript in the context. Defaults to true. Declaration public bool? JavaScriptEnabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Locale Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Declaration public string Locale { get; set; } Property Value Type Description System.String | Improve this Doc View Source Offline Whether to emulate network being offline. Defaults to false . Declaration public bool? Offline { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Permissions A from origin keys to permissions values. See GrantPermissionsAsync(ContextPermission[], String) for more details. Declaration public ContextPermission[] Permissions { get; set; } Property Value Type Description ContextPermission [] | Improve this Doc View Source TimezoneId Changes the timezone of the context. See ICU’s metaZones.txt for a list of supported timezone IDs. Declaration public string TimezoneId { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserAgent Specific user agent to use in this context. Declaration public string UserAgent { get; set; } Property Value Type Description System.String | Improve this Doc View Source Viewport Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport. Declaration public ViewportSize Viewport { get; set; } Property Value Type Description ViewportSize Methods | Improve this Doc View Source Clone() Clones the BrowserContextOptions . Declaration public BrowserContextOptions Clone() Returns Type Description BrowserContextOptions A copy of the current BrowserContextOptions ."
  },
  "api/PlaywrightSharp.ProxySettings.html": {
    "href": "api/PlaywrightSharp.ProxySettings.html",
    "title": "Class ProxySettings | Playwright Sharp",
    "keywords": "Class ProxySettings Proxy Settings. See LaunchAsync(LaunchOptions) and LaunchPersistentContextAsync(String, LaunchPersistentOptions) . Inheritance System.Object ProxySettings Namespace : PlaywrightSharp Assembly : PlaywrightSharp.dll Syntax public class ProxySettings : object Properties | Improve this Doc View Source Bypass Optional coma-separated domains to bypass proxy, for example \".com, chromium.org, .domain.com\". Declaration public string Bypass { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Optional password to use if HTTP proxy requires authentication. Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Server Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example http://myproxy.com:3128 or socks5://myproxy.com:3128. Declaration public string Server { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Optional username to use if HTTP proxy requires authentication. Declaration public string Username { get; set; } Property Value Type Description System.String"
  }
}